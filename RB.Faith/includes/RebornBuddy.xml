<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RebornBuddy</name>
    </assembly>
    <members>
        <member name="T:ff14bot.AClasses.BotBase">
            <summary>
            Base class all non async botbases should inherit frome
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.DoInitialize">
            <summary>
            Executes Initialize and sets Initialized
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.IsAutonomous">
            <summary>
            Return false if human presence is needed.
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.Initialize">
            <summary>
            Called one time when users starts the botbase
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.Pulse">
            <summary>
            Called every tick
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.Start">
            <summary>
            Called when the bot is started
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.Stop">
            <summary>
            Called when the bot is stopped
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.ToString">
            <summary>
            Returns the botbases name
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.AClasses.BotBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotBase.OnButtonPress">
            <summary>
            Called when the user presses the bot settings button
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.WantButton">
            <summary>
            Overrides if the bot settings button should be enabled
            </summary>
        </member>
        <member name="F:ff14bot.AClasses.BotBase.Initialized">
            <summary>
            Has Initalize been called?
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.IsPrimaryType">
            <summary>
            Unused
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.Name">
            <summary>
            Botbase name
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.EnglishName">
            <summary>
            Name of the bot in english for logging purposes
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.PulseFlags">
            <summary>
            What flags should the pulsator execute
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.RequiresProfile">
            <summary>
            Should the load profile button be enabled
            </summary>
        </member>
        <member name="P:ff14bot.AClasses.BotBase.Root">
            <summary>
            Base logic that needs to be implemented
            </summary>
        </member>
        <member name="T:ff14bot.AClasses.BotPlugin">
            <summary>
            Base plugin class that all plugins should inherit from
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.#ctor">
            <summary>
            Constructor for plugins
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.Dispose">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.Equals(ff14bot.AClasses.BotPlugin)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.Equals(ff14bot.Interfaces.IBotPlugin)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.DoInitialize">
            <summary>
            Executes Initialize if it hasn't been run already
            </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.OnButtonPress">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.OnPulse">
            <summary> Executes the pulse action. This is called every "tick" of the bot. </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.OnInitialize">
            <summary> Executes the initialize action.</summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.OnShutdown">
            <summary> Executes the shutdown action. This is called when the bot is shutting down and when plugins are being reloaded. </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.OnEnabled">
            <summary> Executes the enabled action. This is called when the user has enabled this specific plugin via the GUI. </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.OnDisabled">
            <summary> Executes the disabled action. This is called when the user has disabled this specific plugin via the GUI. </summary>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.op_Equality(ff14bot.AClasses.BotPlugin,ff14bot.AClasses.BotPlugin)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.AClasses.BotPlugin.op_Inequality(ff14bot.AClasses.BotPlugin,ff14bot.AClasses.BotPlugin)">
            <summary>
            
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.AClasses.BotPlugin.Author">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.AClasses.BotPlugin.Name">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.AClasses.BotPlugin.Description">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.AClasses.BotPlugin.Version">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.AClasses.BotPlugin.ButtonText">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.AClasses.BotPlugin.WantButton">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.AClasses.CombatRoutine.SupportedCapabilities">
            <summary>
            Gets the currently supported capabilities ORed together.
            This should use the current dynamic state of the capabilities but 
            not the state returned by <see cref="M:ff14bot.AClasses.CombatRoutine.GetCapabilityState(ff14bot.Managers.CapabilityFlags)"/>
            </summary>
            <example>
            // Example of how to indicate that the Combat Routine supports all capabilities except summoning pet.
            <code>
            public virtual CombatRoutineCapability SupportedCapabilities
            {
            	get
            	{
            		return CombatRoutineCapability.All &amp; ~CombatRoutineCapability.PetSummoning; 
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:ff14bot.AClasses.CombatRoutine.HasCapability(ff14bot.Managers.CapabilityFlags)">
            <summary>
            Determines whether the Combat Routine has the given capability/capabilities.
            It is assumed that capabilities can be toggled if available.
            </summary>
            <param name="capability">The capability.</param>
            <returns>
            <c>true</c> if CombatRoutine supports the capability/capabilities. If multiple capabilities are 
            ORed together then <c>true</c> is returned only if CombatRoutine supports ALL of them;
            otherwise <c>false</c> is returned.
            </returns>
        </member>
        <member name="M:ff14bot.AClasses.CombatRoutine.GetCapabilityState(ff14bot.Managers.CapabilityFlags)">
            <summary>Returns the state of a capability. This can only be used by the combat routine</summary>
            <param name="capability">The capability.</param>
            <returns>The state of a capability.</returns>
            <remarks>See <see cref="M:ff14bot.Managers.RoutineManager.GetCapabilityState(ff14bot.Managers.CapabilityFlags)"/>.</remarks>
        </member>
        <member name="M:ff14bot.BotBases.FateBot.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ff14bot.BotBases.FateBot.Name">
            <summary> Gets the name of this bot. </summary>
        </member>
        <member name="P:ff14bot.BotBases.FateBot.Description">
            <summary> Gets the description. </summary>
            <value> The description. </value>
        </member>
        <member name="P:ff14bot.BotBases.FateBot.IsPrimaryType">
            <summary> Gets a value indicating whether this bot is a primary bot. (Should be executed "at all times" excluding when a secondary bot has need to run. See: mixed-mode). </summary>
        </member>
        <member name="M:ff14bot.BotBases.FateBot.SetFate(ff14bot.Managers.FateData)">
            <summary>
            Sets the currentfate to the provided fatedata, also sets the poi.
            </summary>
            <param name="fate"></param>
        </member>
        <member name="M:ff14bot.BotBases.FateBot.Start">
            <summary> Starts this bot. Do any initialization here. </summary>
        </member>
        <member name="M:ff14bot.BotBases.FateBot.Stop">
            <summary> Stops this bot. Do any pre-dispose cleanup here. </summary>
        </member>
        <member name="M:ff14bot.BotBases.OrderBot.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:ff14bot.BotBases.OrderBot.Name">
            <summary> Gets the name of this bot. </summary>
        </member>
        <member name="P:ff14bot.BotBases.OrderBot.Description">
            <summary> Gets the description. </summary>
            <value> The description. </value>
        </member>
        <member name="P:ff14bot.BotBases.OrderBot.IsPrimaryType">
            <summary> Gets a value indicating whether this bot is a primary bot. (Should be executed "at all times" excluding when a secondary bot has need to run. See: mixed-mode). </summary>
        </member>
        <member name="M:ff14bot.BotBases.OrderBot.Start">
            <summary> Starts this bot. Do any initialization here. </summary>
        </member>
        <member name="F:ff14bot.BotBases.OrderBot.StringSelectIndex">
            <summary>
            When there are select string windows during cutscenes, the item to be clicked will be popped off the queue and used
            </summary>
        </member>
        <member name="F:ff14bot.BotBases.OrderBot.BlockSkippingCutscenes">
            <summary>
            When set to true the users prefrence to skip cutscenes will be ignored and they will not be skipped
            </summary>
        </member>
        <member name="M:ff14bot.BotBases.OrderBot.Stop">
            <summary> Stops this bot. Do any pre-dispose cleanup here. </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveConciliate">
            <summary>
            type - 5
            Where you /soothe or pacify mobs when they get low on health
            </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveDetect">
            <summary>
            type - 7
            this is where you go around and use a "detect" item on mobs then kill them
            </summary>
        </member>
        <member name="P:ff14bot.Directors.BattleLeveDetect.GetEventItemNum">
            <summary>
            index of items that we have that are used to detect a specific mob
            </summary>
        </member>
        <member name="M:ff14bot.Directors.BattleLeveDetect.DetectCount(System.Int32)">
            <summary>
            gets the current index of detected mobs for this leve type
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveDrop">
            <summary>
            type - 2
            kill mobs until you have a # of drops.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ff14bot.Directors.BattleLeveGuide" -->
        <member name="T:ff14bot.Directors.BattleLeveHunt">
            <summary>
            type 11
            
            use items to lure mobs and kill them. 
            Possibly have to kill other mobs to get the item.
            </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveOrb">
             <summary>
             type 10
             
             kill some things get some items. 
            
             "Necrologos: Olidious Separation" is an example leve
             </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLevePursuit">
            <summary>
            type - 3
            
            kill some mobs
            </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveRound">
            <summary>
            type - 8
            another version of  BattleLeveSurvive (it literally says BattleLeveSurvive:OnTerminate in some of the lua print functions :rofl:)
            </summary>
        </member>
        <member name="M:ff14bot.Directors.BattleLeveRound.GetActiveObjectives">
            <summary>
            gets available tasks
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Directors.BattleLeveRound.GetTodoArgs(System.Int32)">
            <summary>
            will return 0 for the Max value if the objectives (1-8) hasn't been "revealed"
            
            Max value for objectives 1-8 aren't stored in the BattleLeveData, Lua doesn't contain the data until the objective is visible.
            </summary>
            <param name="ObjectiveIndex"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveSearch">
            <summary>
            type - 6 
            ???
            </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveSurvive">
            <summary>
            type - 4
            
            Sooo I have no idea how this one works, there are only 3 "BattleLeves" of this type and they aren't in the Leve table so you can't pick them up
            This is just here for completion as They might be part of the game somewhere.
            
            BattleLeveIds - 65547, 65548, 65549
            
            Kill waves of mobs?
            </summary>
        </member>
        <member name="T:ff14bot.Directors.BattleLeveSweep">
            <summary>
            type - 1
            kill mobs until you have a # of drops.
            </summary>
        </member>
        <member name="T:ff14bot.Directors.GatheringLeveExecution">
            <summary>
            ObjectiveIndex 1 will always have a max of 0
            Quest Data does not know the break points for Execution.
            </summary>
        </member>
        <member name="P:ff14bot.Directors.GatheringLeveExecution.ExecutionProgress">
            <summary>
            Holds how "well" the players "Gathering Score" 
            </summary>
        </member>
        <member name="T:ff14bot.Directors.GatheringLeveProcurance">
            <summary>
            type 2
            </summary>
        </member>
        <member name="T:ff14bot.Directors.GatheringLeveSearch">
            <summary>
            type 1
            </summary>
        </member>
        <member name="P:ff14bot.Directors.GatheringLeveSearch.ExecutionProgress">
            <summary>
            Holds how "well" the players "Gathering Score" 
            </summary>
        </member>
        <member name="T:ff14bot.Directors.GatheringLeveSearchProcurance">
            <summary>
            type 3
            </summary>
        </member>
        <member name="T:ff14bot.Directors.Pomander">
            <summary>
            Pomanders
            </summary>
        </member>
        <member name="T:ff14bot.Directors.InstanceContentDirector">
            <summary>
            Director that is active when inside instances
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.TimeLeftInDungeon">
            <summary>
            How much time is left before the dungeon expires
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.InstanceStarted">
            <summary>
            Checks if the instance has started
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.InstanceEnded">
            <summary>
            Checks if the instance has ended
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.DungeonId">
            <summary>
            Id of the dungeon
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.DeepDungeonLevel">
            <summary>
            floor # for Palace of the dead
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.DeepDungeonReturnStatus">
            <summary>
            gets the carn of return status
            value 0-11, 11 being 100% active
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.DeepDungeonPortalStatus">
            <summary>
            gets the carn of passage status 
            value 0-11, 11 being 100% active
            </summary>
        </member>
        <member name="P:ff14bot.Directors.InstanceContentDirector.DeepDungeonInventory">
            <summary>
            gets the palace of the dead inventory status, active auras that don't show in the aura system are found here. 
            </summary>
        </member>
        <member name="M:ff14bot.Directors.InstanceContentDirector.GetWork">
            <summary>
            read our to do work
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Directors.InstanceContentDirector.GetTodoArgs(System.Int32)">
            <summary>
            get the current / max for a to do index
            </summary>
            <param name="ObjectiveIndex"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Helpers.Extensions_Vector3.Add(Clio.Utilities.Vector3,System.Double,System.Double,System.Double)">
            <summary>
            <para>Adds the provided X, Y, and Z offsets to Vector3 yielding a new Vector3.</para>
            <para>---</para>
            <para>The HBcore only provides a version of this that accepts 'float' values.
            This version accepts 'doubles', because it is inefficient to keep truncating
            data types (to float) that are provided by the Math and other libraries.</para>
            <para>'Double' performance is just as fast as 'Float'.  Internally, modern
            computer architectures calculate using maximum precision (i.e., many bits
            bigger than double), then truncate the result to fit.  The only benefit
            'float' has over 'double' is storage space, which is negligible unless
            you've a database using billions of them.</para>
            </summary>
            <returns>new Vector3 with adjusted coordinates</returns>
            <remarks>17Apr2011-12:16UTC chinajade</remarks> 
        </member>
        <member name="M:ff14bot.Helpers.Extensions_Vector3.FanOutRandom(Clio.Utilities.Vector3,System.Double)">
            <summary>
            <para>Finds another point near the destination.  Useful when toon is 'waiting' for something
            (e.g., boat, mob repops, etc). This allows multiple people running
            the same profile to not stand on top of each other while waiting for
            something.</para>
            <para>Notes:<list type="bullet">
            <item><description><para> * The returned Vector3 is carefully chosen.  The returned Vector3
            will not cause you to fall off a boat dock or Zeppelin landing.</para></description></item>
            <item><description><para> * Should only be used once the player is within 100 yards of the provided location otherwise the raycasts will fail</para></description></item>
            </list></para>
            </summary>
            <param name="location"></param>
            <param name="maxRadius"></param>
            <returns></returns>
            <remarks>17Apr2011-12:16UTC chinajade</remarks> 
        </member>
        <member name="M:ff14bot.Helpers.Extensions_Vector3.IsOverGround(Clio.Utilities.Vector3,System.Double)">
            <summary>
            Returns true, if ground is within DISTANCE _below_ you.
            </summary>
            <param name="location"></param>
            <param name="probeDistance"></param>
            <returns>true, if ground is within DISTANCE _below_ you.</returns>
            <remarks>17Apr2011-12:16UTC chinajade</remarks> 
        </member>
        <member name="T:ff14bot.Helpers.SqPack.ImageConverter">
            <summary>
                Helper class for converting image files as stored in SqPack
                to formats useable in .NET
            </summary>
        </member>
        <member name="T:ff14bot.Helpers.SqPack.ImageConverter.Preprocessor">
            <summary>
                Method signature for processing data as stored in SqPack into ARGB.
            </summary>
            <param name="src">Source buffer.</param>
            <param name="dst">_Buffer to write into.</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
        </member>
        <member name="M:ff14bot.Helpers.SqPack.SqSegmentHeader.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:ff14bot.Helpers.SqPack.BinaryReaderExtensionsEx.MoveMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Calls the native "memcpy" function.
            </summary>
        </member>
        <member name="M:ff14bot.Helpers.SqPack.BinaryReaderExtensionsEx.Read``1(System.IO.BinaryReader)">
            <summary>
                Reads a generic structure from the current stream.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="br"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Helpers.SqPack.FastLargeFile">
            <summary>
            A small wrapper around FileStream to help with large-file reading, without the overhead of .NET's internal contracts.
            </summary>
        </member>
        <member name="M:ff14bot.Helpers.SqPack.FastLargeFile.MoveMemory(System.Byte*,System.Byte*,System.Int32)">
            <summary>
            Calls the native "memcpy" function.
            </summary>
        </member>
        <member name="T:ff14bot.Helpers.SqPack.SizeCache`1">
            <summary>
                A cheaty way to get very fast "Marshal.SizeOf" support without the overhead of the Marshaler each time.
                Also provides a way to get the pointer of a generic type (useful for fast memcpy and other operations)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ff14bot.Helpers.SqPack.SizeCache`1.Size">
            <summary> The size of the Type </summary>
        </member>
        <member name="F:ff14bot.Helpers.SqPack.SizeCache`1.Type">
            <summary> The real, underlying type. </summary>
        </member>
        <member name="F:ff14bot.Helpers.SqPack.SizeCache`1.TypeRequiresMarshal">
            <summary> True if this type requires the Marshaler to map variables. (No direct pointer dereferencing) </summary>
        </member>
        <member name="T:ff14bot.Helpers.FrameCachedValue`1">
            <summary>
            Provides simple and accessible caching.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ff14bot.Helpers.FrameCachedValue`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new CachedValue of the specified type, stored for the specified timespan.
            </summary>
            <param name="retriever">The retriever.</param>
            <param name="cacheFor">The cache for.</param>
        </member>
        <member name="P:ff14bot.Helpers.FrameCachedValue`1.Value">
            <summary>
            Gets the value this Cache holds. Returns the cached value if the specified duration has not expired, and a "fresh" value if it has.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ff14bot.Helpers.FrameCachedValue`1.RealValue">
            <summary>
            Gets the real, non-cached value. Calling this does not affect the cache itself, and does not reset any of its timers.
            </summary>
        </member>
        <member name="M:ff14bot.Helpers.FrameCachedValue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ff14bot.Helpers.LazyFrameCachedValue`1">
            <summary>
            Provides simple and accessible caching.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ff14bot.Helpers.LazyFrameCachedValue`1.#ctor(System.Func{System.IntPtr})">
            <summary>
            Creates a new CachedValue of the specified type, stored for the specified timespan.
            </summary>
            <param name="retriever">The retriever.</param>
            <param name="cacheFor">The cache for.</param>
        </member>
        <member name="P:ff14bot.Helpers.LazyFrameCachedValue`1.Value">
            <summary>
            Gets the value this Cache holds. Returns the cached value if the specified duration has not expired, and a "fresh" value if it has.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ff14bot.Helpers.LazyFrameCachedValue`1.RealValue">
            <summary>
            Gets the real, non-cached value. Calling this does not affect the cache itself, and does not reset any of its timers.
            </summary>
        </member>
        <member name="M:ff14bot.Helpers.LazyFrameCachedValue`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ff14bot.Helpers.FrameCachedObject`1">
            <summary>
            Provides simple and accessible caching.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ff14bot.Helpers.FrameCachedObject`1.#ctor(System.Func{`0})">
            <summary>
            Creates a new CachedValue of the specified type, stored for the specified timespan.
            </summary>
            <param name="retriever">The retriever.</param>
            <param name="cacheFor">The cache for.</param>
        </member>
        <member name="P:ff14bot.Helpers.FrameCachedObject`1.Value">
            <summary>
            Gets the value this Cache holds. Returns the cached value if the specified duration has not expired, and a "fresh" value if it has.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:ff14bot.Helpers.FrameCachedObject`1.RealValue">
            <summary>
            Gets the real, non-cached value. Calling this does not affect the cache itself, and does not reset any of its timers.
            </summary>
        </member>
        <member name="M:ff14bot.Helpers.FrameCachedObject`1.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:ff14bot.Helpers.JsonSettings">
            <summary>
            Main settings class for rebornbuddy. Inherit this if you want to make your own settings class
            </summary>
        </member>
        <member name="P:ff14bot.Helpers.JsonSettings._revision">
            <summary>
            Override this field when you change the default values for a setting and use the UpdateDefaultValueAttribute attribute to updatethem
            </summary>
        </member>
        <member name="T:ff14bot.Helpers.LocalizedDictionary`2">
            <summary>
            LocalizedDictionary provides a dictionary that provides 3 different keys, a user-supplied type(often an int), and two strings
            </summary>    
            <typeparam name="K">Primary Key Type</typeparam>
            <typeparam name="V">Value Type</typeparam>
        </member>
        <member name="P:ff14bot.Helpers.LocalizedDictionary`2.Item(System.String)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <param name="subKey">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="subKey" /> does not exist in the collection.</exception>
        </member>
        <member name="P:ff14bot.Helpers.LocalizedDictionary`2.Item(`0)">
            <summary>Gets or sets the value associated with the specified key.</summary>
            <param name="primaryKey">The key of the value to get or set.</param>
            <returns>The value associated with the specified key. If the specified key is not found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException" />, and a set operation creates a new element with the specified key.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="primaryKey" /> is <see langword="null" />.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="primaryKey" /> does not exist in the collection.</exception>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.TryGetValue(System.String,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="subKey">The key of the value to get.</param>
            <param name="val">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subKey" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>Gets the value associated with the specified key.</summary>
            <param name="primaryKey">The key of the value to get.</param>
            <param name="val">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="primaryKey" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.ContainsKey(System.String)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.</summary>
            <param name="subKey">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="subKey" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.ContainsKey(`0)">
            <summary>Determines whether the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains the specified key.</summary>
            <param name="primaryKey">The key to locate in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
            <returns>
            <see langword="true" /> if the <see cref="T:System.Collections.Generic.Dictionary`2" /> contains an element with the specified key; otherwise, <see langword="false" />.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="primaryKey" /> is <see langword="null" />.</exception>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.Add(`0,System.String,System.String,`1)">
            <summary>
            Adds the item to the dictionaries. If englishkey or Localizedkey are null or empty then the item is only the primarykey will be used
            </summary>
            <param name="primaryKey"></param>
            <param name="englishKey"></param>
            <param name="localizedKey"></param>
            <param name="val"></param>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.CloneValues">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Helpers.LocalizedDictionary`2.Values">
            <summary>Gets a collection containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> containing the values in the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.ClonePrimaryKeys">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.Clear">
            <summary>
            Clear the dictionaries
            </summary>
        </member>
        <member name="P:ff14bot.Helpers.LocalizedDictionary`2.Count">
            <summary>
            Number of entries in the primary dictionary
            </summary>
        </member>
        <member name="M:ff14bot.Helpers.LocalizedDictionary`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> structure for the <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
        </member>
        <member name="F:ff14bot.Helpers.MathHelper.Arc">
            <summary>
            Old default value that was passed to the IsFlanking and IsBehind functions
            </summary>
        </member>
        <member name="T:ff14bot.Helpers.MultiKeyDictionary`3">
            <summary>
            Multi-Key Dictionary Class
            </summary>    
            <typeparam name="K">Primary Key Type</typeparam>
            <typeparam name="L">Sub Key Type</typeparam>
            <typeparam name="V">Value Type</typeparam>
        </member>
        <member name="T:ff14bot.Helpers.Poi">
            <summary> Poi. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#cctor">
            <summary> Static constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
        </member>
        <member name="P:ff14bot.Helpers.Poi.Current">
            <summary> Gets or sets the current poi. </summary>
            <value> The current. </value>
        </member>
        <member name="P:ff14bot.Helpers.Poi.Unit">
            <summary> Gets or sets the entity. </summary>
            <value> The entity. </value>
        </member>
        <member name="P:ff14bot.Helpers.Poi.Fate">
            <summary> Gets or sets the entity. </summary>
            <value> The entity. </value>
        </member>
        <member name="P:ff14bot.Helpers.Poi.Type">
            <summary> Gets or sets the type. </summary>
            <value> The type. </value>
        </member>
        <member name="P:ff14bot.Helpers.Poi.Location">
            <summary> Gets or sets the location. </summary>
            <value> The location. </value>
        </member>
        <member name="P:ff14bot.Helpers.Poi.Name">
            <summary> Gets or sets the name. </summary>
            <value> The name. </value>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(ff14bot.Helpers.PoiType)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="type"> The type. </param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(ff14bot.Objects.GameObject,ff14bot.Helpers.PoiType)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="obj">  The object. </param>
            <param name="type"> The type. </param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(ff14bot.Managers.FateData,ff14bot.Helpers.PoiType)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="obj">  The object. </param>
            <param name="type"> The type. </param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(Clio.Utilities.Vector3,ff14bot.Helpers.PoiType)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="location"> The location. </param>
            <param name="type">     The type. </param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(Clio.Utilities.Vector3,ff14bot.Helpers.PoiType,System.UInt16)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="location"> The location. </param>
            <param name="type">     The type. </param>
            <param name="zoneId"> The zoneId</param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(ff14bot.Navigation.HotSpot,ff14bot.Helpers.PoiType)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="location"> The location. </param>
            <param name="type">     The type. </param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.#ctor(ff14bot.Navigation.HotSpot,ff14bot.Helpers.PoiType,System.UInt16)">
            <summary> Constructor. </summary>
            <remarks> Nesox, 2013-07-04. </remarks>
            <param name="location"> The location. </param>
            <param name="type">     The type. </param>
            <param name="zoneId">The zoneId</param>
        </member>
        <member name="M:ff14bot.Helpers.Poi.Clear(System.String)">
            <summary>
            Clears the current poi.
            </summary>
            <param name="reason">The reason.</param>
            <remarks>Created by Nesox 2012-02-05</remarks>
        </member>
        <member name="M:ff14bot.Helpers.Poi.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>Created by Nesox 2012-02-05</remarks>
        </member>
        <member name="T:ff14bot.Managers.AetherCurrentManager">
            <summary>
            Stores information about what aethercurrents have been completed
            </summary>
        </member>
        <member name="M:ff14bot.Managers.AetherCurrentManager.IsZoneComplete(System.UInt32)">
            <summary>
            Checks if all the aether currents for a zone is completed
            </summary>
            <param name="zoneid"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AetherCurrentManager.IsAetherCurrentCompleted(System.UInt32)">
            <summary>
            Checks if the aether current at the given index is completed, first 5 are the quest aether currents then the ones you need to find
            index starts at 0
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AetherCurrentManager.IsAetherCurrentCompleted(System.UInt32,System.UInt32)">
            <summary>
            Checks if the aether current at the given index is completed, first 5 are the quest aether currents then the ones you need to find
            index starts at 0
            </summary>
            <param name="zoneid"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AetherCurrentManager.RawValueForZone(System.UInt32)">
            <summary>
            Gets the raw value for a given zone
            used for debugging
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AetherCurrentManager.RawValue(System.UInt32)">
            <summary>
            Gets the raw value for a given offset
            used for debugging
            </summary>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AetherCurrentManager.CheckOffset(System.UInt32)">
            <summary>
            Returns completion for a given zoneid
            results are the same as in the game gui, read from left to right, quests first then interactions second
            </summary>
            <param name="zoneid"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.ActionResourceManager">
            <summary>
            Class handles fetching data used for the different special job gauges
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Astrologian.DivinationSeals">
            <summary>
            CostType - 33 - 37
            ClassJob - AST
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Bard.Repertoire">
            <summary>
            CostType - 32
            ClassJob - brd
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Bard.ActiveSong">
            <summary>
            Any of the possible bard songs
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.BlackMage.PolyglotStatus">
            <summary>
            CostType - 18
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.BlackMage.PolyglotCount">
            <summary>
            How many stacks of Polyglot
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.BlackMage.stacks">
            <summary>
            CostType - 50
            Related skills - 9637	Convert
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.DarkKnight.BlackBlood">
            <summary>
            CostType - 25
            ClassJob - DarkKnight
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.DarkKnight.DarkArts">
            <summary>
            True if dark arts is active
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.DarkKnight.DarksideRemaining">
            <summary>
            Time left on darkside
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Dragoon.DragonGaze">
            <summary>
            CostType - 48
            ClassJob - Drg
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Dragoon.Mode">
            <summary>
            0 = None, 1= Blood of the dragon, 2=
            </summary>
        </member>
        <member name="T:ff14bot.Managers.ActionResourceManager.Gunbreaker">
            <summary>
            Gunbreaker resource information
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Gunbreaker.Cartridge">
            <summary>
            How many cartridges currently available
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Gunbreaker.SecondaryComboStage">
            <summary>
            Returns 1 after using Gnashing fang, 2 after savage claw
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Machinist.Heat">
            <summary>
            How much heat the player has accumulated 
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Machinist.Battery">
            <summary>
            How much battery the player has accumulated 
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Machinist.OverheatRemaining">
            <summary>
            Time left on ovheat status
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Machinist.SummonRemaining">
            <summary>
            Time left on summon
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Monk.FithChakra">
            <summary>
            CostType - 28
            ClassJob - Mnk
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Monk.GreasedLightning">
            <summary>
            CostType - 29
            ClassJob - Mnk
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Ninja.NinkiGauge">
            <summary>
            CostType - 27
            ClassJob - Nin
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Ninja.HutonTimer">
            <summary>
            CostType - 27
            ClassJob - Nin
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.RedMage.Impactful">
            <summary>
            CostType - 43
            ClassJob - RedMage
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Paladin.Oath">
            <summary>
            CostType - 41
            ClassJob - PLD
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Samurai.Kenki">
            <summary>
            CostType - 39 / 45
            ClassJob - SAM
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Samurai.Meditation">
            <summary>
            ClassJob - SAM
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Samurai.Sen">
            <summary>
            CostType - 40
            ClassJob - SAM
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Arcanist.Aetherflow">
            <summary>
            CostType - 30
            ClassJob - smn
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Arcanist.AetherAttunement">
            <summary>
            CostType - 31
            ClassJob - smn
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Scholar.Aetherflow">
            <summary>
            CostType - 30
            ClassJob - smn
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Scholar.FaerieGauge">
            <summary>
            CostType - 46
            ClassJob - sch
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Summoner.DreadwyrmTrance">
            <summary>
            CostType - 47
            ClassJob - smn
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.Warrior.BeastGauge">
            <summary>
            CostType - 22
            ClassJob - War
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.WhiteMage.Lily">
            <summary>
            CostType - 48
            ClassJob - Whm
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionResourceManager.WhiteMage.BloodLily">
            <summary>
            CostType - 48
            ClassJob - Whm
            </summary>
        </member>
        <member name="T:ff14bot.Managers.CapabilityManager">
            <summary>
            <para>This manager allows multiple sources to disallow a CombatRoutine capability for specific time or until a condition evaluates </para>
            <para>to <c>false</c> and once no sources are disallowing a capability, that capability is then allowed</para>
            </summary>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Update(ff14bot.Managers.CapabilityManagerHandle,ff14bot.Managers.CapabilityFlags,System.Func{System.Boolean},System.String)">
            <summary>
            <para>Updates an entry (or adds a new one if entry is not present) to disallow</para>
            <para> <paramref name="capability"/> until <paramref name="condition"/> evaluates </para>
            <para>to <c>false</c>, at which  point the entry is removed and <paramref name="capability"/> </para>
            <para>is allowed if no other entries for <paramref name="capability"/> are maintained.</para>
            </summary>
            <param name="handle">The handle.</param>
            <param name="capability">The capability.</param>
            <param name="condition">The condition.</param>
            <param name="reason">The reason.</param>
            <returns>A handle that can be used to update the entry</returns>
            <exception cref="T:System.ArgumentNullException">condition</exception>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Update(ff14bot.Managers.CapabilityManagerHandle,ff14bot.Managers.CapabilityFlags,System.Int32,System.String)">
            <summary>
                <para>Updates an entry (or adds a new one if entry is not present) to disallow <paramref name="capability" /> for</para>
                <para><paramref name="timeSpanMs" /> duration in milliseconds. The entry is removed upon expiration and</para>
                <para><paramref name="capability" /> is allowed if no other entries for <paramref name="capability" /> are maintained.</para>
            </summary>
            <param name="handle">The handle.</param>
            <param name="capability">The capability.</param>
            <param name="timeSpanMs">The timeSpanMs.</param>
            <param name="reason">The reason.</param>
            <exception cref="T:System.OverflowException">
                <paramref name="timeSpanMs" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than
                <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="timeSpanMs" /> is
                <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="timeSpanMs" /> is
                <see cref="F:System.Double.NegativeInfinity" />.
            </exception>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Update(ff14bot.Managers.CapabilityManagerHandle,ff14bot.Managers.CapabilityFlags,System.TimeSpan,System.String)">
            <summary>
            <para>Updates an entry (or adds a new one if entry is not present) to disallow <paramref name="capability"/> for</para>
            <para><paramref name="timeSpan"/> duration. The entry is removed upon expiration </para>
            <para>and <paramref name="capability"/> is allowed if </para>
            <para>no other entries for <paramref name="capability"/> are maintained.</para>
            </summary>
            <param name="handle">The handle.</param>
            <param name="capability">The capability.</param>
            <param name="timeSpan">The timeSpan.</param>
            <param name="reason">The reason.</param>
            <exception cref="T:System.ArgumentNullException">The value of 'handle' cannot be null. </exception>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Clear(ff14bot.Managers.CapabilityFlags,System.String)">
            <summary>Clears all the entries that matches any of <paramref name="capabilities" />.</summary>
            <param name="capabilities">The capabilities.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Clear(ff14bot.Managers.CapabilityManagerHandle,ff14bot.Managers.CapabilityFlags,System.String)">
            <summary>
            <para>Clears all the entries that matches any of <paramref name="capabilities" /></para>
            <para>and are associated with <paramref name="handle" /> or all matching entries if <paramref name="handle" /> is null.</para>
            </summary>
            <param name="handle">The handle.</param>
            <param name="capabilities">The capabilities.</param>
            <param name="reason">The reason.</param>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.CreateNewHandle">
            <summary>Creates a new handle that can be used to add or update an entry</summary>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Add(ff14bot.Managers.CapabilityFlags,System.Func{System.Boolean},System.String)">
            <summary>
            <para>Adds a new entry that disallows <paramref name="capability"/> until</para>
            <para><paramref name="condition"/> evaluates to <c>false</c>, at which </para>
            <para>point the entry is removed and <paramref name="capability"/> is allowed if </para>
            <para>no other entries for <paramref name="capability"/> are maintained.</para>
            </summary>
            <param name="capability">The capability.</param>
            <param name="condition">The condition.</param>
            <param name="reason">The reason.</param>
            <returns>A handle that can be used to update the entry</returns>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Add(ff14bot.Managers.CapabilityFlags,System.Int32,System.String)">
            <summary>
                <para>Adds a new entry that disallows <paramref name="capability" /> for</para>
                <para><paramref name="timeSpanMs" /> duration in milliseconds, at which point the entry is removed and</para>
                <para><paramref name="capability" /> is allowed if no other entries for <paramref name="capability" /> are maintained.</para>
            </summary>
            <param name="capability">The capability.</param>
            <param name="timeSpanMs">The timeSpanMs.</param>
            <param name="reason">The reason.</param>
            <returns>A handle that can be used to update the entry</returns>
            <exception cref="T:System.OverflowException">
                <paramref name="timeSpanMs" /> is less than <see cref="F:System.TimeSpan.MinValue" /> or greater than
                <see cref="F:System.TimeSpan.MaxValue" />.-or-<paramref name="timeSpanMs" /> is
                <see cref="F:System.Double.PositiveInfinity" />.-or-<paramref name="timeSpanMs" /> is
                <see cref="F:System.Double.NegativeInfinity" />.
            </exception>
        </member>
        <member name="M:ff14bot.Managers.CapabilityManager.Add(ff14bot.Managers.CapabilityFlags,System.TimeSpan,System.String)">
            <summary>
            <para>Adds a new entry that disallows <paramref name="capability"/> for</para>
            <para><paramref name="timeSpan"/> duration, at which </para>
            <para>point the entry is removed and <paramref name="capability"/> is allowed if </para>
            <para>no other entries for <paramref name="capability"/> are maintained.</para>
            </summary>
            <param name="capability">The capability.</param>
            <param name="timeSpan">The timeSpan.</param>
            <param name="reason">The reason.</param>
            <returns>A handle that can be used to update the entry</returns>
        </member>
        <member name="T:ff14bot.Managers.CapabilityFlags">
            <summary>Combat Routine's capabilities.</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Movement">
            <summary>
            <para>Specifies whether Combat Routine can handle any movement that results in a change of the player's position,</para>
            <para>such as moving within range of a target or using a gap closer/escape ability.</para>
            <para>The CombatRoutine SHOULD NOT stop moving or perform any action that</para>
            <para> disrupts movement while player is moving when this flag is disallowed</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.MoveBehind">
            <summary>
            <para>Specifies whether Combat Routine can handle moving behind </para>
            <para>a target to use positional attacks or avoid getting parried.</para>
            <para>Only applicable for melee classes</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Facing">
            <summary>Specifies whether Combat Routine can handle facing a target</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.GapCloser">
            <summary>
            <para>Specifies whether Combat Routine can handle the usages of class specific gap </para>
            <para>closer/escape abilities that cause the player to change location.</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Aoe">
            <summary>Specifies whether Combat Routine can use Area of Effect abilities that do damage.</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Targeting">
            <summary>
            <para>Specifies whether Combat Routine can change the selected target.</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.PetSummoning">
            <summary>
            <para>Specifies whether Combat Routine can handle the summoning of pets.</para>
            <para>This is only applies to real pets that are controlable.</para>
            <para>The CombatRoutine does not need to dismiss any active pets while this flag is disallowed.</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.PetUse">
            <summary>
            <para>Specifies whether Combat Routine can use pets to help attack an enemy.</para>
            <para>If disallowed then pet should be placed on passive and remain at the owner's side or if pet cannot </para>
            <para>be placed on passive then it should be dismissed/recalled by the combat routine and not resummoned</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.SpecialAttacks">
            <summary>
            <para>Specifies whether Combat Routine can use special attacks.</para>
            <para>If disallowed then it is expected that the Combat Routine will not perform</para>
            <para>any offensive abilities other than auto-attack so a target is damaged in a slow but controlled fashion.</para>
            <para>Casting defensive buffs, debufs or heal would be allowed, anything that does not damage the target.</para>
            <para>This applies to all classes including ranged classes.</para>
            <para>An example where this might be disallowed is when attacking a quest objective mob that requires an item </para>
            <para>to be used on it when it's health percent drops below a threshold.</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Kiting">
            <summary>
            Specifies whether Combat Routine can handle kiting.
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.OffensiveDispel">
            <summary>
            Specifies whether Combat Routine can dispel an enrage or magic spell off an enemy
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.DefensiveDispel">
            <summary>
            <para>Specifies whether Combat Routine can dispel a curse, disease, magic or poison spell</para>
            <para>off a friendly unit including self</para>
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.MultiMobPull">
            <summary>Specifies whether Combat Routine can pull multiple mobs at a time</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Taunting">
            <summary>Specifies whether Combat Routine can use taunt type spells</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.Interrupting">
            <summary>Specifies whether Combat Routine can cast interrupt mob spell casts</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.OffensiveCooldowns">
            <summary>Specifies whether Combat Routine can use offensive cooldowns</summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityFlags.DefensiveCooldowns">
            <summary>Specifies whether Combat Routine can use defensive cooldowns</summary>
        </member>
        <member name="T:ff14bot.Managers.CapabilityState">
            <summary>
            Represents the state of capabilities, as requested by the user or bot.
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityState.Disallowed">
            <summary>
            The capability should never be used.
            </summary>
        </member>
        <member name="F:ff14bot.Managers.CapabilityState.DontCare">
            <summary>
            The capability can be used or not.
            </summary>
        </member>
        <member name="M:ff14bot.Managers.DirectorManager.LeveDirectorExistsForName(System.String)">
            <summary>
            Check if we have a type for the provided name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.DirectorManager.TryAddLeveDirector(System.String,System.Type)">
            <summary>
            Attempts to add the leve director type for the provided leve name
            </summary>
            <param name="name"></param>
            <param name="directorType">Must be a subclass of Director </param>
            <returns>False if a type already exists for the provided name</returns>
        </member>
        <member name="M:ff14bot.Managers.DirectorManager.DirectorExistsForId(System.UInt32)">
            <summary>
            Check if we have a type for the provided id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.DirectorManager.TryAddDirector(System.UInt32,System.Type)">
            <summary>
            Attempts to add the director type for the provided id
            </summary>
            <param name="id"></param>
            <param name="directorType">Must be a subclass of Director </param>
            <returns>False if a type already exists for the provided id</returns>
        </member>
        <member name="P:ff14bot.Managers.DirectorManager.Directors">
            <summary> Gets a list of entities. </summary>
            <value> A List of entities. </value>
        </member>
        <member name="M:ff14bot.Managers.HotbarManager.FindHotbarWithAction(System.UInt32)">
            <summary>
            Returns the hotbarbutton and it's index
            Only returns buttons that have keybinds 
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.HotbarManager.FindHotbarWithPvPCombo(System.UInt32)">
            <summary>
            Returns the hotbarbutton and it's index
            Only returns buttons that have keybinds 
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.BookData">
            <summary>
            Stores information about the active zodiac book
            Information is not refreshed so don't store this object
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BookData.AtmaWeaponType">
            <summary>
            Gladiator_Sword = 1,
            Monk = 2,
            Warrior = 3,
            Dragoon = 4,
            Bard = 5,
            WhiteMage = 6,
            BlackMage = 7,
            Summoner = 8,
            Scholar = 9,
            Gladiator_Shield = 10,
            Ninja  = 11
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BookData.BookId">
            <summary>
            Gets the active bookid
            </summary>
        </member>
        <member name="T:ff14bot.Managers.ZodiacManager">
            <summary>
            Class that handles information regarding the zodiac weapons
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ZodiacManager.CurrentBook">
            <summary>
            Gets information about the active book
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.Raycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3,ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,ff14bot.Managers.RaycastResult@)">
            <summary>
            Performs a raycast, start and end points far from the player may yield inaccurate results due to the game not loading assets
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="flag1"></param>
            <param name="flag2"></param>
            <param name="result"></param>
            <returns>true if there was a hit</returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.MassTraceLine(ff14bot.Pathing.WorldLine[],ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,System.Boolean[]@,Clio.Utilities.Vector3[]@)">
            <summary>Performs a mass traceline.</summary>
            <param name="lines">     The lines.</param>
            <param name="flag">      The flag.</param>
            <param name="hitResults">[out] The hit results.</param>
            <param name="hitPoints"> [out] The hit points.</param>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.Raycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3,ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,ff14bot.Managers.RaycastResult@)">
            <summary>
            Performs a raycast, start and end points far from the player may yield inaccurate results due to the game not loading assets
            Performs additional raycasts if a hit is found with the <paramref name="ignoreFlags"/> check that the result does not have the  
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="flag1"></param>
            <param name="flag2"></param>
            <param name="ignoreFlags">if the triangle has any of these flags false will be returned</param>
            <param name="result"></param>
            <returns>true if there was a hit</returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.GetTriangles(Clio.Utilities.Vector3,Clio.Utilities.Vector3,ff14bot.Enums.RaycastFlags,System.UInt32)">
            <summary>
            Gets triangles from the world inside of the bounds. 
            Returns all Triangles between Min and Max that have at least 1 vertex inside the bounds.
            </summary>
            <param name="boundsMin"></param>
            <param name="boundsMax"></param>
            <param name="flags">Raycast flags to hit</param>
            <param name="AdvancedFlags">pass 1 unless you know what you are doing!</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.BuildObjs">
            <summary>
            creates our transform matrix for Cylinders
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameWorld.FirstObject">
            <summary>
            this is the left most object in the tree
            </summary>
        </member>
        <member name="F:ff14bot.Managers.GameWorld.VtableLookup">
            <summary>
            This is a holder class for each vtable type.
            Because there isn't a good way to pattern the vtables to identify object types
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.BuildPcb(System.IntPtr,ff14bot.Managers.Matrix4x3,Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.UInt32)">
            <summary>
            builds pcb data and checks flags
            </summary>
            <param name="dataOffset"></param>
            <param name="matrix"></param>
            <param name="boundsMin"></param>
            <param name="boundsMax"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.BoundingBox(ff14bot.Managers.Matrix4x3,Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            builds triangles for a bounding box.
            </summary>
            <param name="m"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.BoundingSphere(ff14bot.Managers.Matrix4x3,Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            builds a sphere at pos with radius
            </summary>
            <param name="pos"></param>
            <param name="radius"></param>
            <param name="Max"></param>
            <param name="Min"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.pointVsAABB(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            point vs axis aligned bounding box
            </summary>
            <param name="point"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GameWorld.AABBvsAABB(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            axis aligned bounding box vs axis aligned bounding box
            </summary>
            <param name="min"></param>
            <param name="max"></param>
            <param name="minb"></param>
            <param name="maxb"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.Matrix4x3.Transform(Clio.Utilities.Vector3)">
            <summary>
            transforms a vector based on the matrix
            </summary>
            <param name="pos"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.ObjectHeader">
            <summary>
            this is here to turn 4 reads into 1.
            NOTE: not all of these are used in every type.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ff14bot.Managers.ObjectHeader.Type2Matrix" -->
        <member name="T:ff14bot.Managers.ActionManager">
            <summary>
            Handles casting actions and checking if they are ready
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCastLocation(System.String,Clio.Utilities.Vector3)">
            <summary>
            Returns true if the following:
                If we are in Line-of-sight
                If there is no error code on the spellcheck
                If there is no spell queued and the spell is not a ground targeting spell and the spell has less then 500ms on its cd
            </summary>
            <param name="spellName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCastLocation(System.UInt32,Clio.Utilities.Vector3)">
            <summary>
            Returns true if the following:
                If we are in Line-of-sight
                If there is no error code on the spellcheck
                If there is no spell queued and the spell is not a ground targeting spell and the spell has less then 500ms on its cd
            </summary>
            <param name="spellName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCastLocation(ff14bot.Objects.SpellData,Clio.Utilities.Vector3)">
            <summary>
            Returns true if the following:
                If we are in Line-of-sight
                If there is no error code on the spellcheck
                If there is no spell queued and the spell is not a ground targeting spell and the spell has less then 500ms on its cd
            </summary>
            <param name="cache"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCast(System.String,ff14bot.Objects.GameObject)">
            <summary>
            Returns true if the following:
                If we are in Line-of-sight
                If there is no error code on the spellcheck
            </summary>
            <param name="spellName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCast(System.UInt32,ff14bot.Objects.GameObject)">
            <summary>
            Returns true if the following:
                If we are in Line-of-sight
                If there is no error code on the spellcheck
            </summary>
            <param name="spellName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCast(ff14bot.Objects.SpellData,ff14bot.Objects.GameObject)">
            <summary>
            Returns true if the following:
                If we are in Line-of-sight
                If there is no error code on the spellcheck
            </summary>
            <param name="cache"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.CanCastOrQueue(ff14bot.Objects.SpellData,ff14bot.Objects.GameObject)">
            <summary>
            Checks if a action is can be cast immeditatly or placed in the games queue for the next action to be executed
            </summary>
            <param name="spellData"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:ff14bot.Managers.ActionManager.MountId" -->
        <member name="P:ff14bot.Managers.ActionManager.CanMount">
            <summary>
            Returns the errorcode, 0 is no error and we can mount
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.Mount">
            <summary>
            Summons the mount set in the players settings
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.Mount(System.UInt32)">
            <summary>
            Summons the mount with the given id
            </summary>
            <param name="id"></param>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.AvailableMounts">
            <summary>
            Array of all the currently available mounts
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.ToggleRepairWindow">
            <summary>
            Toggles the repair window
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.HasSpell(System.String)">
            <summary>
            Returns true if the spell name is known
            </summary>
            <param name="spellName"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.HasSpell(System.UInt32)">
            <summary>
            Returns true if spell id is known
            </summary>
            <param name="spellId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.StopCasting">
            <summary>
            Stops casting immediately
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.Dismount">
            <summary>
            Dismount from current mount
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoAction(System.UInt32,ff14bot.Objects.GameObject)">
            <summary>
            Casts a action at the provided game object, if targetObject is null then the player is the target 
            </summary>
            <param name="actionId">Spell action id to cast</param>
            <param name="targetObject">object to cast the spell on</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoAction(System.String,ff14bot.Objects.GameObject)">
            <summary>
            Casts a action at the provided game object, if targetObject is null then the player is the target 
            </summary>
            <param name="actionName">Spell action name to cast, must be inside CurrentActions</param>
            <param name="targetObject">object to cast the spell on</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoAction(ff14bot.Objects.SpellData,ff14bot.Objects.GameObject)">
            <summary>
            Casts a action at the provided game object, if targetObject is null then the player is the target 
            </summary>
            <param name="action">SpellData for action to cast</param>
            <param name="targetObject">object to cast the spell on</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoAction(ff14bot.Enums.ActionType,System.UInt32,ff14bot.Objects.GameObject)">
            <summary>
            Casts a action at the provided game object, if targetObject is null then the player is the target 
            </summary>
            <param name="actionType">action type</param>
            <param name="actionId">Spell action id to cast</param>
            <param name="targetObject">object to cast the spell on</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoActionLocation(ff14bot.Enums.ActionType,System.UInt32,Clio.Utilities.Vector3)">
            <summary>
            Casts a ground targeted action at the provided location
            </summary>
            <param name="actionType">action type</param>
            <param name="actionId">Spell action id to cast</param>
            <param name="targetLocation">location to cast the spell</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoActionLocation(System.UInt32,Clio.Utilities.Vector3)">
            <summary>
            Casts a ground targeted action at the provided location
            </summary>
            <param name="actionId">Spell action id to cast</param>
            <param name="targetLocation">location to cast the spell</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoActionLocation(System.String,Clio.Utilities.Vector3)">
            <summary>
            Casts a ground targeted action at the provided location
            </summary>
            <param name="actionName">Spell action name to cast</param>
            <param name="targetLocation">location to cast the spell</param>
            <returns>true if was able to cast the spell at the given location</returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.GetPvPComboCurrentActionId(System.UInt32)">
            <summary>
            Gets the current pvp combo action id
            
            https://i.vgy.me/RBOiau.png
            
            List of pvp combo ids
            </summary>
            <param name="comboId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.GetPvPComboCurrentAction(System.UInt32)">
            <summary>
            Gets the current pvp combo action spelldata
            
            https://i.vgy.me/RBOiau.png
            List of pvp combo ids
            </summary>
            <param name="comboId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoPvPCombo(System.UInt32,ff14bot.Objects.GameObject)">
             <summary>
             Executes a pvp combo
            
              https://i.vgy.me/RBOiau.png
              List of pvp combo ids
             </summary>
             <param name="comboId"></param>
             <param name="targetObject"></param>
             <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InteractWith(ff14bot.Objects.GameObject)">
            <summary>
            Simulates a right click on a object
            </summary>
            <param name="obj">object to right click</param>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.ComboTimeLeft">
            <summary>
            Returns seconds left before current combo chain resets
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.LastSpellId">
            <summary>
            Last spell id that is part of a combo
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.LastSpell">
            <summary>
            Gets the last casted spell that was part of a combo chain
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.IsSprintReady">
            <summary>
            Returns true if Sprint() will work.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.IsReturnReady">
            <summary>
            Returns true if Return is ready
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.Sprint">
            <summary>
            Sprints
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.ActionReady(ff14bot.Enums.ActionType,System.UInt32)">
            <summary>
            Checks if a action is 'Ready' to be used
            </summary>
            <param name="actionType"></param>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InSpellInRangeLOS(System.UInt32,ff14bot.Objects.GameObject)">
            <summary>
            Check if current gameobject is within range and los
            </summary>
            <param name="spellId"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InSpellInRangeLOS(System.String,ff14bot.Objects.GameObject)">
            <summary>
            Check if current gameobject is within range and los
            </summary>
            <param name="spellname"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InSpellInRangeLOS(ff14bot.Objects.SpellData,ff14bot.Objects.GameObject)">
            <summary>
            Check if current gameobject is within range and los
            </summary>
            <param name="spelldata"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InSpellInRangeLOS(System.UInt32,Clio.Utilities.Vector3)">
            <summary>
            Check if current gameobject is within range and los
            </summary>
            <param name="spellId"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InSpellInRangeLOS(System.String,Clio.Utilities.Vector3)">
            <summary>
            Check if location is within range and los
            </summary>
            <param name="spellname"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.InSpellInRangeLOS(ff14bot.Objects.SpellData,Clio.Utilities.Vector3)">
            <summary>
            Check if location is within range and los
            </summary>
            <param name="spelldata"></param>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.DoMusic(System.UInt32)">
            <summary>
            Performs a musical note, check the Perform quest behavior for documentation
            </summary>
            <param name="actionId"></param>
            <returns></returns>
        </member>
        <member name="F:ff14bot.Managers.ActionManager.LockTimer">
            <summary>
            How long the results in the currentaction list are cached for
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ActionManager.ClearActionCache">
            <summary>
            Clears the actioncache
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ActionManager.CurrentActions">
            <summary>
            Returns list of current known skills
            Value is cached for 1 minute
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BotManager.Bots">
            <summary>
            List of all loaded botbases
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BotManager.Current">
            <summary>
            Current BotBase
            </summary>
        </member>
        <member name="M:ff14bot.Managers.BotManager.Add(System.String,ff14bot.AClasses.BotBase)">
            <summary>Adds a bot to the bot collection.</summary>
            <param name="name">               name of the bot.</param>
            <param name="derievesFromBotBase">object that derieves from BotBase.</param>
        </member>
        <member name="M:ff14bot.Managers.BotManager.Add(ff14bot.AClasses.BotBase)">
            <summary>Adds a bot to the bot collection.</summary>
            <param name="derievesFromBotBase">object that derieves from BotBase.</param>
        </member>
        <member name="M:ff14bot.Managers.BotManager.Remove(System.String)">
            <summary>Removes a bot from the collection.</summary>
            <param name="name">name of the bot.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:ff14bot.Managers.RecipeData">
            <summary>
            Recipe information
            </summary>
        </member>
        <member name="F:ff14bot.Managers.RecipeData.Ingredients">
            <summary>
            All the items required to craft the item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RecipeData.CurrentLocaleName">
            <summary>
            Item name in the games current locale
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RecipeData.EnglishName">
            <summary>
            Item name in english
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RecipeData.HasCraftedRecipe">
            <summary>
            Checks if this recipe has been crafted before, used for quick synthesis
            </summary>
        </member>
        <member name="M:ff14bot.Managers.RecipeData.ToString">
            <summary>
            Dumps all the information into a string format
            </summary>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.RecipeIngredientInfo">
            <summary>
            Ingredient information
            </summary>
        </member>
        <member name="T:ff14bot.Managers.CraftingManager">
            <summary>
            Crafting related information
            </summary>
        </member>
        <member name="M:ff14bot.Managers.CraftingManager.SetRecipe(System.UInt32)">
            <summary>
            Attempts to select the provided recipe
            </summary>
            <param name="recipeId"></param>
            <returns>true if we know the recipe and could set it, false otherwise</returns>
        </member>
        <member name="M:ff14bot.Managers.CraftingManager.SetQuality(System.Int32[])">
            <summary>
            List of how many high quality materials to use for each ingredient in the recipe. 
            Example HQMats="0,3,2" This will use all normal items for the first ingredient, 
            3 high quality items for the second, and 2 high quality items for the third. Default: all zero. 
            Special numbers: If you set an index to -1 then it will prefer high quality mats, and then use normal mats once you run out of high quality. 
            A value of -2 will use normal quality until you run out then use high quality.
            </summary>
            <param name="HQMats"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.IconId">
            <summary>
            Gets the IconId for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.Progress">
            <summary>
            Get the Progress for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.ProgressRequired">
            <summary>
            Get the ProgressRequired for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.Durability">
            <summary>
            Get the Durability for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.DurabilityCap">
            <summary>
            Get the DurabilityCap for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.HQPercent">
            <summary>
            Get the HQPercent for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.Step">
            <summary>
            Get the Step for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.ItemId">
            <summary>
            Get the ItemId for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.QualityCap">
            <summary>
            Get the QualityCap for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.Quality">
            <summary>
            Get the Quality for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.Condition">
            <summary>
            Gets the Condition for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.LastActionId">
            <summary>
            Gets the last Crafting Action id executed
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.IsCrafting">
            <summary>
            Checks if the player is currently crafting
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.AnimationLocked">
            <summary>
            Check if the player is currently stuck in an animation lock
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.CanCraft">
            <summary>
            Returns true if we can craft the currently selected recipe
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.CurrentRecipe">
            <summary>
            Gets the currently selected recipe
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.CurrentlyListedRecipes">
            <summary>
            Gets all the currently displayed recipes
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CraftingManager.CurrentRecipeId">
            <summary>
            Gets the currently selected recipe id
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Item.Attributes">
            <summary>
            Dictionary of the stats and their values on the item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Item.IsWeapon">
            <summary>
            Returns true if item can go in the mainhand or offhand
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Item.IsValidForCurrentClass">
            <summary>
            Returns true if the items affinity allows the current class/job
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Item.IsArmor">
            <summary>
            Returns true if item is armor
            </summary>
        </member>
        <member name="T:ff14bot.Managers.DataManager">
            <summary>
            Class handles getting spell,item, and aura data based on id or name
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.SpellCache">
            <summary>
            Dictionary containing spellobjects stored by id and english name and the current localized name
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.SpellsWithJobsCache">
            <summary>
            Dictionary containing spellobjects that have a job type associated with them
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.PetSpellCache">
            <summary>
            All the spelldata for pets
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.BattleNPCCache">
            <summary>
            Dictionary containing BattleNPCs stored by id
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.EventNPCCache">
            <summary>
            Dictionary containing EventNPCs stored by id
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.GatheringCache">
            <summary>
            Dictionary containing GatheringResult stored by GatheringType
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.ItemCache">
            <summary>
            Dictionary containing itemobjects stored by id and english name and current language.
            </summary>
        </member>
        <member name="F:ff14bot.Managers.DataManager.AuraCache">
            <summary>
            Dictionary containing auras in their english name sorted by id.
            </summary>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetBattleNPCData(System.UInt32)">
            <summary>
            Gets battlenpc information based on id.
            </summary>
            <param name="spellId"></param>
            <returns>null if battlenpc could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetEventNPCData(System.UInt32)">
            <summary>
            Gets battlenpc information based on id.
            </summary>
            <param name="spellId"></param>
            <returns>null if battlenpc could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetSpellData(System.UInt32)">
            <summary>
            Get spell object based on id
            </summary>
            <param name="spellId"></param>
            <returns>null if spell could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetSpellData(System.String)">
            <summary>
            Get spell object based on name
            </summary>
            <param name="spellname"></param>
            <returns>null if spell could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetPetSpellData(System.String)">
            <summary>
            Get pet spell object based on name
            </summary>
            <param name="spellname"></param>
            <returns>null if spell could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetAuraNameById(System.UInt32)">
            <summary>
            Gets a auras english name by id
            </summary>
            <param name="spellId"></param>
            <returns>null if could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetItem(System.UInt32,System.Boolean)">
            <summary>
            Get item object based on id
            </summary>
            <param name="itemId"></param>
            <param name="highQuality">True if the item is high quality</param>
            <returns>null if could not be found</returns>
        </member>
        <member name="M:ff14bot.Managers.DataManager.GetItem(System.String)">
            <summary>
            Get item object based on name
            </summary>
            <param name="itemName"></param>
            <returns>null if could not be found</returns>
        </member>
        <member name="T:ff14bot.Managers.DutyManager">
            <summary>
            DutyManager handles interacting with windows and data for duty system
            </summary>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.QueueState">
            <summary>
            Gets the state of the queue
            </summary>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.InQueue">
            <summary>
            Checks if the player is currently in queue
            </summary>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.CanLeaveActiveDuty">
            <summary>
            Checks if the player can leave the current duty
            </summary>
        </member>
        <member name="M:ff14bot.Managers.DutyManager.LeaveActiveDuty">
            <summary>
            Attempts to leave the active duty
            </summary>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.DutyAction1">
            <summary>
            Gets the spelldata for the spell in "Duty Action I"
            </summary>
            <returns>Null if there is no spell</returns>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.DutyAction2">
            <summary>
            Gets the spelldata for the spell in "Duty Action II"
            </summary>
            <returns>Null if there is no spell</returns>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.AvailableContent">
            <summary>
            Returns a dictionary of all the currently queueable instances in the duty finder
            </summary>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.DutyReady">
            <summary>
            Check if ContentsFinderConfirm window is open
            </summary>
        </member>
        <member name="M:ff14bot.Managers.DutyManager.Commence">
            <summary>
            Selects "Commence" on the ContentsFinderConfirm window
            </summary>
        </member>
        <member name="M:ff14bot.Managers.DutyManager.Withdraw">
            <summary>
            Selects "Withdraw" on the ContentsFinderConfirm window
            </summary>
        </member>
        <member name="P:ff14bot.Managers.DutyManager.InInstance">
            <summary>
            Checks if the player is currently in a duty
            </summary>
        </member>
        <member name="M:ff14bot.Managers.DutyManager.Queue(ff14bot.Managers.InstanceContentResult[])">
            <summary>
            Attempts to queue via the duty finder
            </summary>
            <param name="instances">What instances should we queue for</param>
            <exception cref="T:System.ArgumentException">Will throw argument exceptions if too many instances are provided, instances that cannot be queued for via the duty finder, or if multiple instances that cannot be queued with other instances are provided</exception>
            <returns>True if we were able to queue successfully, false otherwise</returns>
        </member>
        <member name="F:ff14bot.Managers.NativeVector.First">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVector.Last">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVector.End">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVector.Allocator">
            <summary></summary>
        </member>
        <member name="M:ff14bot.Managers.NativeVector.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV2`1.First">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV2`1.Last">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV2`1.End">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV2`1.Allocator">
            <summary></summary>
        </member>
        <member name="M:ff14bot.Managers.NativeVectorV2`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:ff14bot.Managers.NativeVectorV3`1">
            <summary>
            No allocator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV3`1.First">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV3`1.Last">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV3`1.End">
            <summary></summary>
        </member>
        <member name="M:ff14bot.Managers.NativeVectorV3`1.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:ff14bot.Managers.NativeVectorV3">
            <summary>
            No allocator
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV3.First">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV3.Last">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.NativeVectorV3.End">
            <summary></summary>
        </member>
        <member name="M:ff14bot.Managers.NativeVectorV3.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="P:ff14bot.Managers.FateManager.AllFates">
            <summary> Gets a list of fates. </summary>
            <value> A List of fates. </value>
        </member>
        <member name="M:ff14bot.Managers.FateManager.Update">
            <summary> Updates the <see cref="T:ff14bot.Managers.FateManager"/>'s object storage lists. </summary>
        </member>
        <member name="P:ff14bot.Managers.FateManager.GetRawFates">
            <summary>
            Call this if you are operating in another thread.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ChatLogEntry.SenderDisplayName">
            <summary>
            What is displayed on the chat window
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ChatLogEntry.SenderReplyName">
            <summary>
            Name to use if sending a reply.
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ChatLogEntry.Respond(System.String)">
            <summary>
            Respond to incoming message
            FreeCompany,Say,Shout,Yell,and LinkShells all respond on that channel
            Tells and all GM Messages respond in private
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ff14bot.Managers.GamelogManager.Updatedelta">
            <summary>
            Run this when the start button is pressed so that we disregard all old messages
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GamelogManager.CurrentBuffer">
            <summary>
            All the current lines in the log buffer
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameObjectManager.NumberOfAttackers">
            <summary>
            Current number of units on the attacker.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameObjectManager.GameObjects">
            <summary> Gets a list of entities. </summary>
            <value> A List of entities. </value>
        </member>
        <member name="F:ff14bot.Managers.GameObjectManager.Attackers">
            <summary>
            List of characters currently on the threat list
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GameObjectManager.Clear">
            <summary> Clears the entity manager of any cached values and forces a refresh on next Update() call </summary>
        </member>
        <member name="M:ff14bot.Managers.GameObjectManager.Update">
            <summary> Updates the <see cref="!:EntityManager"/>'s object storage lists. </summary>
        </member>
        <member name="M:ff14bot.Managers.GameObjectManager.GetObjectsOfType``1(System.Boolean,System.Boolean)">
            <summary>
            Gets object of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="allowInheritance">Indicates whether to also get objects that derives from the specified type (ie. WoWPlayer derives from WoWUnit, so specifying WoWUnit and true would also return all players).</param>
            <param name="includeMeIfFound">Indicates whether to include the local player.</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GameObjectManager.GetObjectById``1(System.UInt32,System.Boolean)">
            <summary>
            Gets a entity by it's ref.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ref">The ref.</param>
            <param name="allowInheritance">if set to <c>true</c> [allow inheritance].</param>
            <returns></returns>
            <remarks>
            Created 2012-02-27
            </remarks>
        </member>
        <member name="M:ff14bot.Managers.FastObjectFactory.CreateObjectFactory(System.Type)">
            <summary>
            Create a new instance of the specified type
            </summary>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.GameSettingsManager">
            <summary>
            Class that handles getting and setting of in-game settings.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameSettingsManager.JoinInProgress">
            <summary>
            Gets and sets the status of the "Join Party in Progress" setting in Duty Finder->Settings cogwheel
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameSettingsManager.Freelancer">
            <summary>
            Gets and sets the status of the "Frontline Freelancer" setting in Duty Finder->Settings cogwheel
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameSettingsManager.JoinWithMinIlvl">
            <summary>
            Gets and sets the status of the "Minimum IL" setting in Duty Finder->Settings cogwheel
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameSettingsManager.JoinWithUndersizedParty">
            <summary>
            Gets and sets the status of the "Undersized Party" setting in Duty Finder->Settings cogwheel
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameSettingsManager.FaceTargetOnAction">
            <summary>
            Gets and sets the status of the "Automatically face target when using action." setting in Character Config->Target->Target Settings
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GameSettingsManager.FlightMode">
            <summary>
            Gets and sets the status of the "Flying Mount Takeoff" setting in Character Config->Control
            True = Manual Mode False = Auto
            </summary>
        </member>
        <member name="T:ff14bot.Managers.GameStatsManager">
            <summary>A game stats.</summary>
        </member>
        <member name="T:ff14bot.Managers.GameStatsManager.InfoPanelUpdatedDelegate">
            <summary>Information panel updated delegate.</summary>
        </member>
        <member name="E:ff14bot.Managers.GameStatsManager.OnInfoPanelUpdated">
            <summary>Event queue for all listeners interested in OnInfoPanelUpdated events.</summary>
        </member>
        <member name="P:ff14bot.Managers.GameStatsManager.Deaths">
            <summary>Gets the deaths.</summary>
            <value>The deaths.</value>
        </member>
        <member name="P:ff14bot.Managers.GameStatsManager.XPPerHour">
            <summary>Gets the XP per hour.</summary>
            <value>The XP per hour.</value>
        </member>
        <member name="P:ff14bot.Managers.GameStatsManager.DeathsPerHour">
            <summary>Gets the deaths per hour.</summary>
            <value>The deaths per hour.</value>
        </member>
        <member name="P:ff14bot.Managers.GameStatsManager.TimeToLevel">
            <summary>Gets the time to level.</summary>
            <value>The time to level.</value>
        </member>
        <member name="P:ff14bot.Managers.GameStatsManager.TicksPerSecond">
            <summary>Gets the ticks per second.</summary>
            <value>The ticks per second.</value>
        </member>
        <member name="P:ff14bot.Managers.GameStatsManager.IsMeasuring">
            <summary>Gets a value indicating whether this object is measuring.</summary>
            <value>true if this object is measuring, false if not.</value>
        </member>
        <member name="M:ff14bot.Managers.GameStatsManager.Reset">
            <summary>Resets this object.</summary>
        </member>
        <member name="M:ff14bot.Managers.GameStatsManager.StartMeasuring">
            <summary>Starts a measuring.</summary>
        </member>
        <member name="M:ff14bot.Managers.GameStatsManager.StopMeasuring">
            <summary>Stops a measuring.</summary>
        </member>
        <member name="M:ff14bot.Managers.GameStatsManager.Died">
            <summary>Increase death count</summary>
        </member>
        <member name="T:ff14bot.Managers.GardenManager">
            <summary>
            Handles interacting with private gardens
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GardenManager.Plants">
            <summary>
            Gets all the plants visible to the objectmanager
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GardenManager.FlowerPots">
            <summary>
            Gets all the flower pots visible to the objectmanager
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GardenManager.ReadyToFertilize">
            <summary>
            Returns true if we have an active plant and the fertilize window is open
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GardenManager.Fertilize(System.Int32)">
            <summary>
            Attempts to fertilize the active plant with the provided fertilizer
            </summary>
            <param name="itemId">Defaults to fishmeal</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GardenManager.GetCrop(ff14bot.Objects.GameObject)">
            <summary>
            Gets the item that the plant will yield
            </summary>
            <param name="plant"></param>
            <returns>Returns an Item if the plant will yield something, null otherwise</returns>
        </member>
        <member name="T:ff14bot.Managers.GatheringManager">
            <summary>
            Manager that handles interacting with the remote gathering system
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GatheringManager.ShouldPause(ff14bot.Objects.SpellData)">
             <summary>
            Returns true if we cannot cast a gathering spell because we are mid swing or just after opening the window
             </summary>
             <param name="spell"></param>
             <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.GatheringCombo">
            <summary>
            Gets the number of regular swings in a row
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.HqGatheringCombo">
            <summary>
            Gets the number of hq swings in a row
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.MaxSwings">
            <summary>
            Gets the max swings for the current node
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.SwingsRemaining">
            <summary>
            Gets the remaining swings for the current node
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.WindowOpen">
            <summary>
            Checks if the gathering window is open
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.QuickGathering">
            <summary>
            Gets and sets the status of QuickGathering
            Returns false if the window is not open
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GatheringManager.GetGatheringItemByIndex(System.UInt32)">
            <summary>
            Gets the item for the given index
            </summary>
            <param name="index"></param>
            <returns>null if window is open, otherwise item for the index</returns>
        </member>
        <member name="P:ff14bot.Managers.GatheringManager.GatheringWindowItems">
            <summary>
            Gets the items in the gathering window
            </summary>
        </member>
        <member name="T:ff14bot.Managers.GatheringItem">
            <summary>
            Class that represents a remote row in the gathering window
            </summary>
        </member>
        <member name="F:ff14bot.Managers.GatheringItem.SlotIndex">
            <summary>
            Slot index from zero
            </summary>
        </member>
        <member name="M:ff14bot.Managers.GatheringItem.GatherItem">
            <summary>
            Attempts to gather the item
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.GatheringItem.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Stars">
            <summary>
            How many stars the item has
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Level">
            <summary>
            Level of the item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Chance">
            <summary>
            Chance to gather the item
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.HqChance">
            <summary>
            Chance the item will be gathered as high quality
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Amount">
            <summary>
            How many of the item you will get per gather
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.IsUnknown">
            <summary>
            Check if the ItemId for the slot is hidden
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Unk1">
            <summary>
            Returns the raw value used by CanGather
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.CanGather">
            <summary>
            Checks if the slot is gatherable
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.IsFilled">
            <summary>
            If there is an item in the given slot
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Flags">
            <summary>
            GatheringFlags for the slot
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.FortuneModifier">
            <summary>
            
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.Unk2">
            <summary>
            
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.ItemData">
            <summary>
            The item for the slot
            </summary>
        </member>
        <member name="P:ff14bot.Managers.GatheringItem.ItemId">
            <summary>
            ItemId for the slot
            </summary>
        </member>
        <member name="T:ff14bot.Managers.BagSlot">
            <summary>
            Class represents an grid slot within a bag
            Using this class outside a framelock is not supported as the values are not cached.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BagSlot.RawItemId">
            <summary>
            This returns the raw unmodified id of the item in the slot.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BagSlot.TrueItemId">
            <summary>
            This returns the ID of the item in the slot, modified if it is a HQ item or collectable
            </summary>
        </member>
        <member name="M:ff14bot.Managers.BagSlot.CanUse(ff14bot.Objects.GameObject)">
            <summary>
            Checks if we can use the provided item.
            </summary>
            <param name="target">Gameobject to check. If null then we follow the games default item logic.</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.BagSlot.UseItem(ff14bot.Objects.GameObject)">
            <summary>
            Attempts to use the item
            </summary>
            <param name="target">Gameobject to use item on. If null then we follow the games default item logic.</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.BagSlot.UseItem(Clio.Utilities.Vector3)">
            <summary>
            Attempts to use the item
            </summary>
            <param name="target">location to use item on.</param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.BagSlot.IsReducable">
            <summary>
            This returns true if the item can be reduced, but does not check if the player has the correct skills, use 'CanReduce' for that
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BagSlot.IsDesynthesizable">
            <summary>
            This returns true if the item can be desynthesized, but does not check if the player has the correct skill level
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BagSlot.CanReduce">
            <summary>
            Returns true if the item is reduaceable and the player has the correct skill level
            </summary>
        </member>
        <member name="P:ff14bot.Managers.BagSlot.CanDesynthesize">
            <summary>
            Returns true if the item is desynthesizable and the player has the correct skill level
            This does not check if the item has a greater than 0 percent chance to be desynthesized
            </summary>
        </member>
        <member name="M:ff14bot.Managers.BagSlot.Move(ff14bot.Managers.BagSlot)">
            <summary>
            Attempts to move the contents of the current bagslot to the destination
            </summary>
            <param name="destination">Where to move</param>
            <returns>True if succeded, false otherwise</returns>
        </member>
        <member name="T:ff14bot.Managers.Bag">
            <summary>
            This class holds a grid of slots
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Bag.Item(System.Int32)">
            <summary>
            Returns the bagslot at the given index
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Bag.Item(ff14bot.Enums.EquipmentSlot)">
            <summary>
            Returns the bagslot at the given index
            </summary>
        </member>
        <member name="P:ff14bot.Managers.Bag.FilledSlots">
            <summary>
            Returns all the filled slots within the bag
            </summary>
        </member>
        <member name="M:ff14bot.Managers.Bag.GetEnumerator">
            <summary>
            Returns all the slots within the bag
            </summary>
        </member>
        <member name="P:ff14bot.Managers.InventoryManager.FreeSlots">
            <summary>
            Returns the number of free slots in the main inventory
            </summary>
        </member>
        <member name="P:ff14bot.Managers.InventoryManager.EquippedItems">
            <summary>
            Returns all the slots for Equipment
            </summary>
        </member>
        <member name="P:ff14bot.Managers.InventoryManager.FilledSlots">
            <summary>
            Returns all the items in the main inventory and key items
            </summary>
        </member>
        <member name="P:ff14bot.Managers.InventoryManager.FilledArmorySlots">
            <summary>
            Returns all currently equipped items and filled item slots in the armory
            </summary>
        </member>
        <member name="P:ff14bot.Managers.InventoryManager.FilledInventoryAndArmory">
            <summary>
            Returns all the items in inventory, key items, equipped items, and armory.
            </summary>
        </member>
        <member name="F:ff14bot.Managers.LeveManager.NativeVector_NV2.First">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.LeveManager.NativeVector_NV2.Last">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.LeveManager.NativeVector_NV2.End">
            <summary></summary>
        </member>
        <member name="F:ff14bot.Managers.LeveManager.NativeVector_NV2.Allocator">
            <summary></summary>
        </member>
        <member name="M:ff14bot.Managers.LeveManager.NativeVector_NV2.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a fully qualified type name.
            </returns>
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CallInfo.base">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CallInfo.func">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CallInfo.top">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CallInfo.savedpc">
            Instruction*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CallInfo.nresults">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CallInfo.tailcalls">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.isC">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.nupvalues">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.gclist">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.env">
            Table*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.f">
            lua_CFunction
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.CClosure.upvalue">
            TValue[1]
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Closure.c">
            CClosure
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Closure.l">
            LClosure
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.GCheader.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.GCheader.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.GCheader.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.strt">
            stringtable
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.frealloc">
            lua_Alloc
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.ud">
            void*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.currentwhite">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.gcstate">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.sweepstrgc">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.rootgc">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.sweepgc">
            GCObject**
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.gray">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.grayagain">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.weak">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.tmudata">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.buff">
            Mbuffer
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.GCthreshold">
            lu_mem->size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.totalbytes">
            lu_mem->size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.estimate">
            lu_mem->size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.gcdept">
            lu_mem->size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.gcpause">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.gcstepmul">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.l_registry">
            TValue->lua_TValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.mainthread">
            lua_State*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.uvhead">
            UpVal
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.mt">
            Table*[]
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.global_State.tmname">
            TString*[]
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.L_Umaxalign.u">
            double
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.L_Umaxalign.s">
            void*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.L_Umaxalign.l">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.isC">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.nupvalues">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.gclist">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.env">
            Table*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.p">
            Proto*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.LClosure.upvals">
            UpVal*[1]
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.event">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.name">
            char*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.namewhat">
            char*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.what">
            char*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.source">
            char*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.currentline">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.nups">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.linedefined">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.lastlinedefined">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.short_src">
            char[]
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_Debug.i_ci">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.status">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.top">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.base">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.l_G">
            global_State*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.ci">
            CallInfo*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.savedpc">
            Instruction*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.stack_last">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.stack">
            StkId->TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.end_ci">
            CallInfo*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.base_ci">
            CallInfo*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.stacksize">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.size_ci">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.nCcalls">
            unsigned short
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.hookmask">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.allowhook">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.basehookcount">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.hookcount">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.hook">
            lua_Hook
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.l_gt">
            TValue->lua_TValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.env">
            TValue->lua_TValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.openupval">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.gclist">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.errorJmp">
            lua_longjmp*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_State.errfunc">
            ptrdiff_t->int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_TValue.value">
            Value->Anonymous_7b16fc5c_a7d3_48b4_abda_7b54eb36a655
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.lua_TValue.tt">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Mbuffer.buffer">
            char*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Mbuffer.n">
            size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Mbuffer.buffsize">
            size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Node.i_val">
            TValue->lua_TValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Node.i_key">
            TKey
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.k">
            TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.code">
            Instruction*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.p">
            Proto**
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.lineinfo">
            int*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.locvars">
            LocVar*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.upvalues">
            TString**
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.source">
            TString*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.sizeupvalues">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.sizek">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.sizecode">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.sizelineinfo">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.sizep">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.sizelocvars">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.linedefined">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.lastlinedefined">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.gclist">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.nups">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.numparams">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.is_vararg">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Proto.maxstacksize">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.stringtable.hash">
            GCObject**
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.stringtable.nuse">
            lu_int32->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.stringtable.size">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.flags">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.lsizenode">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.metatable">
            Table*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.array">
            TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.node">
            Node*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.lastfree">
            Node*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.gclist">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Table.sizearray">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TKey.nk">
            TKeyNKey
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TKey.tvk">
            TValue->lua_TValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TKeyNKey.value">
            Value->Anonymous_7b16fc5c_a7d3_48b4_abda_7b54eb36a655
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TKeyNKey.tt">
            int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TKeyNKey.next">
            Node*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TString.dummy">
            L_Umaxalign->Anonymous_51e536e6_aab9_495f_bef5_aa91e50ceabc
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TString.tsv">
            TStringValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TStringValue.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TStringValue.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TStringValue.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TStringValue.reserved">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TStringValue.hash">
            unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.TStringValue.len">
            size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Udata.dummy">
            L_Umaxalign->Anonymous_51e536e6_aab9_495f_bef5_aa91e50ceabc
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Udata.uv">
            UDataValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UDataValue.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UDataValue.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UDataValue.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UDataValue.metatable">
            Table*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UDataValue.env">
            Table*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UDataValue.len">
            size_t->unsigned int
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpVal.next">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpVal.tt">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpVal.marked">
            lu_byte->unsigned char
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpVal.v">
            TValue*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpVal.u">
            UpValUnion
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpValLink.prev">
            UpVal*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpValLink.next">
            UpVal*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpValUnion.value">
            TValue->lua_TValue
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.UpValUnion.l">
            UpValLink
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Value.gc">
            GCObject*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Value.p">
            void*
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Value.n">
            lua_Number->double
        </member>
        <member name="F:ff14bot.Managers.Lua.NativeLuaTypes.Value.b">
            int
        </member>
        <member name="P:ff14bot.Managers.MovementManager.MovementLocked">
            <summary>
            Returns true if the game has locked our character from moving
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.IsOccupied">
            <summary>
            Returns true if the player is currently unable to move or perform actions due to being busy
            </summary>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.Pulse">
            <summary>Pulses this instance.</summary>
            <remarks>Created by Nesox 2012-02-04.</remarks>
        </member>
        <member name="F:ff14bot.Managers.MovementManager.TimedMovementAction.Direction">
            <summary>The direction.</summary>
        </member>
        <member name="F:ff14bot.Managers.MovementManager.TimedMovementAction.End">
            <summary>The end Date/Time.</summary>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.MoveForwardStart">
            <summary>
            Start autorunning forward
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.IsMoving">
            <summary>
            Returns if character is currently moving. This variable is not cached.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.IsTurning">
            <summary>
            Returns if character is currently turning. This variable is not cached.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.IsFlying">
            <summary>
            Returns true if flying, false otherwise. This variable is not cached.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.Speed">
            <summary>
            Returns characters current speed. This variable is not cached.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.IsSwimming">
            <summary>
            Returns true if the player is swimming on the surface of the water
            </summary>
        </member>
        <member name="P:ff14bot.Managers.MovementManager.IsDiving">
            <summary>
            Returns true if the player is currently underwater diving
            </summary>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.SetFacing(System.Single)">
            <summary>
            Sets the direction the player is facing
            If the player is currently flying then the Y axis is set to 0 and youll fly straight
            </summary>
            <param name="rotation">Angle in radians, value should be between 0 and 2π </param>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.SetFacing(Clio.Utilities.Vector3)">
            <summary>
            Face the player twoards the provided vector
            If the player is currently flying then the player will fly twoards the point
            Facing a vector that is outside the range of normal movement will follow the normal game behavior of clamping to the closest possible angle
            </summary>
            <param name="target">Vector to face </param>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.SetFacing2D(Clio.Utilities.Vector3)">
            <summary>
            Sets the direction the player is facing
            If the player is currently flying then the Y axis is set to 0 and youll fly straight
            </summary>
            <param name="target">Vector to face</param>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.Move(ff14bot.Managers.MovementDirection,System.TimeSpan)">
            <summary>Moves the specified dir, only works while botbase is running</summary>
            <param name="dir"> The dir.</param>
            <param name="time">The time.</param>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.Move(ff14bot.Managers.MovementDirection)">
            <summary>Sets a control bit, only works while botbase is running</summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.MoveStop(ff14bot.Managers.MovementDirection)">
            <summary>Unsets a control bit flag, only works while botbase is running</summary>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.MoveStop">
            <summary>Makes you stop moving.</summary>
        </member>
        <member name="T:ff14bot.Managers.MovementManager.MovementEventArgs">
            <summary>Additional information for movement events.</summary>
        </member>
        <member name="M:ff14bot.Managers.MovementManager.MovementEventArgs.#ctor(ff14bot.Managers.MovementDirection,System.Boolean)">
            <summary>Constructor.</summary>
            <param name="direction">The direction.</param>
            <param name="stop">     true to stop.</param>
        </member>
        <member name="F:ff14bot.Managers.MovementManager.MovementEventArgs.Direction">
            <summary>The direction.</summary>
        </member>
        <member name="F:ff14bot.Managers.MovementManager.MovementEventArgs.Stop">
            <summary>true to stop.</summary>
        </member>
        <member name="T:ff14bot.Managers.PartyManager">
            <summary>
            Stores all the information about party members
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.PartyId">
            <summary>
            Gets the partys id
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.NumMembers">
            <summary>
            Get the current number of players in the party
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.IsPartyLeader">
            <summary>
            Checks if the player is the party leader
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.IsInParty">
            <summary>
            Checks if the player is currently in a party
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.PartyLeader">
            <summary>
            Gets the party leader for the current party
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.AllMembers">
            <summary>
            Returns list of all party members regardless if they are in the objectmanager. PartyMember.GameObject may be null!
            </summary>
        </member>
        <member name="M:ff14bot.Managers.PartyManager.Pulse">
            <summary>
            Pulses the partymanager
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.RawMembers">
            <summary>
            Raw list of current party members, never cached
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.VisibleMembers">
            <summary>
            Returns list of party member objects that are visible in the objectmanager.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyManager.CrossRealm">
            <summary>
            Checks if the player is currently in a cross realm party
            </summary>
        </member>
        <member name="T:ff14bot.Managers.CrossRealmPartyMember">
            <summary>
            Party member object used when inside a cross-realm party
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.ObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.Class">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.CurrentHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.MaxHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.CurrentMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.MaxMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.CurrentTP">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.IsMe">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.PartyObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.Name">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.SyncdLevel">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.IsXRealm">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.IsPartyLeader">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.CrossRealmPartyMember.IsValid">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Managers.TrustDummyPlayerMember">
            <summary>
            Dummy party member used so that the player appears in the party member list when inside a trust dungeon run
            </summary>
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.ObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.Class">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.SyncdLevel">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.CurrentHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.MaxHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.CurrentMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.MaxMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.CurrentTP">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.Name">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.IsPartyLeader">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.PartyObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.IsMe">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustDummyPlayerMember.IsXRealm">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Managers.TrustPartyMember">
            <summary>
            Trust npc party member
            </summary>
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.ObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.Class">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.SyncdLevel">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.CurrentHealth">
            <inheritdoc />
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.MaxHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.CurrentMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.MaxMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.CurrentTP">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.Name">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.IsPartyLeader">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.PartyObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.IsMe">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.TrustPartyMember.IsXRealm">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Managers.PartyMember">
            <summary>
            Base class inherited by the different party member types
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.GameObject">
            <summary>
            Gets the party members GameObject
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.IsInObjectManager">
            <summary>
            Checks if the party member is inside the objectmananger and additional information can be fetched
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.BattleCharacter">
            <summary>
            Casts the party members game object to a <see cref="T:ff14bot.Objects.BattleCharacter"/> this should have probably been the default for gameobject
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.ObjectId">
            <summary>
            Get the objectId of the partymembers world character
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.Class">
            <summary>
            Gets the party members class
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.SyncdLevel">
            <summary>
            Gets the party members synced job level
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.CurrentHealth">
            <summary>
            Gets the party members current health
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.MaxHealth">
            <summary>
            Gets the party members max health
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.CurrentMana">
            <summary>
            Gets the party members current mana
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.MaxMana">
            <summary>
            Gets the party members max mana
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.CurrentTP">
            <summary>
            Gets the party members current tp
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.Name">
            <summary>
            Gets the party members name
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.IsPartyLeader">
            <summary>
            Checks if the party member is the leader
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.PartyObjectId">
            <summary>
            Gets the party members party object id, used to check if the party member is the leader
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.IsMe">
            <summary>
            Checks if the partymember is the player
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PartyMember.IsXRealm">
            <summary>
            Checks if the party member is cross realm
            </summary>
        </member>
        <member name="M:ff14bot.Managers.PartyMember.ToString">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Managers.StandardPartyMember">
            <summary>
            A member of the players party
            </summary>
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.ObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.Class">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.SyncdLevel">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.CurrentHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.MaxHealth">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.CurrentMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.MaxMana">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.CurrentTP">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.Name">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.IsPartyLeader">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.PartyObjectId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.IsMe">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.IsValid">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.StandardPartyMember.IsXRealm">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Managers.PluginManager.Plugins">
            <summary> Gets all the currently loaded plugins. </summary>
            <value> The plugins. </value>
        </member>
        <member name="E:ff14bot.Managers.PluginManager.OnPluginsReloaded">
            <summary>
            Occurs when [on plugins reloaded].
            </summary>
            <remarks>Created 2012-06-07</remarks>
        </member>
        <member name="M:ff14bot.Managers.PluginManager.SetEnabledPlugins(System.String[])">
            <summary> Sets a list of plugins to be enabled. </summary>
            <remarks> Created 4/26/2012. </remarks>
            <param name="plugins"> A variable-length parameters list containing plugins. </param>
        </member>
        <member name="M:ff14bot.Managers.PluginManager.GetEnabledPlugins">
            <summary> Gets the enabled plugins. </summary>
            <remarks> Created 4/26/2012. </remarks>
            <returns>
            An enumerator that allows foreach to be used to process get enabled plugins in this
            collection.
            </returns>
        </member>
        <member name="M:ff14bot.Managers.PluginManager.PulseAllPlugins">
            <summary> Pulses all plugins. </summary>
            <remarks> Created 3/21/2012. </remarks>
        </member>
        <member name="M:ff14bot.Managers.PluginManager.PulsePlugin(ff14bot.Interfaces.IBotPlugin)">
            <summary> Pulses a specific plugin instance. </summary>
            <remarks> Created 3/21/2012. </remarks>
            <param name="plugin"> The plugin. </param>
        </member>
        <member name="M:ff14bot.Managers.QuestWork.IsTodoChecked(System.Int32,System.Int32)">
            <summary>Checks if the quest step has proggressed past the provided step or that the objective at the given index has been completed. </summary>
            <param name="step"></param>
            <param name="objectiveIndex">Starts at 0</param>
            <returns>true if objective is completed.</returns>
        </member>
        <member name="M:ff14bot.Managers.QuestWork.GetTodoArgs(System.Int32)">
            <summary>
            Gets the values used for tracking quest progress at the current step ie:
            Obtain caches of ... 0/3
            objectiveIndex starts at 0 and goes up from there
            </summary>
            <param name="objectiveIndex">Starts at 0</param>
            <returns>A tuple, first value is currently completed and second value is how many are needed</returns>
        </member>
        <member name="M:ff14bot.Managers.QuestWork.GetTodoArgs(System.Int32,System.Int32)">
            <summary>
            Gets the values used for tracking quest progress at the given step ie:
            Obtain caches of ... 0/3
            objectiveIndex starts at 0 and goes up from there
            </summary>
            <param name="step">step to check</param>
            <param name="objectiveIndex">Starts at 0</param>
            <returns>A tuple, first value is currently completed and second value is how many are needed</returns>
        </member>
        <member name="M:ff14bot.Managers.QuestLogManager.QuestObjectives(System.Int32)">
            <summary>
            Returns the quest objective offsets for the quests current step
            </summary>
            <param name="questId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.QuestLogManager.HasAtLeastOneQuest(System.Int32[])">
            <summary>
            Returns true if the user has atleast one of the quests in the list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.QuestLogManager.HasAtLeastOneDailyQuestComplete(System.Int32[])">
            <summary>
            Returns true if the user has atleast one of the quests in the list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="E:ff14bot.Managers.RoutineManager.Reloaded">
            <summary>
            Fired when routines have been reloaded
            </summary>
        </member>
        <member name="E:ff14bot.Managers.RoutineManager.PickRoutineFired">
            <summary>
            Fired at the very start of PickRoutine
            Good place to set PreferedRoutine
            </summary>
        </member>
        <member name="E:ff14bot.Managers.RoutineManager.RoutineChanged">
            <summary>
            Fired when the routine has changed
            </summary>
        </member>
        <member name="M:ff14bot.Managers.RoutineManager.GetCapabilityState(ff14bot.Managers.CapabilityFlags)">
            <summary>Returns the state of a capability.</summary>
            <param name="capability">The capability. Should not have multiple flags set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="capability"/> has multiple flags set.</exception>
            <returns>The state of a capability.</returns>
        </member>
        <member name="M:ff14bot.Managers.RoutineManager.SetCapabilityState(ff14bot.Managers.CapabilityFlags,ff14bot.Managers.CapabilityState,System.String)">
            <summary>Sets the state of the passed in capabilities.</summary>
            <param name="capability">The capability. Should not have multiple flags set.</param>
            <param name="state">The new state to set the capability into.</param>
            <param name="reason">The reason.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="capability"/> has more than 1 flag set or <paramref name="state"/> is invalid.</exception>
        </member>
        <member name="M:ff14bot.Managers.RoutineManager.IsAnyDisallowed(ff14bot.Managers.CapabilityFlags)">
            <summary>Determines whether any of the capabilities are disallowed</summary>
            <param name="capability">The capability.</param>
        </member>
        <member name="M:ff14bot.Managers.RoutineManager.PickRoutine">
            <summary>
            Selects an active routine
            The first routine with a partial match with <see cref="P:ff14bot.Managers.RoutineManager.PreferedRoutine"/> is selected first if it is set.
            If there is only one match for the current class, then that is selected. If there is more then one option then a dialog is displayed.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RoutineManager.AllRoutines">
            <summary>
            List of all loaded routines, including ones that don't match the players class
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RoutineManager.Routines">
            <summary>
            List of all routines that support the players class.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RoutineManager.PreferedRoutine">
            <summary>
            Partial match against routine name during startup and switching classes
            Can be assigned to.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RoutineManager.Current">
            <summary>
            Current combat routine
            Setting this will change the routine used in the botbases
            Calls shutdown on the previous routine and initalize on the new one
            </summary>
        </member>
        <member name="P:ff14bot.Managers.CapabilityStateChangedArgs.Capability">
            <summary>Gets the capability.</summary>
        </member>
        <member name="P:ff14bot.Managers.CapabilityStateChangedArgs.OldState">
            <summary>Gets the old state.</summary>
        </member>
        <member name="P:ff14bot.Managers.CapabilityStateChangedArgs.NewState">
            <summary>Gets the new state.</summary>
        </member>
        <member name="T:ff14bot.Managers.SpecialCurrencyManager">
            <summary>
            Gets information about some of the currencies in the currencies tab
            </summary>
        </member>
        <member name="M:ff14bot.Managers.SpecialCurrencyManager.GetCurrencyCount(ff14bot.Managers.SpecialCurrency)">
            <summary>
            Check the players special currency count
            </summary>
            <param name="currency"></param>
            <returns>Returns how much of a currency the player has, 0 otherwise</returns>
        </member>
        <member name="M:ff14bot.Managers.SpecialCurrencyManager.GetCurrencyWeeklyLimitCount(ff14bot.Managers.SpecialCurrency)">
            <summary>
            Gets the progress towards the weekly cap for given currency
            </summary>
            <param name="currency"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.SpecialCurrencyManager.SpecialCurrencies">
            <summary>
            Gets all the current special currencies 
            </summary>
        </member>
        <member name="P:ff14bot.Managers.SpecialCurrencyManager.SpecialCurrenciesWeeklyLimits">
            <summary>
            Gets the limits for some special currencies
            </summary>
        </member>
        <member name="T:ff14bot.Managers.SpecialShopItem">
            <summary>
            Struct containing the information for shopexchangecurrecny and shopexchangeitem
            The arrays provided are not cached so they should be declared outside prior to using LINQ
            </summary>
        </member>
        <member name="T:ff14bot.Managers.SpecialShopManager">
            <summary>
            Class that handles interacting with shops that require the player to use currencies other then gil
            </summary>
        </member>
        <member name="P:ff14bot.Managers.SpecialShopManager.ActiveShopPtr">
            <summary>
            Pointer to the data stored by the active shop
            </summary>
        </member>
        <member name="P:ff14bot.Managers.SpecialShopManager.Items">
            <summary>
            All the items in the current shop window that the player can see
            </summary>
        </member>
        <member name="P:ff14bot.Managers.SpecialShopManager.RawItems">
            <summary>
            All the items in the current shop window, some may not be visible to the player
            </summary>
        </member>
        <member name="T:ff14bot.Managers.AgentModule">
            <summary>
            This class handles accessing datasets behind ui windows
            </summary>
        </member>
        <member name="M:ff14bot.Managers.AgentModule.TryAddAgent(System.Int32,System.Type)">
            <summary>
            Attempts to add the agent type for the provided id
            </summary>
            <param name="id"></param>
            <param name="AgentType">Must be a subclass of AgentInterface </param>
            <returns>False if a type already exists for the provided id</returns>
        </member>
        <member name="M:ff14bot.Managers.AgentModule.AgentExistsForId(System.Int32)">
            <summary>
            Check if we have a type for the provided id
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.RaptureAtkUnitManager">
            <summary>
            This class handles accessing ingame windows
            </summary>
        </member>
        <member name="M:ff14bot.Managers.RaptureAtkUnitManager.GetWindowByName(System.String)">
            <summary>
            Gets window control handler by name
            Returns null for windows that are not visible
            </summary>
            <param name="name">Name of the window</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.RaptureAtkUnitManager.GetWindowByName(System.String,System.Boolean)">
            <summary>
            Gets window control handler by name
            </summary>
            <param name="name">Name of the window</param>
            <param name="ignoreVisibility">ignores if the window is visible or not</param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.RaptureAtkUnitManager.GetRawControls">
            <summary>
            Call this if you are operating in another thread.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.RaptureAtkUnitManager.Controls">
            <summary> Gets a list of AtkAddonControl. </summary>
            <value> A List of AtkAddonControl. </value>
        </member>
        <member name="M:ff14bot.Managers.RaptureAtkUnitManager.Update">
            <summary> Updates the <see cref="T:ff14bot.Managers.RaptureAtkUnitManager"/>'s object storage lists. </summary>
        </member>
        <member name="T:ff14bot.Managers.AtkAddonControl">
            <summary>
            Base class inherited by all remote ingame windows
            </summary>
        </member>
        <member name="M:ff14bot.Managers.AtkAddonControl.SendAction(System.Int32,System.UInt64[])">
            <summary>
            Sends commands directly to the window
            </summary>
            <param name="pairCount"></param>
            <param name="param"></param>
        </member>
        <member name="P:ff14bot.Managers.AtkAddonControl.IsVisible">
            <summary>
            Checks if the window is currently visible
            </summary>
        </member>
        <member name="P:ff14bot.Managers.AtkAddonControl.Bounds">
            <summary>
            Gets the 2D bounding region for the window
            </summary>
        </member>
        <member name="M:ff14bot.Managers.AtkAddonControl.TryFindAgentInterface">
            <summary>
            Attemps to find the agent that provides information for window
            </summary>
            <returns>the AgentInterface that provides data, null if unable to find or no agent exists</returns>
        </member>
        <member name="M:ff14bot.Managers.AtkAddonControl.FindButton(System.Int32)">
            <summary>
            Gets a remotebutton for a given id
            </summary>
            <param name="id"></param>
            <returns>null if the object at a given id is not a button</returns>
        </member>
        <member name="M:ff14bot.Managers.AtkAddonControl.FindLabel(System.Int32)">
            <summary>
            Gets a remotelabel for a given id
            </summary>
            <param name="id"></param>
            <returns>null if the object at a given id is not a label</returns>
        </member>
        <member name="M:ff14bot.Managers.AtkAddonControl.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Managers.WorldManager">
            <summary>
            Manager that holds various pieces of information about the state of the game world
            </summary>
        </member>
        <member name="F:ff14bot.Managers.WorldManager.UnixEpoch">
            <summary>
            UnixEpoch
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.EorzaTime">
            <summary>
            Current time in Eorza, if system clock is wrong this will be incorrect
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.CanFly">
            <summary>
            Returns true if you have the ability to fly in the current zone
            </summary>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.Raycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3@,Clio.Utilities.Vector3@)">
            <summary>
            Performs a raycast from <paramref name="startMid"/> to <paramref name="endMid"/>
            </summary>
            <param name="startMid"></param>
            <param name="endMid"></param>
            <param name="hit"></param>
            <param name="distances"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.Raycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3@)">
            <summary>
            Performs a raycast from <paramref name="startMid"/> to <paramref name="endMid"/>
            </summary>
            <param name="startMid"></param>
            <param name="endMid"></param>
            <param name="hit"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.MassTraceLine(ff14bot.Pathing.WorldLine[],ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,System.Boolean[]@,Clio.Utilities.Vector3[]@)">
            <summary>Performs a mass traceline.</summary>
            <param name="lines">     The lines.</param>
            <param name="flag">      The flag.</param>
            <param name="hitResults">[out] The hit results.</param>
            <param name="hitPoints"> [out] The hit points.</param>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.MassTraceLine(ff14bot.Pathing.WorldLine[],ff14bot.Enums.RaycastFlags[],ff14bot.Enums.RaycastFlags[],System.Boolean[]@)">
            <summary>Performs a mass traceline.</summary>
            <param name="lines">     The lines.</param>
            <param name="flags">     The flags.</param>
            <param name="hitResults">[out] The hit results.</param>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.MassTraceLine(ff14bot.Pathing.WorldLine[],ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,System.Boolean[]@)">
            <summary>Performs a mass traceline.</summary>
            <param name="lines">     The lines.</param>
            <param name="flag">      The flag.</param>
            <param name="hitResults">[out] The hit results.</param>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.AdvancedRaycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3,ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,Clio.Utilities.Vector3@)">
            <summary>
            Performs a raycast from <paramref name="start"/> to <paramref name="end"/> and checks if the triangle has the flags provided
            <paramref name="flags1"/> and <paramref name="flags2"/> should have the same values most of the time
            Raycasts far from the player are unreliable as the gameworld gets unloaded
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="flags1"></param>
            <param name="flags2"></param>
            <param name="hit"></param>
            <returns>true if there exists an object that matched the passed flags</returns>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.AvailableLocations">
            <summary>
            List of avalible locations to teleport to.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.KnownAetheryteIds">
            <summary>
            List of known Aetheryte ids, also includes the small aethernets
            Does not include the housing zone aethernets as they funtion totally different from all the aethernets
            </summary>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.HasAetheryteId(System.UInt32)">
            <summary>
            Returns true if user has interacted with the aethernet or aetheryte with the given id
            </summary>
            <param name="AetheryteId">Aetheryte/Aethernet ID to check</param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.InSanctuary">
            <summary>
            Returns true if player is currently in a sanctuary
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.InPvP">
            <summary>
            Returns true if player is currently in a pvp area
            </summary>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.CanTeleport">
            <summary>
            Check if user can cast teleport
            </summary>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.RawZoneId">
            <summary>
            Returns RAW Id for the current zone 
            This function is not what you are looking for in most cases
            Use ZoneId instead.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.ZoneId">
            <summary>
            Returns Id for the current zone
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.CurrentZoneName">
            <summary>
            Returns the name of the current zone in english
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.CurrentLocalizedZoneName">
            <summary>
            Returns the name of the current zone in the games current locale
            </summary>
        </member>
        <member name="P:ff14bot.Managers.WorldManager.SubZoneId">
            <summary>
            Returns the subzoneid
            </summary>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.TeleportById(System.UInt32)">
            <summary>
            Teleport user to given 
            </summary>
            <param name="AetheryteId"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.Teleport(System.UInt32)">
            <summary>
            Starts teleport to given zone
            </summary>
            <param name="positiononmenu">0 is start of teleport list</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.WorldManager.Teleport(System.String)">
            <summary>
            Teleport user to given Aetheryte based on name
            </summary>
            <param name="location">Location to teleport to, capitlization doesnt matter.</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.CombatTargeting.#ctor">
            <summary> Default constructor. </summary>
        </member>
        <member name="P:ff14bot.Managers.CombatTargeting.Instance">
            <summary> Gets the instance. </summary>
            <value> The instance. </value>
        </member>
        <member name="M:ff14bot.Managers.FateCombatTargetingProvider.GetObjectsByWeight">
            <summary> Gets the objects by weight. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
            <returns> The objects by weight. </returns>
        </member>
        <member name="M:ff14bot.Managers.FateCombatTargetingProvider.IsValidUnit(System.Boolean,ff14bot.Objects.BattleCharacter)">
            <summary> Query if 'unit' is valid unit. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
        </member>
        <member name="M:ff14bot.Managers.FateCombatTargetingProvider.GetScoreForUnit(ff14bot.Objects.BattleCharacter)">
            <summary> Gets score for a unit. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
            <param name="unit"> The unit. </param>
            <returns> The score for unit. </returns>
        </member>
        <member name="T:ff14bot.Managers.DefaultCombatTargetingProvider">
            <summary> Default combat targeting provider. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
        </member>
        <member name="M:ff14bot.Managers.DefaultCombatTargetingProvider.GetObjectsByWeight">
            <summary> Gets the objects by weight. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
            <returns> The objects by weight. </returns>
        </member>
        <member name="M:ff14bot.Managers.DefaultCombatTargetingProvider.IsValidUnit(ff14bot.Objects.BattleCharacter)">
            <summary> Query if 'unit' is valid unit. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
            <param name="unit">          The unit. </param>
            <param name="inLineOfSight"> true if in line of sight. </param>
            <param name="blackspots">    The blackspots. </param>
            <returns> true if valid unit, false if not. </returns>
        </member>
        <member name="M:ff14bot.Managers.DefaultCombatTargetingProvider.GetScoreForUnit(ff14bot.Objects.BattleCharacter)">
            <summary> Gets score for a unit. </summary>
            <remarks> Nesox, 2013-06-29. </remarks>
            <param name="unit"> The unit. </param>
            <returns> The score for unit. </returns>
        </member>
        <member name="M:ff14bot.Managers.ChocoboManager.DismissChocobo">
            <summary>
            Task to dismount and dismiss chocobo
            </summary>
            <returns></returns>
        </member>
        <member name="F:ff14bot.Managers.ChocoboManager.BlockSummon">
            <summary>
            Setting this to true will force CanSummon and CanSummonWith to return false. 
            Used to block summoning when we are going to perform a task that must be performed without the companion.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ChocoboManager.IsStabled">
            <summary>
            Returns true if the player's chocobo is currently stabled.
            </summary>
        </member>
        <member name="P:ff14bot.Managers.ChocoboManager.ChocoboUnlocked">
            <summary>
            Returns true if the player has unlocked the grand company chocobo
            </summary>
        </member>
        <member name="M:ff14bot.Managers.ChocoboManager.ForceSummon">
            <summary>
            Disregards CanSummon check and summons the chocobo if the gyhsall greens can be used. 
            Should only be used when we want to ignore mount settings for some reason
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PetSpellData.Name">
            <summary>
            Returns the english name of the spell
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PetSpellData.LocalizedName">
            <summary>
            Returns the name of the spell in the games currently selected localization
            </summary>
        </member>
        <member name="T:ff14bot.Managers.PetManager">
            <summary>
            Functions involving the control of the players pet
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PetManager.PetMovement">
            <summary>
            Current PetMovement
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PetManager.PetStance">
            <summary>
            Current Stance
            </summary>
        </member>
        <member name="P:ff14bot.Managers.PetManager.PetMode">
            <summary>
            Current Mode
            </summary>
        </member>
        <member name="M:ff14bot.Managers.PetManager.Place(Clio.Utilities.Vector3)">
            <summary>
            Command your pet to move to the specified location
            </summary>
            <param name="location"></param>
        </member>
        <member name="M:ff14bot.Managers.PetManager.CanCast(System.String,ff14bot.Objects.GameObject)">
            <summary>
            Returns true if within range, not on cooldown and within los.
            </summary>
            <param name="spellName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ff14bot.Managers.PetManager.DoAction(System.String,ff14bot.Objects.GameObject)" -->
        <member name="M:ff14bot.Managers.PetManager.CanCast(ff14bot.Managers.PetSpellData,ff14bot.Objects.GameObject)">
            <summary>
            Returns true if within range, not on cooldown and within los.
            </summary>
            <param name="spellName"></param>
            <param name="targetObject"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Managers.PetManager.CurrentActions">
            <summary>
            Returns list of current known skills
            Value is cached for 1 minute
            </summary>
        </member>
        <member name="P:ff14bot.Managers.AvoidanceManager.IsRunningOutOfAvoid">
            <summary>Gets a value indicating whether toon is running out of an area being avoided.</summary>
        </member>
        <member name="E:ff14bot.Managers.AvoidanceManager.OnRunningOut">
            <summary>Triggered when running out of an avoided area</summary>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.GenerateAvoidPath(Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.Boolean,ff14bot.Pathing.MoveToParameters)">
            <summary>
            </summary>
            <param name="avoidStart"></param>
            <param name="avoidEnd"></param>
            <param name="avoidEndIsNavEnd">
                <c>True</c> when <paramref name="avoidEnd" /> is the last point in navigation path
             </param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.NavigationPathIntersectsAvoids(Clio.Utilities.Vector3,System.Collections.Generic.List{Clio.Utilities.Vector3},Clio.Utilities.Vector3@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="myLoc"></param>
            <param name="points"></param>
            <param name="avoidEnd"></param>
            <param name="avoidEndIsNavEnd">
            Indicates whether <paramref name="avoidEnd"/> is the last point in navigation path (<paramref name="points"/>)
             </param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.Pulse">
            <summary>Pulses this instance.</summary>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.ResetNavigation">
            <summary>
            Resets the internal navigation system.
            </summary>
            <remarks>
                This should only be called when the local collidable geometry has changed,
                such as a door closing when engaging a boss.
            </remarks>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Single,System.UInt32[])">
            <summary>Adds the avoid object.</summary>
            <param name="canRun">The can run.</param>
            <param name="radius">The radius.</param>
            <param name="unitIds">The unit ids.</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Func{``0,System.Single},System.UInt32[])">
            <summary>
                Adds the avoid object.
            </summary>
            <param name="canRun">The can run.</param>
            <param name="radiusProducer">The radius selector.</param>
            <param name="unitIds">The unit ids.</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Single,System.Predicate{``0},System.Func{``0,Clio.Utilities.Vector3},System.Boolean)">
            <summary>Adds the avoid object.</summary>
            <param name="canRun">The can run.</param>
            <param name="radius">The radius.</param>
            <param name="objectSelector">The object selector.</param>
            <param name="locationProducer">The location selector.</param>
            <param name="ignoreIfBlocking">if set to <c>true</c> [ignore if blocking].</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Func{``0,System.Single},System.Predicate{``0},System.Func{``0,Clio.Utilities.Vector3},System.Boolean)">
            <summary>Runs away from a unit or object if within range.</summary>
            <param name="canRun">The 'can run' condition.</param>
            <param name="radiusProducer">The distance to avoid</param>
            <param name="objectSelector">The object selector.</param>
            <param name="locationProducer">The location selector</param>
            <param name="ignoreIfBlocking">If set to true the object will be ignored if no path can be generated around it</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Single,System.UInt32[])">
            <summary>Runs away from a unit or object if within range.</summary>
            <param name="canRun">The 'can run' condition.</param>
            <param name="leashPointProducer">The leash center point selector. Unit location if null</param>
            <param name="leashRadius">The max distance to run from leash.</param>
            <param name="radius">The radius.</param>
            <param name="unitIds">The unit ids.</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{``0,System.Single},System.UInt32[])">
            <summary>
                Runs away from a unit or object if within range.
            </summary>
            <param name="canRun">The 'can run' condition.</param>
            <param name="leashPointProducer">The leash center point selector. Unit location if null</param>
            <param name="leashRadius">The max distance to run from leash.</param>
            <param name="radiusProducer">The distance to avoid</param>
            <param name="unitIds">The unit ids.</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Single,System.Predicate{``0},System.Func{``0,Clio.Utilities.Vector3},System.Boolean)">
            <summary>
                Runs away from a unit or object if within range.
            </summary>
            <param name="canRun"> The 'can run' condition. </param>
            <param name="leashPointProducer"> The leash center point selector. Unit location if null </param>
            <param name="radius"> The distance to avoid </param>
            <param name="leashRadius"> The max distance to run from leash. </param>
            <param name="objectSelector"> The object selector. </param>
            <param name="locationProducer"> The location selector </param>
            <param name="ignoreIfBlocking"> If set to true the object will be ignored if no path can be generated around it </param>
            <returns> </returns>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidObject``1(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{``0,System.Single},System.Predicate{``0},System.Func{``0,Clio.Utilities.Vector3},System.Boolean)">
            <summary>
                Runs away from a unit or object if within range.
            </summary>
            <param name="canRun"> The 'can run' condition. </param>
            <param name="leashPointProducer"> The leash center point selector. Unit location if null </param>
            <param name="radiusProducer"> The distance to avoid </param>
            <param name="leashRadius"> The max distance to run from leash. </param>
            <param name="objectSelector"> The object selector. </param>
            <param name="locationProducer"> The location selector </param>
            <param name="ignoreIfBlocking"> If set to true the object will be ignored if no path can be generated around it </param>
            <returns> </returns>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidLocation(System.Func{System.Boolean},System.Single,System.Func{Clio.Utilities.Vector3},System.Boolean)">
            <summary>
                Run away from location.
            </summary>
            <param name="canRun">The condition.</param>
            <param name="radius">The radius.</param>
            <param name="locationProducer">The location selector.</param>
            <param name="ignoreIfBlocking">
                If set to true the object will be ignored if no path can be generated around it
                (default: false)
            </param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidLocation``1(System.Func{System.Boolean},System.Func{``0,System.Single},System.Func{``0,Clio.Utilities.Vector3},System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
                Run away from location.
            </summary>
            <param name="canRun"> The condition. </param>
            <param name="radiusProducer"> The max distance to run. </param>
            <param name="locationProducer"> The location selector. </param>
            <param name="collectionProducer"> Optional collection of objects that are passed as args to locationProducer </param>
            <param name="ignoreIfBlocking">
                If set to true the object will be ignored if no path can be generated around it
                (default: false)
            </param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidLocation(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Single,System.Func{Clio.Utilities.Vector3},System.Boolean)">
            <summary>
                Run away from location.
            </summary>
            <param name="canRun">The condition.</param>
            <param name="leashPointProducer">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="radius">The max distance to run.</param>
            <param name="locationProducer">The location selector.</param>
            <param name="ignoreIfBlocking">
                If set to true the object will be ignored if no path can be generated around it
                (default: false)
            </param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidLocation``1(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{``0,System.Single},System.Func{``0,Clio.Utilities.Vector3},System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
                Run away from location.
            </summary>
            <param name="canRun">The condition.</param>
            <param name="leashPointProducer">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="radiusProducer">The max distance to run.</param>
            <param name="locationProducer">The location selector.</param>
            <param name="collectionProducer">Optional collection of objects that are passed as args to locationProducer</param>
            <param name="ignoreIfBlocking">
                If set to true the object will be ignored if no path can be generated around it
                (default: false)
            </param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidPolygon``1(System.Func{System.Boolean},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{``0,System.Single},System.Func{``0,System.Single},System.Func{``0,System.Single},System.Func{``0,Clio.Utilities.Vector2[]},System.Func{``0,Clio.Utilities.Vector3},System.Func{System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean},System.Boolean,ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidPolygonInfo`1" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="locationProducer">
                Produces the location. 
                Polygon is rotated and scaled around produced location on the xy plane. 
            </param>
            <param name="rotationProducer">Produces the polygon's rotation.</param>
            <param name="scaleProducer">Produces the polygon's scale</param>
            <param name="heightProducer">
                Produces the height of the polygon. 
                Half of the produced height extends above location produced by <see cref="!:locationProducer"/> and the other half below
            </param>
            <param name="pointsProducer">Produces the points that form the polygon</param>
            <param name="collectionProducer">Produces a collection of objects that should be avoided. </param>
            <param name="leashPointProducer">The leash point producer. Can be null. Used in conjunction with <see cref="!:leashRadius"/></param>
            <param name="leashRadius">
                The leash radius. 
                If <see cref="!:leashPointProducer"/> is not null, 
                bot will not navigate furthar than this distance from point returned from <see cref="!:leashPointProducer"/> while running out of avoid</param>
            <param name="ignoreIfBlocking">Ignore avoid if set to <c>true</c> and it can't be navigated around.</param>
            <param name="objectValidator">Indecates whether objects produced by <see cref="!:collectionProducer"/> are valid</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ff14bot.Managers.AvoidanceManager.AddAvoidUnitCone``1(System.Func{System.Boolean},System.Predicate{``0},System.Func{Clio.Utilities.Vector3},System.Single,System.Single,System.Single,System.Single,System.Func{``0,Clio.Utilities.Vector3},System.Boolean,ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>
            Avoids cone-shaped area effects on a <see cref="!:WoWUnit"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="canRun"></param>
            <param name="objectSelector">Selects the <see cref="!:WoWUnit"/></param>
            <param name="leashPointProducer"></param>
            <param name="leashRadius"></param>
            <param name="rotationDegrees">Rotation in degrees that's relative to the <see cref="!:WoWUnit"/>'s rotaton</param>
            <param name="radius">the radius of the cone</param>
            <param name="arcDegrees">the arc of the cone in degrees</param>
            <param name="locationProducer">Selects the location to avoid. This is the apex of the cone</param>
            <param name="ignoreIfBlocking"></param>
            <param name="priority"></param>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents">
            <summary>Provides events for common situations in the bot.</summary>
        </member>
        <member name="M:ff14bot.NeoProfile.BotEvents.PulseEvents">
            <summary>Pulse events.</summary>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.BotStartStopRequestEventArgs">
            <summary>
            Represents event args for the <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStartRequested"/> and <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStopRequested"/> events.
            </summary>
        </member>
        <member name="P:ff14bot.NeoProfile.BotEvents.BotStartStopRequestEventArgs.Cancel">
            <summary>
            Gets or sets a bool that indicates whether this stop should be canceled.
            </summary>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.OnBotStartDelegate">
            <summary>The bot start delegate event.</summary>
            <param name="args">Event information to send to registered event handlers.</param>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.OnBotStartRequested">
            <summary>
            Fired right before the bot is started.
            <para>Only use this event to signal that a 'Start' should be canceled. In general, use the <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStarted"/> event.</para>
            </summary>
            <remarks>
            <para>This is fired from the thread that invoked the <see cref="M:ff14bot.TreeRoot.Start"/> call.</para>
            <para>To cancel the start, set the <see cref="P:ff14bot.NeoProfile.BotEvents.BotStartStopRequestEventArgs.Cancel"/> property to true.</para>
            <para>No initialization should be done from subscribers to this event, as it is impossible to know if the bot will be started, because another subscriber might cancel the start.</para>
            <para>For initialization, see <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStarted"/>.</para>
            </remarks>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.PreBotStarting">
            <summary>Fired right before the bot begins starting.</summary>
            <remarks>
            <para>This is fired from the thread that invoked the <see cref="M:ff14bot.TreeRoot.Start"/> call.</para>
            <para>The current bot can be changed from this event and it will take effect on this start up.</para>
            </remarks>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.OnBotStarted">
            <summary>Fired right after the bot has started.
            <para>This is fired from the bot thread, before any logic starts executing.</para></summary>
        </member>
        <member name="M:ff14bot.NeoProfile.BotEvents.InvokeStartOrStopEvent(ff14bot.NeoProfile.BotEvents.OnBotStartStopRequestedDelegate,System.String)">
            <summary>
            Invokes the start or stop event. Returns true if the start/stop should be completed, and false if it was canceled.
            </summary>
            <param name="del"></param>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.NeoProfile.BotEvents.FireBotStartRequested">
            <summary>
            Fires the <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStartRequested"/> event.
            </summary>
            <returns>True if the bot should proceed with starting; otherwise false.</returns>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.OnBotStopRequested">
            <summary>
            Fired when a bot stop is requested.
            <para>Only use this event to signal that a 'Stop' should be canceled. In general use the <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStopped"/> event.</para>
            </summary>
            <remarks>
            <para>This is fired from the thread that invoked the <see cref="M:ff14bot.TreeRoot.Stop(System.String)"/> call.</para>
            <para>To cancel the stop, a subscriber can set <see cref="P:ff14bot.NeoProfile.BotEvents.BotStartStopRequestEventArgs.Cancel"/> to false.</para>
            <para>No cleanup should be done in this event, as it is impossible to know whether the stop will go through, because a following subscriber might cancel the stop.</para>
            </remarks>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.OnBotStopDelegate">
            <summary>The bot stop delegate event.</summary>
            <param name="args">Event information to send to registered event handlers.</param>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.OnBotStopped">
            <summary>
            Fired right after the bot has been stopped.
            <para>This is fired from the bot thread, before the thread exits.</para>
            </summary>
        </member>
        <member name="M:ff14bot.NeoProfile.BotEvents.FireBotStopRequested">
            <summary>
            Fires the <see cref="E:ff14bot.NeoProfile.BotEvents.OnBotStopRequested"/> event.
            </summary>
            <returns>True if the bot should proceed with stopping; otherwise false.</returns>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.BotChangedEventArgs">
            <summary>Additional information for bottom changed events.</summary>
        </member>
        <member name="P:ff14bot.NeoProfile.BotEvents.BotChangedEventArgs.OldBot">
            <summary>Gets the old bottom.</summary>
            <value>The old bottom.</value>
        </member>
        <member name="P:ff14bot.NeoProfile.BotEvents.BotChangedEventArgs.NewBot">
            <summary>Gets the new bottom.</summary>
            <value>The new bottom.</value>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.OnBotChangedDelegate">
            <summary>Raises the bottom changed event.</summary>
            <param name="args">Event information to send to registered event handlers.</param>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.OnBotChanged">
            <summary>Fired when the current bot is changed with the usage of TreeRoot.SetCurrent.</summary>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.OnPulse">
            <summary>Fired on every bot pulse if bot events are enabled.</summary>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.NeoProfile">
            <summary>A profile.</summary>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.NeoProfile.NewProfileLoadedEventArgs">
            <summary>Additional information for new profile loaded events.</summary>
        </member>
        <member name="F:ff14bot.NeoProfile.BotEvents.NeoProfile.NewProfileLoadedEventArgs.OldProfile">
            <summary>The old profile.</summary>
        </member>
        <member name="F:ff14bot.NeoProfile.BotEvents.NeoProfile.NewProfileLoadedEventArgs.NewProfile">
            <summary>The new profile.</summary>
        </member>
        <member name="T:ff14bot.NeoProfile.BotEvents.NeoProfile.NewProfileLoadedDelegate">
            <summary>Creates a new profile loaded delegate.</summary>
            <param name="args">New profile loaded event information.</param>
        </member>
        <member name="E:ff14bot.NeoProfile.BotEvents.NeoProfile.OnNewProfileLoaded">
            <summary>Fired when a new outer profile is loaded. That means when the actual .xml file
            changes.</summary>
        </member>
        <member name="T:ff14bot.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:ff14bot.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:ff14bot.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="M:ff14bot.Behavior.BrainBehavior.CreateBrain">
            <summary> Creates the brain logic used by all bots etc. </summary>
            <returns></returns>
            <remarks>Created 2012-06-25</remarks>
        </member>
        <member name="P:ff14bot.Behavior.BrainBehavior.CombatLogic">
            <summary>
            Composite that calls Heal,CombatBuff, and then Combat behaviors in that order
            </summary>
        </member>
        <member name="M:ff14bot.Behavior.BrainBehavior.GetAetherytes">
            <summary>
            Returns the aetheryte id we should teleport to
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveTo(ff14bot.Behavior.ValueRetriever{Clio.Utilities.Vector3},System.String,TreeSharp.Composite,ff14bot.Behavior.ValueRetriever{System.TimeSpan})">
            <summary>
            Creates a behavior to move the current character to the specified location. This will always return <see cref="F:TreeSharp.RunStatus.Success"/>.
            </summary>
            <param name="location">The location.</param>
            <param name="destination">The destination name.</param>
            <param name="onFailed">A composite to run if path generation fails.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <remarks>Created 3/11/2012.</remarks>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveTo(ff14bot.Behavior.ValueRetriever{Clio.Utilities.Vector3},ff14bot.Behavior.ValueRetriever{System.String},TreeSharp.Composite,ff14bot.Behavior.ValueRetriever{System.TimeSpan})">
            <summary>
            Creates a behavior to move the current character to the specified location. This will always return <see cref="F:TreeSharp.RunStatus.Success"/>.
            </summary>
            <param name="location">The location.</param>
            <param name="destination">The destination name.</param>
            <param name="onFailed">A composite to run if path generation fails.</param>
            <param name="timeout">The timeout.</param>
            <returns></returns>
            <remarks>Created 3/11/2012.</remarks>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveAndStop(ff14bot.Behavior.ValueRetriever{Clio.Utilities.Vector3},System.Single,System.Boolean,System.String,TreeSharp.RunStatus)">
            <summary> Creates a behavior to move the current character to the specified location, and stop when within the specified range. </summary>
            <remarks> Created 3/11/2012. </remarks>
            <param name="location"> The location. </param>
            <param name="range"> The range. </param>
            <param name="stopInRange">Whether to stop when within the specified range.</param>
            <param name="destinationName"> </param>
            <param name="stopStatus">If you are using this within a Sequence, you may want to change this to Success. </param>
            <returns> . </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveAndStop(ff14bot.Behavior.ValueRetriever{Clio.Utilities.Vector3},ff14bot.Behavior.ValueRetriever{System.Single},System.Boolean,System.String,TreeSharp.RunStatus)">
            <summary> Creates a behavior to move the current character to the specified location, and stop when within the specified range. </summary>
            <remarks> Created 3/11/2012. </remarks>
            <param name="location"> The location. </param>
            <param name="range"> The range. </param>
            <param name="stopInRange">Whether to stop when within the specified range.</param>
            <param name="destinationName"> </param>
            <param name="stopStatus">If you are using this within a Sequence, you may want to change this to Success. </param>
            <returns> . </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveAndStop(ff14bot.Behavior.ValueRetriever{Clio.Utilities.Vector3},ff14bot.Behavior.ValueRetriever{System.Single},System.Boolean,ff14bot.Behavior.ValueRetriever{System.String},TreeSharp.RunStatus)">
            <summary> Creates a behavior to move the current character to the specified location, and stop when within the specified range. </summary>
            <remarks> Created 3/11/2012. </remarks>
            <param name="location"> The location. </param>
            <param name="range"> The range. </param>
            <param name="stopInRange">Whether to stop when within the specified range.</param>
            <param name="destinationName"> </param>
            <param name="stopStatus">If you are using this within a Sequence, you may want to change this to Success. </param>
            <returns> . </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveStop">
            <summary> Creates a behavior to force all movement to stop for the current character. This will always return <see cref="F:TreeSharp.RunStatus.Success"/>. </summary>
            <remarks> Created 3/11/2012. </remarks>
            <returns> . </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.CreateSprintBehavior">
            <summary>Creates mount behavior.</summary>
            <remarks>superreeen, 05.07.2013.</remarks>
            <returns>The new mount behavior.</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.CreateMountBehavior">
            <summary>Creates mount behavior.</summary>
            <remarks>superreeen, 05.07.2013.</remarks>
            <returns>The new mount behavior.</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.CreateTeleportBehavior(ff14bot.Behavior.ValueRetriever{System.UInt32},ff14bot.Behavior.ValueRetriever{System.UInt32})">
            <summary>Creates teleport behavior.</summary>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.CreateTeleportBehavior(ff14bot.Behavior.ValueRetriever{System.UInt32})">
            <summary>Creates teleport behavior.</summary>
        </member>
        <member name="M:ff14bot.Behavior.CommonBehaviors.MoveToLos(ff14bot.Behavior.ValueRetriever{ff14bot.Objects.GameObject},System.Boolean)">
            <summary> Creates a behavior to move the curreint character to line of sight with the specified character, and optionally stop when within LOS of the character.</summary>
            <remarks> Created 3/11/2012. </remarks>
            <param name="unit"> The unit. </param>
            <param name="stopInLos"> (optional) the stop in range. </param>
            <returns> . </returns>
        </member>
        <member name="T:ff14bot.Behavior.CommonTasks">
            <summary>
            Class that houses several functions useful to 3rd-party developers
            </summary>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.ExecuteCoroutine(TreeSharp.Composite,System.Object)">
            <summary>
            Executes the composite inside a coroutine.
            </summary>
            <param name="composite"></param>
            <param name="context"></param>
            <returns><c>true</c> if the composite finished with <see cref="F:TreeSharp.RunStatus.Success"/>; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.CloseTradeWindows">
            <summary>
            Checks the status of the global settings for handling trade windows and the closes and blacklists players based on those settings
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.Return">
            <summary>
            Attempts to use the return command to return to the players home point
            </summary>
            <returns>true if return finished, false otherwise</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.Teleport(System.UInt32)">
            <summary>
            Attempts to teleport to the provided aetheryte
            </summary>
            <param name="aetheryteId">id of the aetheryte to teleport to</param>
            <returns>true if teleport finished, false otherwise</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.MoveTo(Clio.Utilities.Vector3,System.String)">
            <summary>Moves to a location.</summary>
            <param name="destination">The destination.</param>
            <param name="destinationName">The location name to show in log.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.MoveTo(ff14bot.Pathing.MoveToParameters,System.String)">
            <summary>Moves to a location.</summary>
            <param name="parameters">The parameters.</param>
            <param name="destinationName">The location name to show in the log.</param>
            <returns>The result.</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.StopMoving(System.String)">
            <summary>Executes a MoveStop command if moving and waits for movement to stop</summary>
            <param name="reason">The reason.</param>
            <returns><c>true</c> if any action was taken; <c>false</c> otherwise. </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.StopAndDismount">
            <summary>
            Stops the player from moving and dismounts.
            Function 'sleeps' for the proper amount of time after stopping or dismounting
            If player is already stopped and dismounting the function does not sleep
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.MountUp">
            <summary>
            Attempts to mountup
            </summary>
            <returns>true if we are mounted, false otherwise</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.MountUp(System.UInt32)">
            <summary>
            Attempts to mountup
            </summary>
            <param name="mountid">id of the mount to use</param>
            <returns>true if we are mounted, false otherwise</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.SummonFlyingMount">
            <summary>
            Attempts to mount up
            If the current mount cannot fly, will dismount and mount the black chocobo.</summary>
            <returns>true if we were able to mount up</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.TakeOff">
            <summary>
            Attempts to mount up and take off
            If the current mount cannot fly, will dismount and mount the black chocobo.
            </summary>
            <returns>False if we couldn't take off, true if MovementManager.IsFlying is true </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.AscendTo(System.Single)">
            <summary>
            Attempts to fly vertically up to height
            Does a raycast before doing anything to see if there is something in our way
            </summary>
            <param name="height">Height to fly up to</param>
            <returns>
            returns a flag with various states 
            </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.DescendTo(System.Single)">
            <summary>
            Attempts to descend vertically to a given height
            Does a raycast before doing anything to see if there is something in our way
            </summary>
            <param name="height">Height to descend to</param>
            <returns>
            returns a flag with various states 
            </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.CanLand">
            <summary>
            Attempts to find if we can land by descending straight down from the current point
            </summary>
            <returns>
            CanLandResult.Yes = If we descend from our current position we will land in a location where we can dismount
            CanLandResult.No = If we descend from our current position we will NOT land in a location where we can dismount
            CanLandResult.Maybe = We are too far above ground to be able to tell if we can land
            </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.CanLand(Clio.Utilities.Vector3)">
            <summary>
            Attempts to find if we can land by descending straight down from a given location
            Providing a vector that is more then 100yards away in 3d space will always return maybe as after that point the results were unreliable.
            </summary>
            <param name="pointInAir"></param>
            <returns>
            CanLandResult.Yes = If we descend from pointInAir we will land in a location where we can dismount
            CanLandResult.No = If we descend from pointInAir we will NOT land in a location where we can dismount
            CanLandResult.Maybe = Our raycast was limited in resolution, and as such the provided point was too far away or we were too far above ground
            </returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.Land">
            <summary>
            Attempts to descend all the way until we land. 
            Currently does not implement any advanced logic to ensure that we are currently over someplace that we can actually dismount
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.GetDesynthesisChance(ff14bot.Managers.BagSlot)">
            <summary>
            Gets the chance to succesfully desynthesize an item 
            Leaves the <see cref="T:ff14bot.RemoteWindows.SalvageDialog"/> window open after completion
            </summary>
            <param name="slot"></param>
            <returns>float.MinValue if something went wrong</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.Desynthesize(ff14bot.Managers.BagSlot,System.Int32)">
            <summary>
            Attempts to desyntheize the item at the given bagslot
            </summary>
            <param name="slot"></param>
            <param name="delay">How long to wait in milliseconds after pressing the desyntheize button</param>
            <returns>Success if the bagslot was desynthzied, otherwise failure. Success is returned even if the desynthesis was botched.</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.HandOverRequestedItems(System.Boolean)">
            <summary>
            Function attempts to hand over all the items requested by the open request dialog
            Will attempt to use HQ items if no NQ of the requested item is available by default
            </summary>
            <param name="useHQifNoNQ">if false, fail instead of using </param>
            <exception cref="T:System.InvalidOperationException">Thrown when we don't have the required amount of a requested item</exception> 
            <returns>returns true if we handed everything over, false if the window wasn't open</returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.SellItem(ff14bot.Managers.BagSlot,System.Int32)">
            <summary>
            Coroutine that attempts to sell the item to the currently open vendor
            </summary>
            <param name="bagslot">Bagslot to vendor</param>
            <param name="delay">How long should we wait for selectyesno and for the slot to become empty, in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.AetherialReduction(ff14bot.Managers.BagSlot)">
            <summary>
            Coroutine that attempts to use aetherial reduction on the supplied item
            </summary>
            <param name="bagslot">Bagslot to reduce</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CommonTasks.ConvertToMateria(ff14bot.Managers.BagSlot,System.Int32)">
            <summary>
            Coroutine that will attempt to convert an item to materia.
            </summary>
            <param name="bagslot">Slot that contains the item to convert</param>
            <param name="sleepDuration">How long to sleep after clicking yes in milliseconds.</param>
            <returns>
            Returns CannotSpiritbond if slot is not valid or item is not convertible
            Returns SpiritbondNotComplete if bagslot spiritbond percent is less than 100
            Returns Failure if we attempted to convert the item but something went wrong
            Returns Success otherwise
            </returns>
        </member>
        <member name="T:ff14bot.Behavior.CoroutineTask">
            <summary>
            Represents a coroutine task that can be derived from to implement coroutine parts with state. This class is awaitable.
            </summary>
            <example></example>
        </member>
        <member name="M:ff14bot.Behavior.CoroutineTask.Run">
            <summary>
            Provides the body of this coroutine task.
            </summary>
        </member>
        <member name="M:ff14bot.Behavior.CoroutineTask.GetAwaiter">
            <summary>
            Gets the awaiter for this coroutine task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Behavior.CoroutineTask`1">
            <summary>
            Represents a coroutine task that returns a value and that can be derived from to implement coroutine parts with state. This class is awaitable.
            </summary>
            <example></example>
        </member>
        <member name="M:ff14bot.Behavior.CoroutineTask`1.Run">
            <summary>
            Provides the body of this coroutine task.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Behavior.CoroutineTask`1.GetAwaiter">
            <summary>
            Gets the awaiter for this coroutine task.
            </summary>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Behavior.ThrottlePasses">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              will be run within a given time span.  Returns cappedStatus if limit reached, otherwise
              Returns result of child
            </summary>
            <remarks>
              Created 10/28/2012.
            </remarks>
        </member>
        <member name="P:ff14bot.Behavior.ThrottlePasses.TimeFrame">
            <summary>
            time span that Limit child Successes can occur
            </summary>
        </member>
        <member name="P:ff14bot.Behavior.ThrottlePasses.Limit">
            <summary>
            maximum number of child Successes that can occur within TimeFrame
            </summary>
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.#ctor(System.Int32,System.TimeSpan,TreeSharp.RunStatus,TreeSharp.Composite)">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              will be run within a given time span.  Returns cappedStatus for attempts after limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "limit">max number of occurrences</param>
            <param name = "timeFrame">time span for occurrences</param>
            <param name="limitStatus">RunStatus to return when limit reached</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.#ctor(System.TimeSpan,TreeSharp.Composite)">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              to running once within a given time span.  Returns Failure if attempted to run after
              limit reached in timeframe, otherwise returns result of child
            </summary>
            <param name = "timeFrame">wait TimeSpan after child success before another attempt</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.#ctor(System.Int32,System.Int32,TreeSharp.Composite)">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              will be run within a given time span.  Returns Failure for attempts after limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "Limit">max number of occurrences</param>
            <param name = "timeSeconds">time span for occurrences in seconds</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.#ctor(System.Int32,System.TimeSpan,TreeSharp.Composite)">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              will be run within a given time span.  Returns Failure for attempts after limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "Limit">max number of occurrences</param>
            <param name = "ts">time span for occurrences in seconds</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.#ctor(System.Int32,TreeSharp.Composite)">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              will be run within a given time span.  Returns Failure if limit reached, otherwise
              Returns result of child
            </summary>
            <param name = "timeSeconds">time span for occurrences in seconds</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.Start(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.Stop(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Behavior.ThrottlePasses.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Behavior.Throttle">
            <summary>
              Implements a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success within a given time span.  Returns cappedStatus if limit reached, 
              otherwise returns result of child
            </summary>
            <remarks>
              Created 10/28/2012.
            </remarks>
        </member>
        <member name="P:ff14bot.Behavior.Throttle.TimeFrame">
            <summary>
            time span that Limit child Successes can occur
            </summary>
        </member>
        <member name="P:ff14bot.Behavior.Throttle.Limit">
            <summary>
            maximum number of child Successes that can occur within TimeFrame
            </summary>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.#ctor(System.Int32,System.TimeSpan,TreeSharp.RunStatus,TreeSharp.Composite)">
            <summary>
              Creates a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success within a given time span.  Returns cappedStatus if limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "limit">max number of occurrences</param>
            <param name = "timeFrame">time span for occurrences</param>
            <param name="limitStatus">RunStatus to return when limit reached</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.#ctor(System.TimeSpan,TreeSharp.Composite)">
            <summary>
              Creates a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success within a given time span.  Returns Failure if limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "timeFrame">time span for occurrences</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.#ctor(System.Int32,System.TimeSpan,TreeSharp.Composite)">
            <summary>
              Creates a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success within a given time span.  Returns Failure if limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "Limit">max number of occurrences</param>
            <param name = "timeFrame">time span for occurrences</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.#ctor(System.Int32,System.Int32,TreeSharp.Composite)">
            <summary>
              Creates a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success within a given time span.  Returns Failure if limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "Limit">max number of occurrences</param>
            <param name = "timeSeconds">time span for occurrences in seconds</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.#ctor(System.Int32,TreeSharp.Composite)">
            <summary>
              Creates a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success within a given time span.  Returns Failure if limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "timeSeconds">wait in seconds after child success before another attempt</param>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.#ctor(TreeSharp.Composite)">
            <summary>
              Creates a 'throttle' composite. This composite limits the number of times the child 
              returns RunStatus.Success to once per 250ms.  Returns Failure if limit reached, 
              otherwise returns result of child
            </summary>
            <param name = "child">composite children to tick (run)</param>
        </member>
        <member name="M:ff14bot.Behavior.Throttle.Start(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Behavior.Throttle.Stop(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Behavior.Throttle.Execute(System.Object)">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Behavior.HookExecutor">
            <summary>A simple Action composite, to facilitate executing TreeHook composites. It is not recommended you use this for
            		 any built-in hooks. Only use this if using a custom hook location!</summary>
            <remarks>Created 3/22/2011.</remarks>
        </member>
        <member name="M:ff14bot.Behavior.HookExecutor.#ctor(System.String,System.String,TreeSharp.Composite)">
            <summary>Constructor.</summary>
            <remarks>Created 3/22/2011.</remarks>
            <param name="location">The location of the hook.</param>
            <param name="description">A meaningful description for this hook location.</param>
            <param name="defaultComposite"></param>
        </member>
        <member name="T:ff14bot.Behavior.TreeHooks">
            <summary>A simplistic class to facilitate hooking into logic trees.</summary>
            <remarks>Created 3/22/2011.</remarks>
        </member>
        <member name="M:ff14bot.Behavior.TreeHooks.AddHook(System.String,TreeSharp.Composite)">
            <summary>Inserts a hook at the specified location. This appends the behavior to the end of the list.</summary>
            <remarks>Created 3/9/2011.</remarks>
            <param name="location">The location.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:ff14bot.Behavior.TreeHooks.InsertHook(System.String,System.Int32,TreeSharp.Composite)">
            <summary>Inserts a hook at the specified location. This inserts the behavior to the specified index in the hook list.</summary>
            <remarks>Created 3/9/2011.</remarks>
            <param name="location">The location.</param>
            <param name="index"> </param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="M:ff14bot.Behavior.TreeHooks.RemoveHook(System.String,TreeSharp.Composite)">
            <summary> Removes a hook at the specified location. </summary>
            <remarks> Created 1/28/2012. </remarks>
            <param name="location"> The location. </param>
            <param name="behavior"> The behavior. </param>
        </member>
        <member name="M:ff14bot.Behavior.TreeHooks.ClearHook(System.String)">
            <summary> Removes all hooks at the specified location. </summary>
            <param name="location"> The location. </param>
        </member>
        <member name="M:ff14bot.Behavior.TreeHooks.ReplaceHook(System.String,TreeSharp.Composite)">
            <summary>Replaces all hooks at the specified location, with one that you provide.</summary>
            <remarks>Created 3/9/2011.</remarks>
            <param name="location">The location.</param>
            <param name="behavior">The behavior.</param>
        </member>
        <member name="E:ff14bot.Behavior.TreeHooks.OnHooksCleared">
            <summary> Event queue for all listeners interested in OnHooksCleared events. </summary>
        </member>
        <member name="M:ff14bot.Behavior.TreeHooks.GetHookComposite(System.String)">
            <summary>Gets a hook composite. Returns an empty PrioritySelector if no children are valid. WILL NEVER RETURN NULL.</summary>
            <remarks>Created 3/21/2011.</remarks>
            <param name="location">The location.</param>
            <returns>The hook composite.</returns>
        </member>
        <member name="E:ff14bot.TreeRoot.OnStart">
            <summary> Event queue for all listeners interested in OnStart events. </summary>
        </member>
        <member name="E:ff14bot.TreeRoot.OnStop">
            <summary> Event queue for all listeners interested in OnStop events. </summary>
        </member>
        <member name="M:ff14bot.TreeRoot.Stop(System.String)">
            <summary>
            Sets the mainbot thread to stop executing.
            </summary>
            <param name="reason"></param>
        </member>
        <member name="T:ff14bot.CharacterManagement.AutoEquipper">
            <summary>
            Represents a class that implements operations to auto equip items for the current character.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:ff14bot.CharacterManagement.AutoEquipper.TargetCheckTime">
            <summary>
            Gets or sets the target time, in milliseconds, of the AutoEquip item check. AutoEquip will run through all bag items over a period of this time.
            </summary>
            <remarks>
            This is also, in most cases, the maximum time it will take for a new item to be considered for equipping.
            </remarks>
        </member>
        <member name="P:ff14bot.CharacterManagement.AutoEquipper.DisregardTime">
            <summary>
            Gets or sets the "disregard" time, in milliseconds, of the AutoEquip item check. AutoEquip will automatically recheck an item after it has not been checked for this period of time.
            </summary>
        </member>
        <member name="T:ff14bot.NeoProfiles.ConditionParser">
            <summary>
            Used by orderbot profiles to parse xml attributes
            </summary>
        </member>
        <member name="M:ff14bot.NeoProfiles.ConditionParser.HasAtLeastOneQuest(System.Int32[])">
            <summary>
            Returns true if the user has atleast one of the quests in the list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.NeoProfiles.ConditionParser.HasAtLeastOneDailyQuestCompleted(System.Int32[])">
            <summary>
            Returns true if the user has atleast one of the quests in the list.
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.NeoProfiles.ConditionParser.IsTodoChecked(System.Int32,System.Int32,System.Int32)">
            <summary>Checks if the quest step has proggressed past the provided step or that the objective at the given index has been completed. </summary>
            <param name="questId">global quest id</param>
            <param name="step"></param>
            <param name="objectiveIndex">Starts at 0</param>
            <returns>true if objective is completed.</returns>
        </member>
        <member name="T:ff14bot.NeoProfiles.GameEvents">
            <summary> Game events. </summary>
            <remarks> Nesox, 2013-01-08. </remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.GameEvents.#cctor">
            <summary> Static constructor. </summary>
            <remarks> Nesox, 2013-01-08. </remarks>
        </member>
        <member name="E:ff14bot.NeoProfiles.GameEvents.OnPlayerDied">
            <summary>
            Occurs when [player dies].
            </summary>
            <remarks>Created 2012-06-16</remarks>
        </member>
        <member name="E:ff14bot.NeoProfiles.GameEvents.OnLevelUp">
            <summary>
            Occurs when [player level up].
            </summary>
            <remarks>Created 2012-05-07</remarks>
        </member>
        <member name="E:ff14bot.NeoProfiles.GameEvents.OnClassChanged">
            <summary>
            Occurs when [player level up].
            </summary>
            <remarks>Created 2012-05-07</remarks>
        </member>
        <member name="E:ff14bot.NeoProfiles.GameEvents.OnMapChanged">
            <summary>
            Occurs when [player changes world].
            </summary>
            <remarks>Created 2012-05-07</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.GameEvents.LoadEventCheckers(System.Type)">
            <summary>
            Recursively loads all event checkers from a type (if it's a class), including nested classes.
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:ff14bot.NeoProfiles.GameEvents.Update">
            <summary>
            Updates this instance.
            </summary>
            <remarks>Created 2012-05-05</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.GrindArea.RequirementsMet">
            <summary>
            Checks if requierments are met for this grindarea.
            </summary>
            <returns></returns>
            <remarks>Created by Nesox 2012-02-04</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.GrindArea.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ff14bot.NeoProfiles.HotspotManager.Clear">
            <summary>
            Clear the last selected hotspot, shouldn't be used in most cases.
            </summary>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfile.Path">
            <summary>
            The full path to the XML file, or null if it was not loaded from file.
            </summary>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfile.BehaviorDirectory">
            <summary> Gets or sets the name. </summary>
            <value> The name. </value>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfile.Name">
            <summary> Gets or sets the name. </summary>
            <value> The name. </value>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfile.Order">
            <summary> Gets or sets the order. </summary>
            <value> The order. </value>
        </member>
        <member name="M:ff14bot.NeoProfiles.NeoProfile.Load(System.String)">
            <summary>
            Loads a new <see cref="T:ff14bot.NeoProfiles.NeoProfile"/> instance from a path.
            </summary>
            <param name="path"></param>
            <exception cref="T:System.IO.FileNotFoundException">Thrown when there exists no file at <see cref="P:ff14bot.NeoProfiles.NeoProfile.Path"/>.</exception>
            <exception cref="T:System.Xml.XmlException">Thrown if the XML file at <see cref="P:ff14bot.NeoProfiles.NeoProfile.Path"/> is not valid XML.</exception>
        </member>
        <member name="M:ff14bot.NeoProfiles.NeoProfile.Load(System.Xml.Linq.XElement,System.String)">
            <summary>
            Loads a new <see cref="T:ff14bot.NeoProfiles.NeoProfile"/> instance from an element.
            </summary>
            <param name="element">The element.</param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfileManager.CurrentProfile">
            <summary> Gets or sets the current profile being used by the bot. </summary>
            <value> The current. </value>
        </member>
        <member name="M:ff14bot.NeoProfiles.NeoProfileManager.UpdateGrindArea">
            <summary> Updates the grind area. </summary>
            <remarks> Nesox, 2013-07-03. </remarks>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfileManager.CurrentGrindArea">
            <summary> Gets the current grind area being used by the bot. </summary>
            <value> The current grind area. </value>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfileManager.OrderManager">
            <summary>
            Gets the order manager.
            </summary>
            <remarks>Created 2012-04-12</remarks>
        </member>
        <member name="P:ff14bot.NeoProfiles.NeoProfileManager.CurrentProfileBehavior">
            <summary>
            Gets the current profile behavior.
            </summary>
            <remarks>Created 2012-04-12</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.NeoProfileManager.UpdateCurrentProfileBehavior">
            <summary>
            Updates the current profile behavior.
            </summary>
            <remarks>Created 2012-04-12</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.NeoProfileManager.Load(System.String,System.Boolean)">
            <summary>
            Loads a profile from the specified path.
            </summary>
            <param name="profilePath">The profile path.</param>
            <param name="rememberPath"> </param>
            <remarks>Created 2012-04-12</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.LogError(System.String,System.Object[])">
            <summary>
            Logs an error then stops the bot
            </summary>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.LogSoftError(System.String,System.Object[])">
            <summary>
            Logs an error
            </summary>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="P:ff14bot.NeoProfiles.ProfileBehavior.IsDone">
            <summary> Gets a value indicating whether this profile behavior is done. </summary>
            <value>
              <c>true</c> if this profile behavior is done; otherwise, <c>false</c>.
            </value>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="P:ff14bot.NeoProfiles.ProfileBehavior.StatusText">
            <summary> Gets or sets the status text. </summary>
            <value> The status text. </value>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="P:ff14bot.NeoProfiles.ProfileBehavior.IsDoneCache">
            <summary> Gets a value indicating whether this instance has a cached done. </summary>
            <value>
            	<c>true</c> if this instance has cached done; otherwise, <c>false</c>.
            </value>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="P:ff14bot.NeoProfiles.ProfileBehavior.Behavior">
            <summary> Gets the behavior. </summary>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.Start">
            <summary> Called when [start]. </summary>
            <remarks>Created 2012-06-18</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.Done">
            <summary> Called when [done]. </summary>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.ResetCachedDone">
            <summary> Resets the cached done. </summary>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.CreateBehavior">
            <summary> Creates the behavior. </summary>
            <returns> The new behavior. </returns>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.UpdateBehavior">
            <summary> Updates the behavior. </summary>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.ToString">
            <summary> Returns a string that represents the current object. </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.Equals(ff14bot.NeoProfiles.ProfileBehavior)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.op_Equality(ff14bot.NeoProfiles.ProfileBehavior,ff14bot.NeoProfiles.ProfileBehavior)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileBehavior.op_Inequality(ff14bot.NeoProfiles.ProfileBehavior,ff14bot.NeoProfiles.ProfileBehavior)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
            <remarks>Created 2012-07-02</remarks>
        </member>
        <member name="T:ff14bot.NeoProfiles.ProfileOrderManager">
            <summary>
            Handles loading etc. of the profile order
            </summary>
            <remarks>Created 2012-06-27</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileOrderManager.#ctor(System.Collections.Generic.List{ff14bot.NeoProfiles.ProfileBehavior})">
            <summary>
            Initializes a new instance of the <see cref="T:ff14bot.NeoProfiles.ProfileOrderManager"/> class.
            </summary>
            <param name="behaviors">The behaviors.</param>
            <remarks>Created 2012-06-27</remarks>
        </member>
        <member name="F:ff14bot.NeoProfiles.ProfileOrderManager.CurrentBehavior">
            <summary>
            Gets the current behavior.
            </summary>
            <remarks>Created 2012-06-27</remarks>
        </member>
        <member name="M:ff14bot.NeoProfiles.ProfileOrderManager.UpdateCurrentBehavior">
            <summary>
            Updates the current behavior.
            </summary>
            <remarks>Created 2012-06-27</remarks>
        </member>
        <member name="T:ff14bot.NeoProfiles.Targeting">
            <summary> Targeting. </summary>
            <remarks> Nesox, 2012-09-20. </remarks>
        </member>
        <member name="P:ff14bot.NeoProfiles.Targeting.Provider">
            <summary> Gets or sets the provider. </summary>
            <value> The provider. </value>
        </member>
        <member name="P:ff14bot.NeoProfiles.Targeting.LastEntities">
            <summary> Gets or sets the last objects. </summary>
            <value> The last objects. </value>
        </member>
        <member name="P:ff14bot.NeoProfiles.Targeting.FirstUnit">
            <summary> Gets the first npc. </summary>
            <value> The first npc. </value>
        </member>
        <member name="P:ff14bot.NeoProfiles.Targeting.FirstEntity">
            <summary> Gets the first object. </summary>
            <value> The first object. </value>
        </member>
        <member name="E:ff14bot.NeoProfiles.Targeting.OnUpdate">
            <summary> Event queue for all listeners interested in OnUpdate events. </summary>
        </member>
        <member name="M:ff14bot.NeoProfiles.Targeting.Pulse">
            <summary> Pulses this object. </summary>
        </member>
        <member name="T:ff14bot.NeoProfiles.ITargetingProvider">
            <summary> Interface for targeting provider. </summary>
        </member>
        <member name="M:ff14bot.NeoProfiles.ITargetingProvider.GetObjectsByWeight">
            <summary> Gets the objects by weight. </summary>
            <returns> The objects by weight. </returns>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.ZoneBounds">
            <summary>
            Hits the bounding box for the zone
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.HitBoundaries">
            <summary>
            Hits pretty much everything including the invisible walls you can fly through
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.PassthruBoundaries">
            <summary>
            Ignores walls that you can fly through and zone boundaries
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.Water">
            <summary>
            Water
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.SafetyLedge">
            <summary>
            Ledges that can only be touched when flying is unavailable
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.BlockLanding">
            <summary>
            Triangles with this flag prevent the user from landing on them while flying
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.CanDive">
            <summary>
            Only hits areas where you can dive underwater
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.CanSurface">
            <summary>
            Only hits areas where you surface
            </summary>
        </member>
        <member name="F:ff14bot.Enums.RaycastFlags.DummyIgnore">
            <summary>
            DummyFlag created for RB for when you don't actually want to ignore anything since 0 is a valid flag
            </summary>
        </member>
        <member name="T:ff14bot.Interfaces.IBotPlugin">
            <summary>
            Base interface for plugins, should have not been exposed but too late for that as some plugins inherited it.
            </summary>
        </member>
        <member name="P:ff14bot.Interfaces.IBotPlugin.Author">
            <summary>Name of the user who created the plugin</summary>
        </member>
        <member name="P:ff14bot.Interfaces.IBotPlugin.Version">
            <summary>Version of the plugin</summary>
        </member>
        <member name="P:ff14bot.Interfaces.IBotPlugin.Name">
            <summary>Name of the plugin</summary>
        </member>
        <member name="P:ff14bot.Interfaces.IBotPlugin.Description">
            <summary>Short description about the plugin</summary>
        </member>
        <member name="P:ff14bot.Interfaces.IBotPlugin.WantButton">
            <summary>Should the plugin settings button be enabled</summary>
        </member>
        <member name="P:ff14bot.Interfaces.IBotPlugin.ButtonText">
            <summary>Text of the plugins button</summary>
        </member>
        <member name="M:ff14bot.Interfaces.IBotPlugin.OnButtonPress">
            <summary>Called when the user presses the settings button</summary>
        </member>
        <member name="M:ff14bot.Interfaces.IBotPlugin.OnPulse">
            <summary> Executes the pulse action. This is called every "tick" of the bot. </summary>
        </member>
        <member name="M:ff14bot.Interfaces.IBotPlugin.OnInitialize">
            <summary> Executes the initialize action. This is called at initial bot startup. (When the bot itself is started, not when Start() is called) </summary>
        </member>
        <member name="M:ff14bot.Interfaces.IBotPlugin.OnShutdown">
            <summary> Executes the shutdown action. This is called when the bot is shutting down and when plugins are being reloaded. </summary>
        </member>
        <member name="M:ff14bot.Interfaces.IBotPlugin.OnEnabled">
            <summary> Executes the enabled action. This is called when the user has enabled this specific plugin via the GUI. </summary>
        </member>
        <member name="M:ff14bot.Interfaces.IBotPlugin.OnDisabled">
            <summary> Executes the disabled action. This is called whent he user has disabled this specific plugin via the GUI. </summary>
        </member>
        <member name="M:ff14bot.Interfaces.INavigationProvider.MoveToRandomSpotWithin(Clio.Utilities.Vector3,System.Single,System.String)">
            <summary>
            Move to a random point within radius of location
            </summary>
            <param name="location"></param>
            <param name="radius"></param>
            <param name="destination"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Navigation.GaiaNavigator.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the NeoGaiaNavigator class.
            </summary>
        </member>
        <member name="P:ff14bot.Navigation.HotSpot.Y">
            <summary>
            Gets Y coordinate.
            </summary>
        </member>
        <member name="P:ff14bot.Navigation.HotSpot.Z">
            <summary>
            Gets Z coordinate.
            </summary>
        </member>
        <member name="M:ff14bot.Navigation.HotSpot.ToVector3">
            <summary>
            Toes the vector3.
            </summary>
            <returns></returns>
            <remarks>Created by Nesox 2012-02-04</remarks>
        </member>
        <member name="M:ff14bot.Navigation.HotSpot.WithinHotSpot2D(Clio.Utilities.Vector3,System.Single)">
            <summary>
            checks if location resides in or on a hotspot boundry.
            </summary>
            <param name="loc"></param>
            <param name="distance"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Navigation.BlackSpot.Y">
            <summary>
            Gets Y coordinate.
            </summary>
        </member>
        <member name="P:ff14bot.Navigation.BlackSpot.Z">
            <summary>
            Gets Z coordinate.
            </summary>
        </member>
        <member name="T:ff14bot.Navigation.NavigationProviderChangedEventArgs`1">
            <summary>Additional information for navigator changed events.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="P:ff14bot.Navigation.NavigationProviderChangedEventArgs`1.OldProvider">
            <summary>Gets the old provider.</summary>
            <value>The old provider.</value>
        </member>
        <member name="P:ff14bot.Navigation.NavigationProviderChangedEventArgs`1.NewProvider">
            <summary>Gets the new provider.</summary>
            <value>The new provider.</value>
        </member>
        <member name="P:ff14bot.Navigation.Navigator.NavigationProvider">
            <summary>Gets or sets the navigation provider.</summary>
            <value>The navigation provider.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is <c>null</c>.</exception>
            <remarks>When setting this property, <see cref="M:ff14bot.Pathing.NavigationProvider.OnSetAsCurrent"/> will be called on the new navigation provider, if applicable.
            <para>Similarly, <see cref="M:ff14bot.Pathing.NavigationProvider.OnRemoveAsCurrent"/> will be called on the old navigation provider, if applicable.</para>
            <para>If an exception is thrown in any of these two functions, the state remains unchanged.</para>
            </remarks>
        </member>
        <member name="E:ff14bot.Navigation.Navigator.OnNavigationProviderChanged">
            <summary>Event queue for all listeners interested in OnNavigationProviderChanged events.</summary>
        </member>
        <member name="E:ff14bot.Navigation.Navigator.OnPlayerMoverChanged">
            <summary>Event queue for all listeners interested in OnPlayerMoverChanged events.</summary>
        </member>
        <member name="M:ff14bot.Navigation.Navigator.LookupPathInfo(ff14bot.Objects.GameObject,System.Single)">
            <summary>
            Looks up the information of a path going to an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="distanceTolerance">The distance to get within <paramref name="obj"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null</c>.</exception>
            <returns>The path information. Always non-<c>null</c>.</returns>
            <remarks>Path information lookups are in general extremely fast to perform. They require minimal
            CPU computation.</remarks>
        </member>
        <member name="M:ff14bot.Navigation.Navigator.SamplePointsAsync(ff14bot.Pathing.SamplePointsParameters)">
            <summary>Samples the navigator for points.</summary>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="parameters"/> is in an invalid state.</exception>
            <returns>The result of the sampling. Note that this may return fewer points than requested.</returns>
            <remarks>This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="!:Coroutine.ExternalTask(Func&lt;Task&gt;)"/>.</remarks>
        </member>
        <member name="M:ff14bot.Navigation.Navigator.InPosition(Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.Single)">
            <summary>
            Checks to see if location1 is within range of location2
            Does XZ plane check separately from Y plane to better handle 3D locations
            </summary>
            <param name="location1"></param>
            <param name="location2"></param>
            <param name="range"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Navigation.Navigator.AtLocation(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>Checks if one point is considered to be at another point. This should be used to
            check if the player is near a point.</summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the requested operation is invalid.</exception>
            <param name="point1">.</param>
            <param name="point2">.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:ff14bot.Navigation.Navigator.AtLocation(Clio.Utilities.Vector3)">
            <summary>Checks if the local player is considered to be on top of a point.</summary>
            <param name="point">.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="T:ff14bot.Navigation.NullProvider">
            <summary>
            Navigation provider that is used when no navigation is desired
            </summary>
        </member>
        <member name="M:ff14bot.Navigation.NullProvider.AtLocation(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Navigation.NullProvider.Clear">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Navigation.NullProvider.OnPulse">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Navigation.NullProvider.MoveTo(ff14bot.Pathing.MoveToParameters)">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Navigation.NavGraph">
            <summary>
            Handles the complex navigation required to move around the game world from one zone to another
            </summary>
        </member>
        <member name="M:ff14bot.Navigation.NavGraph.NpcTransportNode.#ctor(System.UInt32,System.UInt32,Clio.Utilities.Vector3,System.UInt16,Clio.Utilities.Vector3,System.UInt16,ff14bot.Navigation.NavGraph.NpcTransportType,System.UInt32,System.UInt32,System.UInt32,System.Func{System.Boolean})">
            <summary>
            
            </summary>
            <param name="npcId"></param>
            <param name="index">Used when a npc has multiple locations it can go to,to allow generation of unique node ids </param>
            <param name="location"></param>
            <param name="zoneid"></param>
            <param name="landingposition"></param>
            <param name="landingzoneid"></param>
            <param name="transportType"></param>
            <param name="selectstringindex"></param>
            <param name="gilcost"></param>
            <param name="transitioncost"></param>
            <param name="active"></param>
        </member>
        <member name="M:ff14bot.Navigation.NavGraph.LogError(System.String,System.Object[])">
            <summary>
            Logs an error then stops the bot
            </summary>
            <param name="text"></param>
            <param name="args"></param>
        </member>
        <member name="T:ff14bot.Windows.BotSettings.GlobalSettingsWindow">
            <summary>
            Interaction logic for GlobalSettings.xaml
            </summary>
            <summary>
            GlobalSettingsWindow
            </summary>
        </member>
        <member name="M:ff14bot.Windows.BotSettings.GlobalSettingsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.Windows.FateBotSettingsWindow.FateBotSettingsWindow">
            <summary>
            Interaction logic for FateBotSettingsWindow.xaml
            </summary>
            <summary>
            FateBotSettingsWindow
            </summary>
        </member>
        <member name="M:ff14bot.Windows.FateBotSettingsWindow.FateBotSettingsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.Windows.FishBotSettingsWindow.FishBotSettingsWindow">
            <summary>
            Interaction logic for FishBotSettingsWindow.xaml
            </summary>
            <summary>
            FishBotSettingsWindow
            </summary>
        </member>
        <member name="M:ff14bot.Windows.FishBotSettingsWindow.FishBotSettingsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.Windows.OrderBotSettingsWindow.OrderBotSettingsWindow">
            <summary>
            Interaction logic for OrderBotSettingsWindow.xaml
            </summary>
            <summary>
            OrderBotSettingsWindow
            </summary>
        </member>
        <member name="M:ff14bot.Windows.OrderBotSettingsWindow.OrderBotSettingsWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.Forms.ugh.MainWpf">
            <summary>
            Interaction logic for MainWpf.xaml
            </summary>
            <summary>
            MainWpf
            </summary>
        </member>
        <member name="M:ff14bot.Forms.ugh.MainWpf.togglestate(System.Object,System.EventArgs)">
            <summary>
            should be called after operations have completed and state is finalized
            </summary>
            <param name="thing"></param>
            <param name="stuff"></param>
        </member>
        <member name="M:ff14bot.Forms.ugh.MainWpf.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.Objects.Aetheryte">
            <summary>
            Aetherytes and Aethernet objects
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Aetheryte.NpcId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.Aetheryte.IsKnown">
            <summary>
            Returns true if the Aetheryte has already been learned by the player
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Aetheryte.Data">
            <summary>
            Returns the AetheryteResult for a given object
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Aetheryte.Location">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.Aetheryte.OffsetLocation">
            <summary>
            Returns a randomly offset location if its an aetheryte
            </summary>
        </member>
        <member name="M:ff14bot.Objects.Auras.GetAuraStacksById(System.UInt32)">
            <summary>
            Returns the amount of stacks for a given aura id
            </summary>
            <param name="id">aura id to lookup</param>
            <returns>-1 if aura is not present, #of stacks if aura is stackable, undefined otherwise</returns>
        </member>
        <member name="T:ff14bot.Objects.Aura">
            <summary>
            The values within this class are only good for one frame, discard object after that.
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Aura.Name">
            <summary>
            Returns the english name of the aura
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Aura.LocalizedName">
            <summary>
            Returns the name of the aura in the games current locale
            </summary>
        </member>
        <member name="T:ff14bot.Objects.BattleCharacter">
            <summary>
            Battlecharacters are players and npcs that can engage in combat
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.OmenProjectionPtr">
            <summary>
            Omen projection offseted
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.OmenMatrix">
            <summary>
            Omen projection matrix used for aoe attacks that display a omen
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.NpcId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.IsFate">
            <summary>
            Check if the unit is considered part of a fate
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.IsMounted">
            <summary>
            Check if the unit is currently mounted
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.Mount">
            <summary>
            Get the units mount object
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.IsDying">
            <summary>
            Returns true if unit is in a 'downed' state and is unable to be attacked
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.Icon">
            <summary>
            Get the icon next to the players name
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.ElementalLevel">
            <summary>
            Return the ElementalLevel for a unit
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.Element">
            <summary>
            Return the EurekaElement for a unit
            </summary>
        </member>
        <member name="P:ff14bot.Objects.BattleCharacter.EnglishName">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.Character.TaggerObjectId">
            <summary>
            Returns the objectId of the player that tagged the target, if the player is in a party it returns the partyId
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Character.TaggerType">
            <summary>
            Returns 2 if tagger is in a party, 1 if not, 0 if not yet tagged
            </summary>
        </member>
        <member name="P:ff14bot.Objects.Character.Tapped">
            <summary>
            Returns true if target has been tapped
            </summary>
        </member>
        <member name="T:ff14bot.Objects.CraftSpellData">
            <summary>
            Crafting spell data
            </summary>
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.SpellType">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.Icon">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.Cost">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.LevelAcquired">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.Description">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.Job">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.RawCastType">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.EffectRange">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.XAxisModified">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.Omen">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.IsPvP">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.CraftSpellData.IsPlayerAction">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Objects.EmptySpell">
            <summary>
            Dummy spell that is "empty"
            </summary>
        </member>
        <member name="F:ff14bot.Objects.EmptySpell.Instance">
            <summary>
            Static that holds the singularly used copy of emptyspell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.SpellType">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.LevelAcquired">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.Job">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.Range">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.RawCastType">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.EffectRange">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.XAxisModified">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.Omen">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.IsPvP">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.EmptySpell.IsPlayerAction">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Objects.EmptySpell.ToString">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.GameObject.IsFateGone">
            <summary>
            Returns false is target is not a fatemob. Otherwise returns true if mob has fateid and fateid is no longer active.
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GameObject.FateId">
            <summary>
            Returns the ID of the fate the object belongs to. returns 0 if no fate associated.
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GameObject.Heading">
            <summary>
            Returns current heading in radians
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GameObject.NpcId">
            <summary>
            Gets the NPC Id of the game object, NPC Ids are not unique, and represent 
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GameObject.IsWithinInteractRange">
            <summary>
            Checks if the player is within range to interact with a given object
            Tries to be more restrictive so that the server does not reply with out of range
            </summary>
        </member>
        <member name="T:ff14bot.Objects.GatheringPointObject">
            <summary>
            Game objects such as "Mineral Deposit" or "Mature Tree"
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GatheringPointObject.CanGather">
            <summary>
            Gets whether or not the node is visible
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GatheringPointObject.NpcId">
            <inheritdoc />
        </member>
        <member name="P:ff14bot.Objects.GatheringPointObject.Type">
            <summary>
            Gets the Type of the GatheringPointObject
            </summary>
        </member>
        <member name="P:ff14bot.Objects.GatheringPointObject.Level">
            <summary>
            Gets the level of the GatheringPointObject
            </summary>
        </member>
        <member name="T:ff14bot.Objects.HousingObject">
            <summary>
            Game object for most housing objects
            </summary>
        </member>
        <member name="P:ff14bot.Objects.HousingObject.NpcId">
            <inheritdoc />
        </member>
        <member name="T:ff14bot.Objects.Stats">
            <summary>
            Stats from the players stat sheet
            </summary>
        </member>
        <member name="T:ff14bot.Objects.LocalPlayer">
            <summary>
            Local player object
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.IsValid">
            <summary>
            Checks if the player object is valid
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.Pet">
            <summary>
            Gets the players currently active battle pet
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.DesynthesisUnlocked">
            <summary>
            Checks if the player has unlocked Desynthesis
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.AetherialReductionUnlocked">
            <summary>
            Checks if the player has unlocked Aetherial Reduction
            </summary>
        </member>
        <member name="M:ff14bot.Objects.LocalPlayer.GetDesynthesisLevel(ff14bot.Enums.ClassJobType)">
            <summary>
            Gets the Desynthesis level for the provided job
            </summary>
            <param name="job"></param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.GrandCompany">
            <summary>
            Gets the active <see cref="P:ff14bot.Objects.LocalPlayer.GrandCompany"/>
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.HomePoint">
            <summary>
            Gets the aetheryte the player will return to
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.InCombat">
            <summary>
            Checks if the player is currently InCombat
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.HasTarget">
            <summary>
            Checks if the player currently has a target
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.Mount">
            <summary>
            Notimplemented
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.IsLevelSynced">
            <summary>
            Checks if the player is currently level synced
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.Stats">
            <summary>
            Stat array
            </summary>
        </member>
        <member name="M:ff14bot.Objects.LocalPlayer.SetFacing(System.Single)">
            <summary>
            Sets the players rotation
            </summary>
            <param name="rotation">in radians</param>
        </member>
        <member name="M:ff14bot.Objects.LocalPlayer.Face(Clio.Utilities.Vector3)">
            <summary>
            Face the player twoards the given vector
            </summary>
            <param name="position"></param>
        </member>
        <member name="M:ff14bot.Objects.LocalPlayer.Face(ff14bot.Objects.GameObject)">
            <summary>
            Face the player to the passed gameobject
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.Levels">
            <summary>
            Dictionary of current levels for localplayers classes
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.PrimaryTargetPtr">
            <summary>
            Gets the <see cref="T:System.IntPtr"/> of the currently targeted unit
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.CurrentTargetObjId">
            <summary>
            Object id of the current target, 0 if no target
            </summary>
        </member>
        <member name="M:ff14bot.Objects.LocalPlayer.ClearTarget">
            <summary>
            Clears the Active target
            </summary>
        </member>
        <member name="P:ff14bot.Objects.LocalPlayer.CurrentTarget">
            <summary>
            Currently targeted <see cref="T:ff14bot.Objects.GameObject"/>
            </summary>
        </member>
        <member name="T:ff14bot.Objects.SpellData">
            <summary>
                This class houses the information for spells
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Name">
            <summary>
            Returns the english name of the spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.LocalizedName">
            <summary>
            Returns the name of the spell in the games currently selected localization
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.SpellType">
            <summary>
            SpellType of spell Eg, WeaponSkill, Ability, etc
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.BaseCost">
            <summary>
            Returns the mp factor used in calculating the cost
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Cost">
            <summary>
            Returns the cost of the spell at the players current level
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.CostType">
            <summary>
            CostType for the spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.GroundTarget">
            <summary>
            Does the spell need to be cast on the ground
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Affinity">
            <summary>
            Affinity string at the bottom of spells
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.JobTypes">
            <summary>
            All the jobs in the affinity 
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.BaseCastTime">
            <summary>
            This returns how long the base cast time of a spell is.
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.AdjustedCastTime">
            <summary>
            This returns how long it will take the user to cast adjusted by spell haste etc
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Icon">
            <summary>
            Icon id
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.IconImage">
            <summary>
            Gets the icon image
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.ComboSpellId">
            <summary>
            Returns the spellid of the previous spell in its combo
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.BaseCooldown">
            <summary>
            Returns the raw recast for spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.AdjustedCooldown">
            <summary>
            Returns recast for spell adjusted by skill/spell haste
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Cooldown">
            <summary>
            Returns current time left on cooldown
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.MaxCharges">
            <summary>
            Maximum charges for this spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Charges">
            <summary>
            Charges left with the fraction being the percent twoards another charge being ready
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.LevelAcquired">
            <summary>
            Returns level acquired
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Description">
            <summary>
            Used to get the spells description
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Job">
            <summary>
            Job type for the spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Radius">
            <summary>
            Spell radius
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Range">
            <summary>
            Spell range
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.RawCastType">
            <summary>
            Raw cast type
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.EffectRange">
            <summary>
            Effect range
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.XAxisModified">
            <summary>
            X-Axis modifier
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.Omen">
            <summary>
            Omen id
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.IsPvP">
            <summary>
            Spell is a pvp spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellData.IsPlayerAction">
            <summary>
            Spell is considered a player action, general actions are usually false
            </summary>
        </member>
        <member name="M:ff14bot.Objects.SpellData.ToString">
            <summary>
            Dump spell name
            </summary>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Objects.SpellCastInfo">
            <summary>
            Returns information about spellcasting from the parent object
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.CastTime">
            <summary>
            How long the spell takes to cast
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.TargetId">
            <summary>
            The objectid target of the spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.CurrentCastTime">
            <summary>
            Returns how long into the cast the target is
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.ActionType">
            <summary>
            Returns the ActionType of the spell being cast
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.IsCasting">
            <summary>
            Returns true if the target is currently casting
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.RemainingCastTime">
            <summary>
            Returns how long before the current cast is completed
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.CastLocation">
            <summary>
            Returns the location targeted for the casted spell/item. 
            Data persists after the cast has completed.
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.Interruptible">
            <summary>
            Returns true if the interrupt border is present
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.Name">
            <summary>
            Returns the english name of the spell being cast
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.ItemData">
            <summary>
            Gets the ItemData object of the item being used
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.SpellData">
            <summary>
            Gets the SpellData object of the spell being cast
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.IsSpell">
            <summary>
            Returns true if the cast is for a spell
            </summary>
        </member>
        <member name="P:ff14bot.Objects.SpellCastInfo.ActionId">
            <summary>
            Gets the id of the action being cast
            </summary>
        </member>
        <member name="T:ff14bot.RemoteAgents.AgentAetherCurrents">
            <summary>
            Class that handles wraping the AgentAetherCurrents game data
            </summary>
        </member>
        <member name="P:ff14bot.RemoteAgents.AgentAetherCurrents.CompletionBytes">
            <summary>
            Bytes used in the checking if an aether current has been completed
            </summary>
        </member>
        <member name="P:ff14bot.RemoteAgents.AgentDeepDungeonSaveData.GearLevels">
            <summary>
            gear levels
            Aether Arm
            Aether Pool
            </summary>
        </member>
        <member name="P:ff14bot.RemoteAgents.AgentDeepDungeonSaveData.Reset">
            <summary>
            reads if the window is in reset mode
            </summary>
        </member>
        <member name="P:ff14bot.RemoteAgents.AgentSalvage.Ready">
            <summary>
            Returns true if the agent has recevied the information from the server
            </summary>
        </member>
        <member name="P:ff14bot.RemoteAgents.AgentSalvage.SalvageChance">
            <summary>
            Returns chance to salvage, float.MinValue if we haven't receivied the data from the server yet.
            </summary>
        </member>
        <member name="T:ff14bot.RemoteAgents.AgentTripleTriad">
            <summary>
            Class handles interacting with the games AgentTripleTriad
            </summary>
        </member>
        <member name="P:ff14bot.RemoteAgents.AgentTripleTriad.ActiveRules">
            <summary>
            Gets the active rules for the current game
            </summary>
        </member>
        <member name="F:ff14bot.RemoteAgents.AgentTripleTriad.LocalizedChallengeText">
            <summary>
            String that is localized for what needs to be clicked
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.ChocoboRace.RaceChocoboResult">
            <summary>
            Window that is shown when a chocobo race is finished
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.ChocoboRace.RaceChocoboResult.Close">
            <summary>
            Closes the result window leaving the race
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.ChocoboRace.RaceChocoboResult.IsOpen">
            <summary>
            Returns true if the window is open
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.CraftingLog">
            <summary>
            Class for handling interactions with the CraftingLog/RecipeNote window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.CraftingLog.IsOpen">
            <summary>
            Check if the window is currently open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.Close">
            <summary>
            Closes the crafting log
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.SelectClass(System.UInt32)">
            <summary>
            Selects the index for the class selection
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.SelectRecipeRange(System.UInt32)">
            <summary>
            Selects the recipe level range
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.SelectRecipe(System.UInt32)">
            <summary>
            Selects the recipe at the given index
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.SelectSpecialRecipeRange(System.UInt32)">
            <summary>
            Adjusts the special recipe range
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.QuickSynthesize">
            <summary>
            Presses the QuickSynthesize button
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.CraftingLog.Synthesize">
            <summary>
            Presses the Synthesize button
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.DifficultySelectYesNo">
            <summary>
            Difficulty selection menu
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.DifficultySelectYesNo.IsOpen">
            <summary>
            Checks if the window is currently open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.DifficultySelectYesNo.Proceed(System.UInt32)">
            <summary>
            Clicks Proceed, 2 = Very Easy, 1 = Easy, 0 = Normal
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.DifficultySelectYesNo.Leave">
            <summary>
            Clicks Leave
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.GoldSaucer.GoldSaucerInfo">
            <summary>
            GoldSaucerInfo is the main gold saucer window which houses the subwindows for different parts of the gold saucer
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.GoldSaucer.GoldSaucerInfo.IsOpen">
            <summary>
            Checks if the GoldSaucerInfo window is open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.GoldSaucer.GoldSaucerInfo.SelectIndex(System.Int32)">
            <summary>
            Changes the active tab in the gold saucer window
            </summary>
            <param name="index">starting value is one not zero</param>
        </member>
        <member name="P:ff14bot.RemoteWindows.GoldSaucer.GoldSaucerInfo.CurrentIndex">
            <summary>
            Gets the current tab the window has active, returns 0 if window is closed
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.GoldSaucer.GoldSaucerInfo.Close">
            <summary>
            Closes the window
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.GoldSaucer.GSInfoGeneral">
            <summary>
            GSInfoGeneral is sub window on the main page of the gold saucer window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.GoldSaucer.GSInfoGeneral.IsOpen">
            <summary>
            Checks if the GSInfoGeneral window is open
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.GoldSaucer.GSInfoGeneral.DailyAllowancesLeft">
            <summary>
            Returns how many daily cactpot tickets can be purchased, -1 if the window is closed
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.HousingChocoboList.SelectChocobo(System.UInt32)">
            <summary>
            Selects the chocobo at the given slot, we use index-1 cause the list starts at 0 for the first non-Personal chocobo
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.HousingMyChocobo.ClickLineContains(System.String)">
            <summary>
            Clicks the line that contains the supplied text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.HousingMyChocobo.ClickLineEquals(System.String)">
            <summary>
            Clicks the line that equals the supplied text
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:ff14bot.RemoteWindows.InputNumeric">
            <summary>
            Handles interacting with the InputNumeric game window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.InputNumeric.IsOpen">
            <summary>
            Checks if the InputNumeric game window is currently open
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.InputNumeric.Field">
            <summary>
            Get the input field for the window
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.InputNumeric.Ok(System.UInt32)">
            <summary>
            Selects the Ok option
            </summary>
            <param name="value">How much to select</param>
        </member>
        <member name="M:ff14bot.RemoteWindows.InputNumeric.Close">
            <summary>
            Closes the InputNumeric game window
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.LotteryDailyLineSelection">
            <summary>
            What line to select for payout
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.LotteryDaily">
            <summary>
            Interface for interacting with daily cactpot window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.LotteryDaily.IsOpen">
            <summary>
            Checks if the daily cactpot window is open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.LotteryDaily.SetLotteryLane(ff14bot.RemoteWindows.LotteryDailyLineSelection)">
            <summary>
            Selects which prize row should be selected and then confirms that as the one wanted
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.LotteryDaily.Scratch(System.Int32)">
            <summary>
            Scratch off a slot
            </summary>
            <param name="slot">[0-9]</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.LotteryDaily.Close">
            <summary>
            Presses the close button
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.MaterializeDialog.Open(ff14bot.Managers.BagSlot)">
            <summary>
            Attempts to open the window with the provided bagslot.
            </summary>
            <param name="bagSlot"></param>
        </member>
        <member name="T:ff14bot.RemoteWindows.RemoteUIElement">
            <summary>
            Base class that all remote ui elements will inherit
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.RemoteLabel">
            <summary>
            A label field in the ff14 gui
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.RemoteLabel.Text">
            <summary>
            Get the current text for the label
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.RemoteIntegerField">
            <summary>
            Class used by the InputNumeric window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.RemoteIntegerField.CurrentValue">
            <summary>
            Current value of the field
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.RemoteIntegerField.MaxValue">
            <summary>
            Maximum value of the field
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.RemoteIntegerField.MinValue">
            <summary>
            Minimum value of the field
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.RemoteButton">
            <summary>
            A button in the ff14 gui
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.RemoteButton.Label">
            <summary>
            Get the buttons label
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.RemoteButton.Clickable">
            <summary>
            Check if a given button is currently clickable
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.Repair">
            <summary>
            Class for handling interactions with the Repair window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Repair.IsOpen">
            <summary>
            Checks if the window is currently open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Repair.RepairAll">
            <summary>
            Presses the repair all button
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Repair.Close">
            <summary>
            Presses the close button
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.Request">
            <summary>
            Handles interacting with request window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Request.ItemCount">
            <summary>
            How many different kinds items are requested
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Request.RequestedItems">
            <summary>
            Gets the list of requested items
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Request.IsOpen">
            <summary>
            Checks if the window is currently open
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Request.HandOverButtonClickable">
            <summary>
            Checks if the button can be clicked to submit the items
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Request.HandOver">
            <summary>
            Hands the items over
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Request.Cancel">
            <summary>
            Closes the window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SalvageDialog.CheckBoxVisible">
            <summary>
            Returns true if the checkbox for unique/untradeable items is present
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SalvageDialog.SalvageChance">
            <summary>
            Parsed from the window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SalvageDialog.UniqueUntradeableChecked">
            <summary>
            Gets and sets the checkbox above the desynthesis button
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectIconString.ClickLineContains(System.String)">
            <summary>
            Clicks the line that contains the supplied text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectIconString.ClickLineEquals(System.String)">
            <summary>
            Clicks the line that equals the supplied text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectString.ClickLineContains(System.String)">
            <summary>
            Clicks the line that contains the supplied text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectString.ClickLineEquals(System.String)">
            <summary>
            Clicks the line that equals the supplied text
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectYesno.ClickYes">
            <summary>
            Click the yes button
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectYesno.ClickNo">
            <summary>
            Click the no button
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectYesno.Yes">
            <summary>
            Same as clickyes
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SelectYesno.No">
            <summary>
            Same as clickno
            </summary>
        </member>
        <member name="F:ff14bot.RemoteWindows.Shop.paddingshit">
            <summary>
            This string is actually multiple bytes, gg visual studio interface
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Shop.Purchase(System.UInt32,System.UInt32)">
            <summary>
            Purchase item from store
            </summary>
            <param name="itemId"></param>
            <param name="itemCount">This value will never exced what the normal game ui allows</param>
            <returns>number of items purchased</returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.ShopExchangeCurrency.Purchase(System.UInt32,System.UInt32)">
            <summary>
            Purchase item from store
            </summary>
            <param name="itemId"></param>
            <param name="itemCount">This value will never exced what the normal game ui allows</param>
            <returns>number of items purchased</returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.ShopExchangeCurrency.CanAfford(ff14bot.Managers.SpecialShopItem)">
            <summary>
            Returns how many of the item the player can afford to purchase
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.ShopExchangeItem.CanAfford(ff14bot.Managers.SpecialShopItem)">
            <summary>
            Returns how many of the item the player can afford to purchase
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.RemoteWindows.TwoInt">
            <summary>
            on 64bit its two longs, first 4 bytes contains the type we are interested in rest is junk data
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.SynthesisSimple">
            <summary>
            Class for handling interactions with the SynthesisSimple window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.ElementCount">
            <summary>
            How many internal elements the window currently has
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.___Elements">
            <summary>
            Gets some raw properties from the window
            </summary>
        </member>
        <member name="F:ff14bot.RemoteWindows.SynthesisSimple.Properties">
            <summary>
            Property to element mapping
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SynthesisSimple.GetProperty(System.String)">
            <summary>
            Attempts to get a property by its name using the lookup table
            </summary>
            <param name="key"></param>
            <returns>value of the element if found in the lookup table, -1 otherwise</returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.SynthesisSimple.Close">
            <summary>
            Presses the close button
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.IsOpen">
            <summary>
            Checks if the window is currently open
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.IconId">
            <summary>
            Gets the IconId for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.Crafted">
            <summary>
            How many items have been crafted
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.Target">
            <summary>
            How many items are going to be crafted
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.Normal">
            <summary>
            Get the amount of normally crafted items
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.Failed">
            <summary>
            Get the amount of failed crafted items
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.ItemId">
            <summary>
            Get the ItemId for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimple.HighQuality">
            <summary>
            Get the amount of high quality items crafted
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.SynthesisSimpleDialog">
            <summary>
            Class for handling interactions with the SynthesisSimpleDialog window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimpleDialog.ElementCount">
            <summary>
            How many internal elements the window currently has
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimpleDialog.___Elements">
            <summary>
            Gets some raw properties from the window
            </summary>
        </member>
        <member name="F:ff14bot.RemoteWindows.SynthesisSimpleDialog.Properties">
            <summary>
            Property to element mapping
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SynthesisSimpleDialog.GetProperty(System.String)">
            <summary>
            Attempts to get a property by its name using the lookup table
            </summary>
            <param name="key"></param>
            <returns>value of the element if found in the lookup table, null otherwise</returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.SynthesisSimpleDialog.Close">
            <summary>
            Presses the close button
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimpleDialog.IsOpen">
            <summary>
            Checks if the window is currently open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.SynthesisSimpleDialog.Craft(System.Int32,System.Boolean)">
            <summary>
            Attempts to craft <paramref name="count"/> items, passing -1 will craft as much as possible
            </summary>
            <param name="count">how many items to craft</param>
            <param name="withHq">should high quality materials be used</param>
            <returns>true if able to, false otherwise</returns>
            <exception cref="T:System.ArgumentException">Thrown if we try to craft more then able to</exception>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimpleDialog.Normal">
            <summary>
            Gets the IconId for the currently being crafted item
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.SynthesisSimpleDialog.WithHQ">
            <summary>
            How many items have been crafted
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.Synthesis">
            <summary>
            Class for handling interactions with the Synthesis window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Synthesis.ElementCount">
            <summary>
            How many internal elements the window currently has
            </summary>
        </member>
        <member name="F:ff14bot.RemoteWindows.Synthesis.Properties">
            <summary>
            Property to element mapping
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Synthesis.GetProperty(System.Int32)">
            <summary>
            Attempts to get a property by it's index
            </summary>
            <param name="key"></param>
            <returns>value of the element if the window is open, -1 otherwise</returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.Synthesis.GetProperty(System.String)">
            <summary>
            Attempts to get a property by its name using the lookup table
            </summary>
            <param name="key"></param>
            <returns>value of the element if found in the lookup table, -1 otherwise</returns>
        </member>
        <member name="P:ff14bot.RemoteWindows.Synthesis.___Elements">
            <summary>
            Gets some raw properties from the window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Synthesis.IsOpen">
            <summary>
            Checks if the window is currently open
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Synthesis.Close">
            <summary>
            Presses the close button
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Talk.CanSkip">
            <summary>
            Checks if the dialog is locked in auto-advance mode
            <returns>true if we are not locked</returns>
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.Trade">
            <summary>
            Class that handles interacting with the trade window
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Trade.IsOpen">
            <summary>
            Checks if the Trade window is currently open
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Trade.TradeStage">
            <summary>
            Stage at which the trade system is currently at, 3 is both parties are idle after inital exchange
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Trade.Trader">
            <summary>
            Returns name of the player we are trading with
            Returns null until the trade request is atleast stage 3
            </summary>
        </member>
        <member name="P:ff14bot.RemoteWindows.Trade.TraderGameObject">
            <summary>
            Gets the <see cref="T:ff14bot.Objects.GameObject"/> of the player attempting to trade with us
            Returns null until the trade request is atleast stage 3
            </summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.Trade.Close">
            <summary>
            Closes the trade window
            </summary>
        </member>
        <member name="T:ff14bot.RemoteWindows.TripleTriad">
            <summary>
            API for the game Triple Triad.</summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.TripleTriad.PlayCard(System.UInt32,System.UInt32)">
            <summary>
            Command to play a card in Triple Triad.</summary>
            <param name="card">The card you want to play, zero
            based, left to right, top to bottom.</param>
            <param name="slot">The slot you want to play the card
            in on the board, zero based, left to right, top to
            bottom.</param>
        </member>
        <member name="M:ff14bot.RemoteWindows.TripleTriad.Cards``1">
            <summary>
            Gets the active playing cards
            Takes a generic so the card struct can be maintained outside the main bot
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ff14bot.RemoteWindows.TripleTriadRequest.Challenge">
            <summary>
            Accepts a challenge to a game of Triple Triad.</summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.TripleTriadRequest.Quit">
            <summary>
            Declines a challenge to a game of Triple Triad.</summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.TripleTriadResult.Rematch">
            <summary>
            Accepts a rematch to a game of Triple Triad.</summary>
        </member>
        <member name="M:ff14bot.RemoteWindows.TripleTriadResult.Quit">
            <summary>
            Declines a rematch to a game of Triple Triad.</summary>
        </member>
        <member name="F:ff14bot.Radar.RadarForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:ff14bot.Radar.RadarForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:ff14bot.Radar.RadarForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.LeashPoint">
            <summary>Gets the leash point.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.LeashRadius">
            <summary>Gets the leash radius.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.IgnoreIfBlocking">
            <summary>Gets a value indicating whether to ignore avoid if no avoid path is found.</summary>
            <value>
                <c>true</c> if should ignore avoid if no avoid path is found, <c>false</c> otherwisr.
            </value>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.Location">
            <summary>Gets the location.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.ShouldIgnore">
            <summary>Gets a value indicating whether [should ignore].</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.LeashRadiusSqr">
            <summary>Gets the leash radius squared.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.IsValid">
            <summary>Gets a value indicating whether this instance is valid.</summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.IsBlocking">
            <summary>
                Gets a value indicating whether this avoid is blocking path.
            </summary>
            <value>
                <c>true</c> if this avoid is blocking; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.Avoid.IsDirty">
            <summary>
                Indicates whether this avoid needs to be removed and reapplied to the heightfield.
            </summary>
            
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.Avoid.Update">
            <summary>
                Updates the location and radius. Used for optimization purposes. Apparently WoWObject.Location is a very
                expensive call
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.Avoid.OnUpdate(System.Boolean@)">
            <summary>
                Updates internal avoid state. Only called if <see cref="P:ff14bot.Pathing.Avoidance.Avoid.Object" /> is valid and after location has been updated.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidCircle`1.Height">
            <summary>
            The height from bottom of a cylinder to the top
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidCircle`1.HeightfieldLocation">
            <summary>
            The location used when this instance was added to height field. We'll use it again when we remove 
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidCircleInfo`1.#ctor(System.Func{System.Boolean},System.Func{`0,Clio.Utilities.Vector3},System.Func{`0,System.Single},System.Func{`0,System.Single},System.Func{System.Collections.Generic.IEnumerable{`0}},System.Func{Clio.Utilities.Vector3},System.Single,System.Boolean,System.Func{`0,System.Boolean},ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="leashPointSelector">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="ignoreIfBlocking">if set to <c>true</c> stay away if no avoid path is found.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidInfo.#ctor(System.Func{System.Boolean},System.Func{System.Object,Clio.Utilities.Vector3},System.Func{System.Collections.Generic.IEnumerable{System.Object}},System.Func{Clio.Utilities.Vector3},System.Single,System.Boolean,System.Func{System.Object,System.Boolean},ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="leashPointProducer">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="ignoreIfBlocking">if set to <c>true</c> stay away if no avoid path is found.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo.Condition">
            <summary>Gets the condition.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo.LeashPointProducer">
            <summary>Gets the leash point selector.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo.LeashRadius">
            <summary>Gets the leash radius.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo.IgnoreIfBlocking">
            <summary>Gets a value indicating whether to ignore avoid if no avoid path is found.</summary>
            <value>
            	<c>true</c> if should not ignore avoid if no avoid path is found, <c>false</c> otherwisr.
            </value>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo.CanRun">
            <summary>Determines whether this instance can run.</summary>
            <returns><c>true</c> if this instance can run; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidInfo`1.#ctor(System.Func{System.Boolean},System.Func{`0,Clio.Utilities.Vector3},System.Func{System.Collections.Generic.IEnumerable{`0}},System.Func{Clio.Utilities.Vector3},System.Single,System.Boolean,System.Func{`0,System.Boolean},ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="leashPointSelector">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="ignoreIfBlocking">if set to <c>true</c> stay away if no avoid path is found.</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo`1.Condition">
            <summary>Gets the condition.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidInfo`1.LeashPointProducer">
            <summary>Gets the leash point selector.</summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidLocation.#ctor(ff14bot.Pathing.Avoidance.AvoidLocationInfo,System.Object)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidLocation"/> class.</summary>
            <param name="avoidInfo">The avoid info.</param>
            <param name="@object"></param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidLocation`1.#ctor(ff14bot.Pathing.Avoidance.AvoidLocationInfo{`0},`0)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidLocation"/> class.</summary>
            <param name="avoidInfo">The avoid info.</param>
            <param name="@object"></param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidLocationInfo.#ctor(System.Func{System.Boolean},System.Func{System.Object,Clio.Utilities.Vector3},System.Func{System.Object,System.Single},System.Func{System.Collections.Generic.IEnumerable{System.Object}},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{System.Object,System.Boolean},System.Boolean,ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidLocationInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="locationProducer">The location selector.</param>
            <param name="radiusProducer">The radius selector.</param>
            <param name="leashPointSelector">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="collectionProducer">Collection of objects that are passed as args to LocationSelector</param>
            <param name="ignoreIfBlocking">Ignores avoid if <c>true</c></param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidLocationInfo`1.#ctor(System.Func{System.Boolean},System.Func{`0,Clio.Utilities.Vector3},System.Func{`0,System.Single},System.Func{System.Collections.Generic.IEnumerable{`0}},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{`0,System.Boolean},System.Boolean,ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidObjectInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="locationProducer">The location selector.</param>
            <param name="radiusProducer">The radius selector.</param>
            <param name="leashPointSelector">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="collecionSelection">Optional collection of objects that are passed as args to LocationSelector</param>
            <param name="ignoreIfBlocking">Ignores avoid if <c>true</c></param>
            <param name="priority">The priority.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ff14bot.Pathing.Avoidance.AvoidObject.#ctor(ff14bot.Pathing.Avoidance.AvoidObjectInfo,ff14bot.Objects.GameObject)" -->
        <!-- Badly formed XML comment ignored for member "M:ff14bot.Pathing.Avoidance.AvoidObject`1.#ctor(ff14bot.Pathing.Avoidance.AvoidObjectInfo{`0},`0)" -->
        <member name="M:ff14bot.Pathing.Avoidance.AvoidObjectInfo.#ctor(System.Func{System.Boolean},System.Predicate{ff14bot.Objects.GameObject},System.Func{ff14bot.Objects.GameObject,System.Single},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{ff14bot.Objects.GameObject,Clio.Utilities.Vector3},System.Boolean,ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidObjectInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="objectSelector">The object selector.</param>
            <param name="radiusProducer">The radius selector.</param>
            <param name="leashPointSelector">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="locationProducer">Allows you to customize the center locaton to avoid. Defaults to the object Location.</param>
            <param name="ignoreIfBlocking">if set to <c>false</c> stay away if no avoid path is found .</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidObjectInfo`1.#ctor(System.Func{System.Boolean},System.Predicate{`0},System.Func{`0,System.Single},System.Func{Clio.Utilities.Vector3},System.Single,System.Func{`0,Clio.Utilities.Vector3},System.Boolean,ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidObjectInfo" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="objectSelector">The object selector.</param>
            <param name="radiusProducer">The radius selector.</param>
            <param name="leashPointSelector">The leash point selector.</param>
            <param name="leashRadius">The leash radius.</param>
            <param name="locationProducer">Allows you to customize the center locaton to avoid. Defaults to the object Location.</param>
            <param name="ignoreIfBlocking">if set to <c>false</c> stay away if no avoid path is found .</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidPolygon`1.Height">
            <summary>
            The height from bottom of a cylinder to the top
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.AvoidPolygon`1.HeightfieldPoints">
            <summary>
            The location used when this instance was added to height field. We'll use it again when we remove 
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.AvoidPolygonInfo`1.#ctor(System.Func{System.Boolean},System.Func{`0,Clio.Utilities.Vector3},System.Func{`0,System.Single},System.Func{`0,System.Single},System.Func{`0,System.Single},System.Func{`0,Clio.Utilities.Vector2[]},System.Func{System.Collections.Generic.IEnumerable{`0}},System.Func{Clio.Utilities.Vector3},System.Single,System.Boolean,System.Func{`0,System.Boolean},ff14bot.Pathing.Avoidance.AvoidancePriority)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.Avoidance.AvoidPolygonInfo`1" /> class.</summary>
            <param name="condition">The condition.</param>
            <param name="locationProducer">
                Produces the location. 
                Polygon is rotated and scaled around produced location on the xy plane. 
            </param>
            <param name="rotationProducer">Produces the polygon's rotation in radians.</param>
            <param name="scaleProducer">Produces the polygon's scale</param>
            <param name="heightProducer">
                Produces the height of the polygon. 
                Half of the produced height extends above location produced by <see cref="!:locationProducer"/> and the other half below
            </param>
            <param name="pointsProducer">Produces the points that form the polygon</param>
            <param name="collectionProducer">Produces a collection of objects that should be avoided. </param>
            <param name="leashPointProducer">The leash point producer. Can be null. Used in conjunction with <see cref="!:leashRadius"/></param>
            <param name="leashRadius">
                The leash radius. 
                If <see cref="!:leashPointProducer"/> is not null, 
                bot will not navigate furthar than this distance from point returned from <see cref="!:leashPointProducer"/> while running out of avoid</param>
            <param name="ignoreIfBlocking">Ignore avoid if set to <c>true</c> and it can't be navigated around.</param>
            <param name="objectValidator">Indecates whether objects produced by <see cref="!:collectionProducer"/> are valid</param>
            <param name="priority">The priority.</param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.Helpers.GetLineCircleIntersections(Clio.Utilities.Vector2,System.Single,Clio.Utilities.Vector2,Clio.Utilities.Vector2,Clio.Utilities.Vector2@,Clio.Utilities.Vector2@)">
            <summary>
              returns the number of collisions of a line passing through a circle. Note: algorithm counts small lines inside circle as hits.
            </summary>
            <param name="circlePos"> The circle pos. </param>
            <param name="radius"> The radius. </param>
            <param name="start"> The start. </param>
            <param name="end"> The end. </param>
            <param name="enterPoint"> The line enter point. </param>
            <param name="exitPoint"> The line exit point. </param>
            <returns> </returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.Helpers.LineSegementsIntersect(Clio.Utilities.Vector2,Clio.Utilities.Vector2,Clio.Utilities.Vector2,Clio.Utilities.Vector2,Clio.Utilities.Vector2@,System.Boolean)">
            <summary>
            Test whether two line segments intersect. If so, calculate the intersection point.
            <see>
                <cref>http://stackoverflow.com/a/14143738/292237</cref>
            </see>
            </summary>
            <param name="p">Vector to the start point of p.</param>
            <param name="p2">Vector to the end point of p.</param>
            <param name="q">Vector to the start point of q.</param>
            <param name="q2">Vector to the end point of q.</param>
            <param name="intersection">The point of intersection, if any.</param>
            <param name="considerCollinearOverlapAsIntersect">Do we consider overlapping lines as intersecting?
            </param>
            <returns>True if an intersection point was found.</returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.Helpers.LineSegmentIntersectsPolygon(Clio.Utilities.Vector2,Clio.Utilities.Vector2,Clio.Utilities.Vector2[],Clio.Utilities.Vector2@,Clio.Utilities.Vector2@)">
            <summary>
            Checks if a line segment intersects a polygon. 
            </summary>
            <remarks>
            This function returns <c>true</c> if line segment is inside the polygon
            </remarks>
            <param name="lineStart"></param>
            <param name="lineEnd"></param>
            <param name="polygon"></param>
            <param name="enterPoint"></param>
            <param name="exitPoint"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactCell">
            Provides information on the content of a cell column in a compact heightfield. 
        </member>
        <member name="T:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield">
            A compact, static heightfield representing unobstructed space.
            @ingroup recast
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.GetSpanWorldPosition(System.Int32,System.Int32,ff14bot.Pathing.Avoidance.RecastDetourMini.CompactSpan)">
            <summary>
            Gets the bottom center world coordinate and height of a span
            </summary>
            <param name="cellX"></param>
            <param name="cellZ"></param>
            <param name="span"></param>
            <returns>The bottom center world coordinate of span</returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.GetSpanWorldPosition(ff14bot.Pathing.Avoidance.RecastDetourMini.SpanReference)">
            <summary>
            Gets the bottom center world coordinate and height of a span
            </summary>
            <param name="spanRef"></param>
            <returns>The bottom center world coordinate of span</returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.GetCellFromWorld(System.Single,System.Single)">
            <summary>Gets the cell at the position.
            If you are unsure whether this position is contained
            in the heighfield grid, use <see cref="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.ContainsCell(System.Int32,System.Int32)"/>
            after the conversion.</summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.WalkGrid(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the points at and between (<paramref name="x1"/>, <paramref name="z1"/>)
            and (<paramref name="x2"/>, <paramref name="z2"/>), moving only in orthogonal steps
            </summary>
            <param name="x1"></param>
            <param name="z1"></param>
            <param name="x2"></param>
            <param name="z2"></param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.GetNearestSpanFromWorld(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            Searches for an occupied voxel that is nearest to world coordinate <para>start</para>
            </summary>
            <param name="position">The world position that search starts from</param>
            <param name="searchExtents">Defines search area dimentions</param>
            <returns>The nearest SpanReference if one was found; <c>null</c> otherwise</returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactHeightfield.GetSpansInCircle(Clio.Utilities.Vector3,System.Single,System.Single)">
            <summary>
            
            </summary>
            <param name="position"> Location in the center of cylinder</param>
            <param name="radius"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactSpan">
            Represents a span of obstructed space within a compact heightfield.
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactSpan.GetConnection(System.Int32)">
            <summary>
                /// Gets neighbor connection data for the specified direction.
            </summary>
            <param name="dir">The direction to check. [Limits: 0 &lt;= value &lt; 4]</param>
            <returns>
                The neighbor connection data for the specified direction,
                or <see cref="F:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.NotConnected" /> if there is no connection.
            </returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.CompactSpan.SetConnection(System.Int32,System.Int32)">
            <summary>
                Sets the neighbor connection data for the specified direction.
            </summary>
            <param name="dir">The direction to set. [Limits: 0 &lt;= value &lt; 4]</param>
            <param name="neighborIndex">The index of the neighbor span</param>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.CellSize">
            <summary>
                Cell Size
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.CellHeight">
            <summary>
                Cell Height
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.GetColumnFromWorld(System.Single,System.Single)">
            <summary>Gets the cell at the position.
            If you are unsure whether this position is contained
            in the heighfield grid, use <see cref="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.Contains(System.Int32,System.Int32)"/>
            after the conversion.</summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.RasterizeTriangle(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.Byte,System.Int32)">
            <summary>
            Marks any voxel touched by the triangle as occupied.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.FilterLowHangingWalkableObstacles(System.Int32)">
            <summary>
            Allows the formation of walkable regions that will flow over low lying 
            objects such as curbs, and up structures such as stairways. 
            Two neighboring spans are walkable if: <tt>rcAbs(currentSpan.smax - neighborSpan.smax) &lt; waklableClimb</tt>
            </summary>
            <remarks>
            Will override the effect of #rcFilterLedgeSpans.  So if both filters are used, call
            #rcFilterLedgeSpans after calling this filter.
            </remarks>
            <param name="walkableClimb"></param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.FilterLedgeSpans(System.Int32,System.Int32)">
            <summary>
            A ledge is a span with one or more neighbors whose maximum is further away than @p walkableClimb
            from the current span's maximum.
            This method removes the impact of the overestimation of conservative voxelization 
            so the resulting mesh will not have regions hanging in the air over ledges.
            
            A span is a ledge if: <tt>rcAbs(currentSpan.smax - neighborSpan.smax) > walkableClimb</tt>
            
            </summary>
            <param name="walkableHeight"></param>
            <param name="walkableClimb"></param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Heightfield.FilterWalkableLowHeightSpans(System.Int32)">
            <summary>
                For this filter, the clearance above the span is the distance from the span's
                maximum to the next higher span's minimum. (Same grid column.)
            </summary>
            <param name="walkableHeight"></param>
        </member>
        <member name="F:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.NullArea">
            Represents the null area.
            When a data element is given this value it is considered to no longer be 
            assigned to a usable area.  (E.g. It is unwalkable.)
        </member>
        <member name="F:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.WalkableArea">
            The default area id used to indicate a walkable polygon. 
            This is also the maximum allowed area id, and the only non-null area id 
            recognized by some steps in the build process. 
        </member>
        <member name="F:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.NotConnected">
            <summary>
            The value returned by #rcGetCon if the specified direction is not connected
            to another span. (Has no neighbor.)
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.Min(Clio.Utilities.Vector3*,Clio.Utilities.Vector3*)">
            <summary>
            Stores the lowest vector of <paramref name="a"/> and <paramref name="b"/> in <paramref name="a"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.Max(Clio.Utilities.Vector3*,Clio.Utilities.Vector3*)">
            <summary>
            Stores the highest vector of <paramref name="a"/> and <paramref name="b"/> in <paramref name="a"/>
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.GetDirOffsetX(System.Int32)">
            <summary>
                Gets the standard width (x-axis) offset for the specified direction.
            </summary>
            <param name="dir">The direction. [Limits: 0 &lt;= value &lt; 4]</param>
            <returns>
                The height offset to apply to the current cell position to move
             	in the direction.
            </returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.GetDirOffsetY(System.Int32)">
            <summary>
                Gets the standard width (y-axis) offset for the specified direction.
            </summary>
            <param name="dir">The direction. [Limits: 0 &lt;= value &lt; 4]</param>
            <returns>
                The width offset to apply to the current cell position to move in the direction.
            </returns>
        </member>
        <member name="M:ff14bot.Pathing.Avoidance.RecastDetourMini.Recast.GetDirForOffset(System.Int32,System.Int32)">
            <summary>
                Gets the direction for the specified offset. One of x and y should be 0.
            </summary>
            <param name="x">The x offset. [Limits: -1 &lt;= value &lt;= 1]</param>
            <param name="y">The y offset. [Limits: -1 &lt;= value &lt;= 1]</param>
            <returns>The direction that represents the offset.</returns>
        </member>
        <member name="T:ff14bot.Pathing.AerialBlackspotManager">
            <summary>
            Handles aerial blackspots
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.AerialBlackspotManager.Blackspots">
            <summary>Gets the blackspots.</summary>
            <value>The blackspots.</value>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.IsInBlackspot(Clio.Utilities.Vector3)">
            <summary> Query if 'point' is in a blackspot. </summary>
            <remarks> raphus, 01/04/2014. </remarks>
            <param name="point"> The point. </param>
            <returns> true if in blackspot, false if not. </returns>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.AddBlackspot(System.UInt32,Clio.Utilities.Vector2[])">
            <summary>Adds a blackspot.</summary>
            <param name="mapId">    Identifier for the map.</param>
            <param name="blackspot">The blackspot.</param>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.AddBlackspots(System.UInt32,System.Collections.Generic.IEnumerable{Clio.Utilities.Vector2[]})">
            <summary>Adds the blackspots.</summary>
            <param name="mapId">     Identifier for the map.</param>
            <param name="blackspots">The blackspots.</param>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.AddBlackspots(System.UInt32,System.Collections.Generic.IEnumerable{ff14bot.NeoProfile.Spot2D})">
            <summary>Adds the blackspots.</summary>
            <param name="mapId">     Identifier for the map.</param>
            <param name="faction">   The faction.</param>
            <param name="blackspots">The blackspots.</param>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.RemoveBlackspot(System.UInt32,Clio.Utilities.Vector2[])">
            <summary>Removes the blackspot.</summary>
            <param name="mapId">    Identifier for the map.</param>
            <param name="blackspot">The blackspot.</param>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.RemoveBlackspots(System.UInt32,System.Collections.Generic.IEnumerable{Clio.Utilities.Vector2[]})">
            <summary>Removes the blackspots.</summary>
            <param name="mapId">     Identifier for the map.</param>
            <param name="blackspots">The blackspots.</param>
        </member>
        <member name="M:ff14bot.Pathing.AerialBlackspotManager.RemoveBlackspots(System.UInt32,System.Collections.Generic.IEnumerable{ff14bot.NeoProfile.Spot2D})">
            <summary>Removes the blackspots.</summary>
            <param name="mapId">     Identifier for the map.</param>
            <param name="blackspots">The blackspots.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileException">
            <summary>Exception for signalling profile errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileException.#ctor">
            <summary>Default constructor.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileException.#ctor(System.String)">
            <summary>Constructor.</summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ff14bot.Pathing.ProfileException.#ctor(System.String,System.Exception)">
            <summary>Constructor.</summary>
            <param name="message">       The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileUnknownElementException">
            <summary>Exception for signalling profile unknown element errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileUnknownElementException.#ctor(System.Xml.Linq.XElement)">
            <summary>Constructor.</summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:ff14bot.Pathing.ProfileUnknownElementException.#ctor(System.Xml.Linq.XElement,System.String[])">
            <summary>Constructor.</summary>
            <param name="element">  The element.</param>
            <param name="validTags">A variable-length parameters list containing valid tags.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileUnknownAttributeException">
            <summary>Exception for signalling profile unknown attribute errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileUnknownAttributeException.#ctor(System.Xml.Linq.XAttribute)">
            <summary>Constructor.</summary>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:ff14bot.Pathing.ProfileUnknownAttributeException.#ctor(System.Xml.Linq.XAttribute,System.String[])">
            <summary>Constructor.</summary>
            <param name="attribute">      The attribute.</param>
            <param name="validAttributes">A variable-length parameters list containing valid attributes.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileTagExpectedException">
            <summary>Exception for signalling profile tag expected errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileTagExpectedException.Create``1(System.Xml.Linq.XElement,System.String[])">
            <summary>
            Creates a <see cref="T:ff14bot.Pathing.ProfileTagExpectedException"/> for the specified basic type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="tag"></param>
            <param name="validValues"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Pathing.ProfileAttributeExpectedException`1">
            <summary>Exception for signalling profile attribute expected errors.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:ff14bot.Pathing.ProfileAttributeExpectedException`1.#ctor(System.Xml.Linq.XAttribute,System.String[])">
            <summary>Constructor.</summary>
            <param name="attribute">  The attribute.</param>
            <param name="validValues">A variable-length parameters list containing valid values.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileAttributeExpectedException">
            <summary>Exception for signalling profile attribute expected errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileAttributeExpectedException.#ctor(System.Xml.Linq.XAttribute,System.String[])">
            <summary>Constructor.</summary>
            <param name="attribute">  The attribute.</param>
            <param name="validValues">A variable-length parameters list containing valid values.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileMissingAttributeException">
            <summary>Exception for signalling profile missing attribute errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileMissingAttributeException.#ctor(System.String,System.Xml.Linq.XElement,System.String[])">
            <summary>Constructor.</summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="tag">          The tag.</param>
            <param name="validValues">  A variable-length parameters list containing valid values.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileMissingAttributeException`1">
            <summary>Exception for signalling profile missing attribute errors.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
        </member>
        <member name="M:ff14bot.Pathing.ProfileMissingAttributeException`1.#ctor(System.String,System.Xml.Linq.XElement)">
            <summary>Constructor.</summary>
            <param name="attributeName">Name of the attribute.</param>
            <param name="tag">          The tag.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileMissingElementException">
            <summary>Exception for signalling profile missing element errors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileMissingElementException.#ctor(System.String,System.Xml.Linq.XElement)">
            <summary>Constructor.</summary>
            <param name="elementName">Name of the element.</param>
            <param name="parent">     The parent.</param>
        </member>
        <member name="T:ff14bot.Pathing.ProfileNotFoundException">
            <summary>Exception for signalling profile is not found.</summary>
        </member>
        <member name="M:ff14bot.Pathing.ProfileExceptionHelper.GetTypeString``1">
            <summary>Gets type string.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <returns>The type string.</returns>
        </member>
        <member name="M:ff14bot.Pathing.ProfileExceptionHelper.GetValidTagsString(System.String[])">
            <summary>Gets valid tags string.</summary>
            <param name="validTags">A variable-length parameters list containing valid tags.</param>
            <returns>The valid tags string.</returns>
        </member>
        <member name="P:ff14bot.Pathing.IndoorArea.MapIds">
            <summary>
                Map ids that the indoor area is on. This should be the continent or phased mapId or empty if mapId is
                irrelevant
            </summary>
        </member>
        <member name="T:ff14bot.Pathing.Flightor">
            <summary>The flightor class.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Flightor.CanFly">
            <summary>Returns <c>true</c> if we can currently fly, or are in a flyable area and have a flying mount.</summary>
        </member>
        <member name="M:ff14bot.Pathing.Flightor.MoveTo(Clio.Utilities.Vector3,System.Boolean)">
            <summary>Move to.</summary>
            <param name="destination"> Destination for the.</param>
            <param name="checkIndoors">the check indoors.</param>
        </member>
        <member name="M:ff14bot.Pathing.Flightor.MoveTo(ff14bot.Pathing.FlyToParameters)">
            <summary>Move to by Flying Navigation.</summary>
            <param name="parameters">The FlyToParameters. <see cref="T:ff14bot.Pathing.FlyToParameters"/></param>
        </member>
        <member name="M:ff14bot.Pathing.Flightor.Clear">
            <summary>Clears the flight path and the poly nav.</summary>
        </member>
        <member name="T:ff14bot.Pathing.Flightor.MountHelper">
            <summary>A mount helper.</summary>
        </member>
        <member name="P:ff14bot.Pathing.Flightor.MountHelper.Mounted">
            <summary>Gets a value indicating whether we are mounted on a flying mount.</summary>
        </member>
        <member name="M:ff14bot.Pathing.Flightor.MountHelper.MountUpCoroutine">
            <summary>
            Summons the flying mount.
            </summary>
            <returns><c>true</c> if the mount was summoned; otherwise <c>false</c>.</returns>
        </member>
        <member name="F:ff14bot.Pathing.Flightor.Path.Start">
            <summary>The start.</summary>
        </member>
        <member name="F:ff14bot.Pathing.Flightor.Path.End">
            <summary>The end.</summary>
        </member>
        <member name="F:ff14bot.Pathing.Flightor.Path.Hops">
            <summary>The hops.</summary>
        </member>
        <member name="T:ff14bot.Pathing.PathGenerationFailStep">
            <summary>Values that represent PathGenerationFailStep.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathGenerationFailStep.None">
            <summary>An enum constant representing the none option.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathGenerationFailStep.Success">
            <summary>An enum constant representing the success option.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathGenerationFailStep.FindStartNode">
            <summary>An enum constant representing the find start node option.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathGenerationFailStep.FindEndNode">
            <summary>An enum constant representing the find end node option.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathGenerationFailStep.FindPath">
            <summary>An enum constant representing the find path option.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathGenerationFailStep.Mesh">
            <summary>An enum constant representing the mesh option.</summary>
        </member>
        <member name="T:ff14bot.Pathing.FlyToParameters">
            <summary>
            Represents parameters for <see cref="M:ff14bot.Pathing.Flightor.MoveTo(ff14bot.Pathing.FlyToParameters)"/>.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.FlyToParameters.Location">
            <summary>The location to move to.</summary>
        </member>
        <member name="P:ff14bot.Pathing.FlyToParameters.MinHeight">
            <summary>The minimum height to stay from the ground.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the property is set to a value that is 0 or lower.</exception>
            <remarks>The default value for this property is <c>40.0f</c>.</remarks>
        </member>
        <member name="P:ff14bot.Pathing.FlyToParameters.CheckIndoors">
            <summary>Gets or sets a bool that indicates whether the flightor
            should check if the destination is indoors or not to land.</summary>
            <remarks>Default value: <c>false</c>.</remarks>
        </member>
        <member name="P:ff14bot.Pathing.FlyToParameters.GroundNavParameters">
            <summary>The <see cref="T:ff14bot.Pathing.MoveToParameters"/> to be used 
            when Flightor falls back to ground navigation.</summary>
            <remarks>The Location of this parameter is always overridden with <see cref="P:ff14bot.Pathing.FlyToParameters.Location"/></remarks>
        </member>
        <member name="M:ff14bot.Pathing.FlyToParameters.ToString">
            <summary>Gets a string representation of these parameters.</summary>
        </member>
        <member name="F:ff14bot.Pathing.FlyToState.DestinationClearSkyHeight">
            <summary>
            Distance to check above destination to determine whether we need to find a landing spot.
            This is also the height that needs to be free above a potential spot to land at.
            This value can be relatively large since our landing spot logic is pretty good, so
            false-positives (we find landing spot but didn't need to) are better than false-negatives.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.FlyToState.GetIndoorPath(ff14bot.Pathing.IndoorEntrance[])">
            skips points in path if player is already along the path (maybe just got back from a DC)
        </member>
        <member name="M:ff14bot.Pathing.FlyToState.LoggedRaycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3,ff14bot.Enums.RaycastFlags,ff14bot.Enums.RaycastFlags,System.Boolean)">
            <summary>
            This function takes two different raycast flags. The first is used to check for what to hit, and the second is flags to ignore.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="flag1"></param>
            <param name="flag2"></param>
            <param name="checkInDoors"></param>
            <returns></returns>
        </member>
        <member name="T:ff14bot.Pathing.WorldLine">
            <summary>A world line.</summary>
        </member>
        <member name="F:ff14bot.Pathing.WorldLine.Start">
            <summary>The start point.</summary>
        </member>
        <member name="F:ff14bot.Pathing.WorldLine.End">
            <summary>The end point.</summary>
        </member>
        <member name="M:ff14bot.Pathing.WorldLine.#ctor(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>Initializes a new instance of the <see cref="T:ff14bot.Pathing.WorldLine"/> struct.</summary>
            <param name="start">The start.</param>
            <param name="end">  The end.</param>
        </member>
        <member name="M:ff14bot.Pathing.ProfileHelper.ExtractLocationFromElement(System.Xml.Linq.XElement,System.Boolean)">
            <summary>Extracts the location from element described by element.</summary>
            <exception cref="T:ff14bot.Pathing.ProfileAttributeExpectedException">Thrown when a profile attribute
            expected exception error condition occurs.</exception>
            <param name="element">The element.</param>
            <param name="throwOnMissing">Indicates whether this method should throw a <see cref="T:ff14bot.Pathing.ProfileMissingAttributeException`1"/> if the element doesn't contain X, Y and Z attributes.</param>
            <exception cref="T:ff14bot.Pathing.ProfileMissingAttributeException`1">Thrown if <paramref name="throwOnMissing"/> is true and the elements doesn't contain X, Y and Z attributes.</exception>
            <returns>The extracted location from element. Returns <see cref="F:Clio.Utilities.Vector3.Zero"/> if x, y or z is missing and <paramref name="throwOnMissing"/> is false.</returns>
        </member>
        <member name="M:ff14bot.Pathing.ProfileHelper.Extract``1(System.Xml.Linq.XAttribute,``0@)">
            <summary>Extracts this object.</summary>
            <typeparam name="T">Generic type parameter.</typeparam>
            <param name="attrib">The attribute.</param>
            <param name="val">   [out] The value.</param>
            <returns>true if it succeeds, false if it fails.</returns>
        </member>
        <member name="M:ff14bot.Pathing.ProfileHelper.FindAttribute(System.Xml.Linq.XElement,System.Boolean,System.String[])">
            <summary>Searches for the first attribute.</summary>
            <param name="element">       The element.</param>
            <param name="ignoreCase">    true to ignore case.</param>
            <param name="attributeNames">List of names of the attributes.</param>
            <returns>The found attribute.</returns>
        </member>
        <member name="M:ff14bot.Pathing.ProfileHelper.FindElement(System.Xml.Linq.XElement,System.Boolean,System.String[])">
            <summary>Searches for the first element.</summary>
            <param name="element">     The element.</param>
            <param name="ignoreCase">  true to ignore case.</param>
            <param name="elementNames">List of names of the elements.</param>
            <returns>The found element.</returns>
        </member>
        <member name="M:ff14bot.Pathing.ProfileHelper.FindElements(System.Xml.Linq.XElement,System.Boolean,System.String[])">
            <summary>Finds the elements in this collection.</summary>
            <param name="parentElement">The parent element.</param>
            <param name="ignoreCase">   true to ignore case.</param>
            <param name="elementNames"> List of names of the elements.</param>
            <returns>An enumerator that allows foreach to be used to process the elements in this
            collection.</returns>
        </member>
        <member name="M:ff14bot.Pathing.ProfileHelper.ParseQuestIds(System.Xml.Linq.XElement,System.Boolean,System.String[])">
            <summary>
            Parses the 'VariantQuestIds' attribute 
            </summary>
            <param name="element"></param>
            <param name="required">Indicates that a provided questID/variantQuestIds is required</param>
            <returns>The parses quest IDs or an empty list if none are  </returns>
        </member>
        <member name="M:ff14bot.Pathing.MoveResultExtensions.CalculateNeededFacing(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>Calculates the required facing to face a point from any other point.</summary>
            <param name="start">     The start point.</param>
            <param name="faceTarget">The end point.</param>
            <returns>The required facing in radians.</returns>
        </member>
        <member name="M:ff14bot.Pathing.MoveResultExtensions.NormalizeRadian(System.Single)">
            <summary>Normalizes a radian so it's between 0 and pi * 2.</summary>
            <param name="radian">.</param>
            <returns>A float.</returns>
        </member>
        <member name="M:ff14bot.Pathing.MoveResultExtensions.IsSuccessful(ff14bot.Enums.MoveResult)">
            <summary> Determines whether the specified move result is successful.</summary>
            <param name="moveResult">The move result.</param>
            <returns><c>true</c> if successful; <c>false</c> otherwise</returns>
        </member>
        <member name="M:ff14bot.Pathing.MoveResultExtensions.MinByOrDefault``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Finds the minimum <typeparamref name="TSource"/> in <paramref name="source"/> based on a key.
            </summary>
            <typeparam name="TSource">The source parameter type.</typeparam>
            <typeparam name="TKey">The key type to compare the source on.</typeparam>
            <param name="source">The source.</param>
            <param name="keySelector">A delegate that extracts a key from an item.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> or <paramref name="keySelector"/> are <c>null</c>.</exception>
            <returns>The source item that has the smallest extracted key, or <c>default(TSource)</c> if <paramref name="source"/> is empty.</returns>
        </member>
        <member name="F:ff14bot.Pathing.NavMesh.Nodes">
            <summary>The nodes.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavMesh.#ctor(ff14bot.Pathing.NavMeshNode[],System.Int32)">
            <summary>Constructor.</summary>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <param name="nodes">           The nodes.</param>
            <param name="openListCapacity">The open list capacity.</param>
        </member>
        <member name="M:ff14bot.Pathing.NavMesh.GetNode(System.Int32)">
            <summary>Gets a node.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <param name="nodeRef">The node reference.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMesh.RemoveConnection(System.Int32,System.Int32)">
            <summary>Removes the connection from <paramref name="node1"/> to <paramref name="node2"/>.</summary>
            <exception cref="T:System.ArgumentException">Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <param name="node1">.</param>
            <param name="node2">.</param>
            <returns>A boolean indicating whether the connection was successfully removed.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMesh.FindPath(System.Int32,System.Int32,System.Collections.Generic.List{System.Int32})">
            <summary>Searches for the first path.</summary>
            <exception cref="T:System.ArgumentException">    Thrown when one or more arguments have unsupported or
            illegal values.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when one or more required arguments are null.</exception>
            <param name="startNodeRef">The start node reference.</param>
            <param name="endNodeRef">  The end node reference.</param>
            <param name="nodeRefs">    The node references.</param>
        </member>
        <member name="M:ff14bot.Pathing.NavMesh.Search(Clio.Utilities.Vector2,System.Single)">
            <summary>Enumerates the items in this collection that meet given criteria.</summary>
            <param name="location">         The location.</param>
            <param name="maxSearchDistance">(Optional) the maximum search distance.</param>
            <returns>An enumerator that allows foreach to be used to process the matched items.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMesh.FindClosestNode(Clio.Utilities.Vector2,System.Single,System.Single)">
            <summary>Searches for the nearest node.</summary>
            <param name="location">   The location.</param>
            <param name="minDistance">(Optional) the minimum distance.</param>
            <param name="maxDistance">(Optional) the maximum distance.</param>
            <returns>The found node.</returns>
        </member>
        <member name="P:ff14bot.Pathing.NavMeshBuilder.Nodes">
            <summary>Gets the nodes.</summary>
            <value>The nodes.</value>
        </member>
        <member name="E:ff14bot.Pathing.NavMeshBuilder.OnSetFromNodes">
            <summary>Event queue for all listeners interested in OnSetFromNodes events.</summary>
        </member>
        <member name="E:ff14bot.Pathing.NavMeshBuilder.OnNodeAdded">
            <summary>Event queue for all listeners interested in OnNodeAdded events.</summary>
        </member>
        <member name="E:ff14bot.Pathing.NavMeshBuilder.OnCleared">
            <summary>Event queue for all listeners interested in OnCleared events.</summary>
        </member>
        <member name="E:ff14bot.Pathing.NavMeshBuilder.OnNodeDeleted">
            <summary>Event queue for all listeners interested in OnNodeDeleted events.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.Delete(ff14bot.Pathing.NavMeshBuilderNode)">
            <summary>Deletes the given node.</summary>
            <param name="node">The node to delete.</param>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.Clean">
            <summary>Removes all invalid (deleted) nodes and updates neighbor refs.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.GetNodes">
            <summary>Gets the nodes.</summary>
            <returns>An array of navigaiton mesh node.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.FindClosest(Clio.Utilities.Vector2,System.Predicate{ff14bot.Pathing.NavMeshBuilderNode})">
            <summary>Finds the closest node to a location that matches a predicate.</summary>
            <param name="loc">      .</param>
            <param name="predicate">(Optional)</param>
            <returns>The found closest.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.Search(Clio.Utilities.Vector2,System.Single)">
            <summary>Enumerates the items in this collection that meet given criteria.</summary>
            <param name="loc">     .</param>
            <param name="maxRange">The maximum range.</param>
            <returns>An enumerator that allows foreach to be used to process the matched items.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.GetNode(System.Int32)">
            <summary>Gets a node.</summary>
            <param name="nodeRef">The node reference.</param>
            <returns>The node.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.Insert(Clio.Utilities.Vector2,System.Collections.Generic.IEnumerable{ff14bot.Pathing.NavMeshBuilderNode})">
            <summary>Inserts.</summary>
            <param name="location">     The location.</param>
            <param name="neighborNodes">The neighbor nodes.</param>
            <returns>A NavMeshBuilderNode.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.AddConnection(ff14bot.Pathing.NavMeshBuilderNode,ff14bot.Pathing.NavMeshBuilderNode)">
            <summary>Adds a connection from the <paramref name="this"/>-node to the
            <paramref name="neighbor"/> node.</summary>
            <param name="this">    .</param>
            <param name="neighbor">.</param>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.SetFromNodes(System.Collections.Generic.IEnumerable{ff14bot.Pathing.NavMeshNode})">
            <summary>Sets from nodes.</summary>
            <param name="nodes">The nodes.</param>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilder.Clear">
            <summary>Clears this object to its blank/initial state.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshBuilderNode.#ctor(System.Int32,Clio.Utilities.Vector2,System.Collections.Generic.List{System.Int32})">
            <summary>Constructor.</summary>
            <param name="nodeRef">  The node reference.</param>
            <param name="location"> The location.</param>
            <param name="neighbors">The neighbors.</param>
        </member>
        <member name="F:ff14bot.Pathing.NavMeshBuilderNode.NodeRef">
            <summary>The node reference.</summary>
        </member>
        <member name="F:ff14bot.Pathing.NavMeshBuilderNode.Location">
            <summary>The location.</summary>
        </member>
        <member name="F:ff14bot.Pathing.NavMeshBuilderNode.Neighbors">
            <summary>The neighbors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavMeshNode.#ctor(Clio.Utilities.Vector2,System.Int32[])">
            <summary>Constructor.</summary>
            <param name="location"> The location.</param>
            <param name="neighbors">The neighbors.</param>
        </member>
        <member name="F:ff14bot.Pathing.NavMeshNode.Location">
            <summary>The location.</summary>
        </member>
        <member name="F:ff14bot.Pathing.NavMeshNode.Neighbors">
            <summary>The neighbors.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NodeChangedEventArgs.#ctor(ff14bot.Pathing.NavMeshBuilderNode)">
            <summary>Constructor.</summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:ff14bot.Pathing.NodeChangedEventArgs.Node">
            <summary>Gets the node.</summary>
            <value>The node.</value>
        </member>
        <member name="M:ff14bot.Pathing.PathFindNode.#ctor(System.Int32,System.Int32,System.Single,System.Single)">
            <summary>Constructor.</summary>
            <param name="nodeRef">        The node reference.</param>
            <param name="previousNodeRef">The previous node reference.</param>
            <param name="cost">           The cost.</param>
            <param name="totalCost">      The total cost.</param>
        </member>
        <member name="F:ff14bot.Pathing.PathFindNode.NodeRef">
            <summary>The node reference.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathFindNode.PreviousNodeRef">
            <summary>The previous node reference.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathFindNode.Cost">
            <summary>The cost.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathFindNode.TotalCost">
            <summary>The total cost.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathFindNode.Flags">
            <summary>The flags.</summary>
        </member>
        <member name="M:ff14bot.Pathing.PathFindNode.CompareTo(ff14bot.Pathing.PathFindNode)">
            <summary>Compares this PathFindNode object to another to determine their relative ordering.</summary>
            <param name="other">Another instance to compare.</param>
            <returns>Negative if this object is less than the other, 0 if they are equal, or positive if
            this is greater.</returns>
        </member>
        <member name="T:ff14bot.Pathing.VolumetricGrid">
            <summary>
            Represents a 3D grid that can be rasterized from a set of triangles.
            All voxels touched by triangles are marked as occupied, and can be
            queried. This gives a simple grid we can do 3D path queries on. However,
            they are not as efficient as a polygon navmesh (like RD), so this should
            only be used in a smaller, local area.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.VolumetricGrid.#ctor(Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.Int32,System.Int32,System.Int32)">
            <param name="bmin">The min location of the bounds.</param>
            <param name="voxelDimensions">The dimensions, in X, Y and Z, of each voxel.</param>
            <param name="numVoxelsX">The number of voxels in the X direction, or the "depth" of the grid.</param>
            <param name="numVoxelsY">The number of voxels in the Y direction, or the "width" of the grid.</param>
            <param name="numVoxelsZ">The number of voxels in the Z direction, or the "height" of the grid.</param>
        </member>
        <member name="M:ff14bot.Pathing.VolumetricGrid.GetVoxelFromWorld(Clio.Utilities.Vector3)">
            <summary>Gets the voxel that contains a position.
            If you are unsure whether this position is contained
            in the volumetric grid, use <see cref="M:ff14bot.Pathing.VolumetricGrid.Contains(ff14bot.Pathing.VoxelPosition)"/>
            after the conversion.</summary>
        </member>
        <member name="M:ff14bot.Pathing.VolumetricGrid.RasterizeTriangle(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            Marks any voxel touched by the triangle as occupied.
            </summary>
        </member>
        <member name="T:ff14bot.Pathing.MoveToParameters">
            <summary>
            Represents parameters for <see cref="M:ff14bot.Pathing.NavigationProvider.MoveTo(ff14bot.Pathing.MoveToParameters)"/>.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.MoveToParameters.Location">
            <summary>The location to move to.</summary>
        </member>
        <member name="P:ff14bot.Pathing.MoveToParameters.UseMount">
            <summary>
            Should the navigator attempt to mount up, this defaults to whatever is selected by the user
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.MoveToParameters.Destination">
            <summary>
            
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.MoveToParameters.DistanceTolerance">
            <summary>The distance tolerance to get within <see cref="P:ff14bot.Pathing.MoveToParameters.Location"/>.</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the property is set to a value that is 0 or lower.</exception>
            <remarks>The default value for this property is <c>5.0f</c>.</remarks>
        </member>
        <member name="P:ff14bot.Pathing.MoveToParameters.MapId">
            <summary>The map ID of the location.</summary>
            <remarks>If <c>null</c>, use current map.</remarks>
        </member>
        <member name="P:ff14bot.Pathing.MoveToParameters.MoveImmediately">
            <summary>
            If <c>true</c>, instructs the nav provider to move immediately once the path has been generated,
            so the player will start moving at the same time as <see cref="F:ff14bot.Enums.MoveResult.PathGenerated"/> is returned.
            If <c>false</c>, instructs the nav provider to wait until the next movement request after the path generation
            has finished to begin moving. This is for example useful for inspecting the path if it succeeds
            and aborting the navigation if the path generated was too long.
            </summary>
            <remarks>Default value: <c>true</c>.</remarks>
        </member>
        <member name="F:ff14bot.Pathing.MoveToParameters.WorldState">
            <summary>
            Used by deep dungeon
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.MoveToParameters.AreEqualOrMoreRestrictiveThan(ff14bot.Pathing.MoveToParameters)">
            <summary>
            Checks if the parameters indicated by this object are
            more or equally restrictive as some other parameters.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.MoveToParameters.ToString">
            <summary>Gets a string representation of these parameters.</summary>
        </member>
        <member name="P:ff14bot.Pathing.NavigationProvider.IsCurrent">
            <summary>
            Gets a bool that indicates whether this is the current navigation provider.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.OnPulse">
            <summary>Pulses this provider. Called every tick.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.MoveTo(ff14bot.Pathing.MoveToParameters)">
            <summary>
            Moves towards the specified locations.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>A result that indicates what step was performed.</returns>
            <remarks>This function should return instantly, and should be able to be called again to perform the next step of the movement.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.CanFullyNavigateTo(System.Collections.Generic.ICollection{ff14bot.ServiceClient.CanFullyNavigateTarget},Clio.Utilities.Vector3,System.UInt16)">
            <summary>
            Check if multiple locations can be pathed to on the given zoneid
            
            This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task)"/>
            </summary>
            <param name="targets"></param>
            <param name="start"></param>
            <param name="zoneid"></param>
            <returns></returns>
            <remarks>This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task)"/>.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.CanFullyNavigateFrom(System.Collections.Generic.ICollection{ff14bot.ServiceClient.CanFullyNavigateTarget},Clio.Utilities.Vector3,System.UInt16)">
            <summary>
            Check if multiple locations can be path from to one specific spot
            
            This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task)"/>
            </summary>
            <param name="starts"></param>
            <param name="target"></param>
            <param name="zoneid"></param>
            <returns></returns>
            <remarks>This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task)"/>.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.CanFullyNavigateTo(System.Collections.Generic.ICollection{ff14bot.ServiceClient.CanFullyNavigateTarget})">
            <summary>
            Check if multiple locations can be pathed to on the current zone
            </summary>
            <param name="targets"></param>
            <returns></returns>
            <remarks>This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="M:Buddy.Coroutines.Coroutine.ExternalTask(System.Threading.Tasks.Task)"/>.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.AtLocation(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            Gets a bool that indicates whether one position is considered to be at another position.
            Can be used to check if the player has reached a destination, for example.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>True if the first point is at the second point; otherwise false.</returns>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.Clear">
            <summary>
            Clears the current path in this nav provider.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.ClearStuckInfo">
            <summary>Clears the stuck handler information.</summary>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.LookupPathInfo(ff14bot.Objects.GameObject,System.Single)">
            <summary>
            Looks up the information of a path going to an object.
            </summary>
            <param name="obj">The object.</param>
            <param name="distanceTolerance">The distance to get within <paramref name="obj"/>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="obj"/> is <c>null</c>.</exception>
            <returns>The path information. Always non-<c>null</c>.</returns>
            <remarks>Path information lookups are in general extremely fast to perform. They require minimal
            CPU computation.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.SamplePointsAsync(ff14bot.Pathing.SamplePointsParameters)">
            <summary>Samples the navigator for points.</summary>
            <param name="parameters">The parameters.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="parameters"/> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="parameters"/> is in an invalid state.</exception>
            <returns>The result of the sampling.</returns>
            <remarks>This is an external asynchronous task, and should not be awaited
            directly from coroutines. See <see cref="!:Coroutine.ExternalTask(Func&lt;Task&gt;)"/>.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.OnSetAsCurrent">
            <summary>
            Called when this <see cref="T:ff14bot.Pathing.NavigationProvider"/> is set as the current by assigning it to <see cref="P:ff14bot.Navigation.Navigator.NavigationProvider"/>.
            </summary>
            <remarks>
            <para>When this is called, the current has not yet been updated, so <see cref="P:ff14bot.Pathing.NavigationProvider.IsCurrent"/> will still be false.</para>
            </remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.OnRemoveAsCurrent">
            <summary>
            Called when this <see cref="T:ff14bot.Pathing.NavigationProvider"/> is removed as the current by assigning a different provider to <see cref="P:ff14bot.Navigation.Navigator.NavigationProvider"/>.
            </summary>
            <remarks>
            <para>When this is called, the current has not yet been updated, so <see cref="P:ff14bot.Pathing.NavigationProvider.IsCurrent"/> will still be true.</para>
            </remarks>
        </member>
        <member name="M:ff14bot.Pathing.NavigationProvider.GetCurrentStraightPathPoints">
            <summary>Gets the points for the path the player is currently moving on.</summary>
            <returns>The path points, starting with our current location.
            If the player is not on a path, returns an empty list.</returns>
        </member>
        <member name="T:ff14bot.Pathing.PathInformation">
            <summary>
            Represents information about a path distance to an object.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.PathInformation.#ctor(ff14bot.Pathing.PathNavigability,ff14bot.Pathing.PathDistanceType,System.Single)">
            <summary>Constructs a new instance.</summary>
            <param name="navigability">The type.</param>
            <param name="distanceType">The distance type.</param>
            <param name="distance">The distance.</param>
        </member>
        <member name="P:ff14bot.Pathing.PathInformation.Navigability">
            <summary>Information about the navigability to the object.</summary>
        </member>
        <member name="P:ff14bot.Pathing.PathInformation.DistanceType">
            <summary>The type of value the <see cref="P:ff14bot.Pathing.PathInformation.Distance"/> propery indicates.</summary>
            <remarks>
            This is <see cref="F:ff14bot.Pathing.PathDistanceType.None"/> unless <see cref="P:ff14bot.Pathing.PathInformation.Navigability"/>
            is <see cref="F:ff14bot.Pathing.PathNavigability.Navigable"/>.
            </remarks>
        </member>
        <member name="P:ff14bot.Pathing.PathInformation.Distance">
            <summary>The distance value of the path. See <see cref="P:ff14bot.Pathing.PathInformation.DistanceType"/> for how to interpret this.</summary>
        </member>
        <member name="T:ff14bot.Pathing.PathNavigability">
            <summary>Represents path information.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathNavigability.Unknown">
            <summary>It is unknown whether a location close enough to the object can be navigated to.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathNavigability.Unnavigable">
            <summary>The player cannot navigate to a location close enough to the object.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathNavigability.Navigable">
            <summary>There exists a location close enough to the object that can be navigated to.</summary>
        </member>
        <member name="T:ff14bot.Pathing.PathDistanceType">
            <summary>Represents the different kinds of path distance values.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathDistanceType.None">
            <summary>No distance is associated with this path information.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathDistanceType.AtLeast">
            <summary>
            The player can navigate to the object, but the exact
            path distance was not calculated because it was too far away.
            The object is at least as far away as the result.
            </summary>
        </member>
        <member name="F:ff14bot.Pathing.PathDistanceType.Approximately">
            <summary>
            The player can navigate to the object and the approximate path
            distance is available in the result.
            </summary>
        </member>
        <member name="T:ff14bot.Pathing.SamplePointsParameters">
            <summary>
            Represents parameters for sampling points with a navigation provider.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.SamplePointsParameters.Type">
            <summary>The type of points to sample.</summary>
        </member>
        <member name="P:ff14bot.Pathing.SamplePointsParameters.Circles">
            <summary>The circles to sample points within.</summary>
        </member>
        <member name="P:ff14bot.Pathing.SamplePointsParameters.NumPoints">
            <summary>The number of points to try to find.</summary>
        </member>
        <member name="P:ff14bot.Pathing.SamplePointsParameters.NavigabilityLocation">
            <summary>
            The location that the sampled points must be navigable from
            or to, depending on <see cref="P:ff14bot.Pathing.SamplePointsParameters.Type"/>.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.SamplePointsParameters.NavigableFromDestinationTolerance">
            <summary>
            When <see cref="P:ff14bot.Pathing.SamplePointsParameters.Type"/> is <see cref="F:ff14bot.Pathing.SamplePointsType.NavigableFrom"/>,
            specifies the distance we must be able to get within <see cref="P:ff14bot.Pathing.SamplePointsParameters.NavigabilityLocation"/>
            from the sampled points.
            </summary>
            <remarks>See <see cref="P:ff14bot.Pathing.MoveToParameters.DistanceTolerance"/>.</remarks>
        </member>
        <member name="M:ff14bot.Pathing.SamplePointsParameters.Any(System.Collections.Generic.IEnumerable{ff14bot.Pathing.SampleCircle},System.Int32,System.UInt16)">
            <summary>
            Find any points in the specified circles.
            </summary>
            <param name="circles">The circles.</param>
            <param name="numPoints">The number of points to try to sample.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:ff14bot.Pathing.SamplePointsParameters.HighlyConnected(System.Collections.Generic.IEnumerable{ff14bot.Pathing.SampleCircle},System.Int32,System.UInt16)">
            <summary>
            Find points in the specified circles that are highly connected (i.e. with navigability
            to lots of other points).
            </summary>
            <param name="circles">The circles to sample points in.</param>
            <param name="numPoints">The number of points to try to sample.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:ff14bot.Pathing.SamplePointsParameters.NavigableTo(System.Collections.Generic.IEnumerable{ff14bot.Pathing.SampleCircle},System.Int32,Clio.Utilities.Vector3,System.UInt16)">
            <summary>
            Find points in the specified cirles that can be navigated to from the specified location.
            </summary>
            <param name="circles">The circles to sample points in.</param>
            <param name="numPoints">The number of points to try to sample.</param>
            <param name="from">The location we must be able to navigate from.
            Usually our own position.</param>
            <returns>The parameters.</returns>
        </member>
        <member name="M:ff14bot.Pathing.SamplePointsParameters.NavigableFrom(System.Collections.Generic.IEnumerable{ff14bot.Pathing.SampleCircle},System.Int32,Clio.Utilities.Vector3,System.UInt16,System.Single)">
            <summary>
            Find points in the specified circles that can be navigated from to the specified location.
            </summary>
            <param name="circles">The circles to sample points in.</param>
            <param name="numPoints">The number of points to try to sample.</param>
            <param name="to">The location we must be able to navigate to.</param>
            <param name="destinationTolerance">The destination to get within <paramref name="to"/></param>
            <returns>The parameters.</returns>
        </member>
        <member name="T:ff14bot.Pathing.SamplePointsType">
            <summary>
            Represents the types of points to sample with a navigation provider.
            </summary>
        </member>
        <member name="F:ff14bot.Pathing.SamplePointsType.Any">
            <summary>Finds any points.</summary>
        </member>
        <member name="F:ff14bot.Pathing.SamplePointsType.HighlyConnected">
            <summary>
            Find points which are highly connected (i.e. with navigability to lots
            of other positions).
            </summary>
        </member>
        <member name="F:ff14bot.Pathing.SamplePointsType.NavigableTo">
            <summary>
            Find points to which we can navigate from the specified
            location in <see cref="P:ff14bot.Pathing.SamplePointsParameters.NavigabilityLocation"/>.
            </summary>
        </member>
        <member name="F:ff14bot.Pathing.SamplePointsType.NavigableFrom">
            <summary>
            Find points from which we can navigate to the specified
            location in <see cref="P:ff14bot.Pathing.SamplePointsParameters.NavigabilityLocation"/>.
            </summary>
        </member>
        <member name="T:ff14bot.Pathing.SampleCircle">
            <summary>
            Represents a circle (in 2D) to sample points within.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.SampleCircle.Center">
            <summary>The center of the circle.</summary>
        </member>
        <member name="P:ff14bot.Pathing.SampleCircle.Radius">
            <summary>The radius of the circle.</summary>
        </member>
        <member name="T:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider">
            <summary>Provides a helper for wrapping a different navigation provider.</summary>
            <remarks>This class is meant to be derived from when wrapping a different
            navigation provider to extend or remove certain features from it.</remarks>
        </member>
        <member name="P:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.Original">
            <summary>The original nav provider, which is being wrapped.</summary>
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.OnPulse">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.MoveTo(ff14bot.Pathing.MoveToParameters)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.AtLocation(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.Clear">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.ClearStuckInfo">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.LookupPathInfo(ff14bot.Objects.GameObject,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.OnSetAsCurrent">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.OnRemoveAsCurrent">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.SamplePointsAsync(ff14bot.Pathing.SamplePointsParameters)">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.Service_Navigation.WrappingNavigationProvider.GetCurrentStraightPathPoints">
            <inheritdoc />
        </member>
        <member name="M:ff14bot.Pathing.IServicePathPartExecutor.OnReusing(System.Boolean,System.Boolean)">
            <summary>Reuses this part as neither the start or end part of a full path.</summary>
            <param name="isStart"></param>
            <param name="isEnd"></param>
        </member>
        <member name="P:ff14bot.Pathing.IServicePathPartExecutor.IsInterruptible">
            <summary>
            If <c>true</c>, this part can be interrupted and a new path generated.
            Otherwise the part must be executed to end before a new path is generated (eg. elevators).
            </summary>
        </member>
        <member name="F:ff14bot.Pathing.PathProgressResult.Unusable">
            <summary>The path is unusable, so force the path to be regenerated
            by removing it from caches and so on.</summary>
        </member>
        <member name="F:ff14bot.Pathing.PathProgressResult.OffPath">
            <summary>
            We are not on the path anymore, so drop the current path.
            Equivalent to returning false from <see cref="M:ff14bot.Pathing.IServicePathPartExecutor.UpdateCurrent(Clio.Utilities.Vector3)"/>.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePath.LogGenerated">
            <summary>
            Logs that this path has been generated. Should be used
            immediately after generation.
            </summary>
        </member>
        <member name="P:ff14bot.Pathing.ServicePathCorridor.Portals">
            <summary>
            These are the indices of the segment end points that connect each polygon.
            For example: Portals[0] and Portals[1] are indices of the vertices in
            Outline that connect the first polygon to the second.
            In general: Polygon i connects to polygon i + 1 with segment endpoints
            Portals[(i*2)+0] and Portals[(i*2)+1].
            The first index is the index of the outline vertex "on the way" to the end destination, and
            the second is the index "when coming back". This for example means that the vertices for a
            polygon i in the middle of the corridor are:
            1. Portals[(i-1)*2+1] to Portals[(i-1)*2+0] (Previous portal)
            2. Portals[(i-1)*2+0] to Portals[i*2+0] (Right side of corridor belonging to poly)
            3. Portals[i*2+0] to Portals[i*2+1] (Next portal)
            4. Portals[i*2+1] to Portals[(i-1)*2+1] (Left side of corridor belonging to poly)
            See <see cref="M:ff14bot.Pathing.ServicePathCorridor.GetPolyVerts(System.Int32,Clio.Utilities.Vector3[],System.Int32@)"/> for start and end cases.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.UpdateCurrent(Clio.Utilities.Vector3)">
            <summary>
            Advance current state to where the location is currently.
            This only checks a few polys ahead. It should work for almost all
            normal cases -- otherwise TryReuse can be used.
            Returns false if location is not inside one of the few upcoming polys.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.SnapToPoly(Clio.Utilities.Vector3,System.Int32,System.Int32,Clio.Utilities.Vector3@,System.Single,System.Single)">
            <summary>
            Snap <paramref name="point"/> to nearest poly in specified polygons
            and return nearest polygon index and closest point in that polygon.
            The point is snapped to the nearest poly in 2D that contains the point
            height-wise according to the height tolerance and poly height bounds.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.GetPolyVerts(System.Int32,Clio.Utilities.Vector3[],System.Int32@)">
            <summary>
            Get the points for a polygon.
            If <paramref name="poly" /> = 0, use start poly.
            If <paramref name="poly" /> = portals.Length / 2, use end poly.
            Otherwise use poly delimited by portals poly - 1 and poly.
            <paramref name="verts"/> must have >= <see cref="F:ff14bot.Pathing.ServicePathCorridor.MaxNumPolyVerts"/> elements.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.FindSteerTarget(Clio.Utilities.Vector3)">
            <summary>
            Find next point to seek in corridor.
            If we can move directly to end point: Use _endPoint.
            Otherwise finds the next corner that can be moved directly to
            using a funnel algorithm. The funnel is tightened to avoid hugging
            walls and then a point ahead of us is picked.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.MovePointAheadInCorridor(Clio.Utilities.Vector3)">
            <summary>
            Moves the point ahead while staying inside the corridor.
            It is often better to move further than the exact string-pulled
            point, as that gives more time to the navigation to find a new steer
            target when we get close enough to portals. This method accomplishes that
            by 2D raycasting on the corridor.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.Raycast(Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            Raycast from start to end within the corridor. Returns
            value so that start + (end - start) * value is the
            wall hit. The start point is assumed to be inside the corridor.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.Winding2D(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3)">
            <summary>
            Computes the 2D winding order of the 3 points.
            Returns: -1 if points are clockwise
                      0 if points are collinear
                      1 if points are counterclockwise
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.DistancePtSeg2DSquared(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.Single@)">
            <summary>
            Finds the squared distance from pt to the line segment between start and end.
            Returns: Squared distance, and t so that start + (end - start) * t is the closest point to pt.
            </summary>
        </member>
        <member name="M:ff14bot.Pathing.ServicePathCorridor.IntersectSegSeg2D(Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3,Clio.Utilities.Vector3,System.Single@,System.Single@)">
            <summary>Finds the intersection between two line segments in 2D.</summary>
            <return>s so that ap + (aq - ap)*s is the intersection point, and t
            so that bp + (bq - bp)*t is the intersection point.</return>
        </member>
        <member name="F:ff14bot.ServiceClient.SnapBehavior.None">
            <summary>Do not apply any snapping behavior.</summary>
        </member>
        <member name="F:ff14bot.ServiceClient.SnapBehavior.ToWaterSurface">
            <summary>Snap upwards to find a water surface. Useful while swimming.</summary>
        </member>
        <member name="F:ff14bot.ServiceClient.SnapBehavior.ToClosestSurface">
            <summary>Snap to closest surface. Useful while swimming in areas where we need to swim underground.</summary>
        </member>
        <member name="M:ff14bot.ServiceClient.NavigationPath.op_Inequality(ff14bot.ServiceClient.NavigationPath,ff14bot.ServiceClient.NavigationPath)">
            <summary>
            Compares two NavigationPaths for inequality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:ff14bot.ServiceClient.NavigationPath.op_Equality(ff14bot.ServiceClient.NavigationPath,ff14bot.ServiceClient.NavigationPath)">
            <summary>
            Compares two Navigation paths for equality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:ff14bot.ServiceClient.NavigationPath.PathLength">
            <summary> Gets the length of the path. </summary>
            <value> The length of the path. </value>
        </member>
        <member name="T:ff14bot.ServiceClient.IRbServiceHooks">
            <summary>Represents hooks into the buddy service.</summary>
        </member>
        <member name="M:ff14bot.ServiceClient.IRbServiceHooks.OnAccessExpired(Buddy.Service.Core.AccessExpiredNotification)">
            <summary>Called when the user's access to the service has expired.</summary>
        </member>
        <member name="M:ff14bot.ServiceClient.IRbServiceHooks.OnLatencyUpdate(System.TimeSpan)">
            <summary>Called when a new latency result is available.</summary>
            <param name="latency">The roundtrip latency.</param>
        </member>
        <member name="M:ff14bot.ServiceClient.IRbServiceHooks.OnServiceConnectionGone">
            <summary>Called when the service connection disappears.</summary>
            <returns>The disposition on how to handle the situation. Must be non-<c>null</c>.</returns>
            <remarks>
            <para>
            This function is called if the service connection disappears during runtime when
            it had already been successfully opened. The user should tell the framework how to handle the
            situation by returning a proper instance of <see cref="T:Buddy.Service.Client.ConnectionGoneDisposition" />.
            </para>
            <para>
            If the user returns a disposition that indicates that a reconnection attempt should be made,
            the framework automatically tries to reconnect after the specified delay by using the details
            in the initial <see cref="M:Buddy.Service.Client.BuddyService.ConnectAsync(Buddy.Service.Client.ConnectRegion,Buddy.Service.Core.Component[],Buddy.Service.Core.ProductBuildType,System.String,System.Int32,System.Int64,System.Net.IPEndPoint,System.Threading.CancellationToken)" /> call. If the reconnection attempt fails
            the <see cref="M:Buddy.Service.Client.IBuddyServiceHooks.OnServiceReconnectFailed(System.Int32,Buddy.Service.Client.ServiceConnectResult)" /> method is called.
            </para>
            </remarks>
        </member>
        <member name="M:ff14bot.ServiceClient.IRbServiceHooks.OnServiceReconnectFailed(System.Int32,ff14bot.ServiceClient.RbClientConnectResult)">
            <summary>Called if a reconnect requested by <see cref="M:Buddy.Service.Client.IBuddyServiceHooks.OnServiceConnectionGone" /> fails.</summary>
            <param name="tries">The number of times the reconnection has been tried. This is minimum <c>1</c>.</param>
            <param name="result">The result of the previous reconnection attempt. <see cref="P:Buddy.Service.Client.ServiceConnectResult.Type" /> is guaranteed
            not to be <see cref="F:Buddy.Service.Client.ServiceConnectResultType.Success" />.</param>
            <returns>The disposition on how to handle the situation. See <see cref="M:Buddy.Service.Client.IBuddyServiceHooks.OnServiceConnectionGone" />.</returns>
            <remarks>See <see cref="M:Buddy.Service.Client.IBuddyServiceHooks.OnServiceConnectionGone" />.</remarks>
        </member>
        <member name="M:ff14bot.ServiceClient.IRbServiceHooks.OnReconnectSucceeded">
            <summary>
            Called when a reconnect requested through <see cref="M:Buddy.Service.Client.IBuddyServiceHooks.OnServiceConnectionGone" /> or <see cref="M:Buddy.Service.Client.IBuddyServiceHooks.OnServiceReconnectFailed(System.Int32,Buddy.Service.Client.ServiceConnectResult)" />
            succeeds.
            </summary>
        </member>
        <member name="M:ff14bot.ServiceClient.IRbServiceHooks.OnUnhandledMessage(System.UInt16,Buddy.Networking.Core.IncomingMessage)">
            <summary>
            Called when an incoming message was unhandled by the standard service system.
            This most likely means that the message is a product message.
            </summary>
            <param name="opcode">The opcode for the product message.</param>
            <param name="message">The message.</param>
            <returns>Return <c>true</c> if the message was handled; otherwise return <c>false</c>.
            The service logs a message if <c>false</c> is returned.</returns>
        </member>
        <member name="T:ff14bot.ServiceClient.RbConnectionGoneDisposition">
            <summary>Represents a disposition of what to do when the service connection has disappeared.</summary>
        </member>
        <member name="M:ff14bot.ServiceClient.RbConnectionGoneDisposition.DoNothing">
            <summary>The framework should do nothing.</summary>
            <returns></returns>
        </member>
        <member name="M:ff14bot.ServiceClient.RbConnectionGoneDisposition.Reconnect(System.TimeSpan)">
            <summary>The framework should try to reconnect.</summary>
            <param name="delay">The delay to wait before the reconnection attempt.</param>
        </member>
        <member name="T:ff14bot.ServiceClient.RbClientConnectResult">
            <summary>Represents the result of connecting to the buddy service.</summary>
        </member>
        <member name="P:ff14bot.ServiceClient.RbClientConnectResult.Type">
            <summary>The type of the result.</summary>
        </member>
        <member name="P:ff14bot.ServiceClient.RbClientConnectResult.ConnectResult">
            <summary>The result of establishing the network connection.</summary>
        </member>
        <member name="P:ff14bot.ServiceClient.RbClientConnectResult.LoginResponse">
            <summary>
            The login response. Not valid if <see cref="P:Buddy.Service.Client.ServiceConnectResult.Type" />
            is <see cref="F:Buddy.Service.Client.ServiceConnectResultType.ConnectionFailed" />.
            </summary>
        </member>
        <member name="M:ff14bot.ServiceClient.RbClientConnectResult.#ctor(Buddy.Service.Client.ServiceConnectResultType,Buddy.Networking.ClientSide.ConnectResult,System.String)">
            <summary>Constructs a new instance.</summary>
            <param name="type">The type.</param>
            <param name="connectResult">The network connection result.</param>
            <param name="loginResponse">The login response.</param>
        </member>
        <member name="M:ff14bot.ServiceClient.RbClientConnectResult.ToString">
            <summary>Gets a string representation of the result.</summary>
            <returns>The string representation.</returns>
        </member>
        <member name="M:ff14bot.ServiceClient.RbService.#ctor(ff14bot.ServiceClient.IRbServiceHooks)">
            <summary>Constructs an instance.</summary>
            <param name="hooks">The hooks into the service.</param>
        </member>
        <member name="P:ff14bot.ServiceClient.RbService.IsConnected">
            <summary>
            Gets a bool that indicates whether the service is currently connected to and can be used.
            </summary>
        </member>
        <member name="M:ff14bot.ServiceClient.RbService.ConnectAsync(System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>Connects to the service and attempts authentication with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="overrideEndPoint">An end point to override the default end point.</param>
            <param name="ct">The cancellation token.</param>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed. See <see cref="P:Buddy.Service.Client.BuddyService.IsDisposed" />.</exception>
            <exception cref="T:System.InvalidOperationException">The service is already connected or a connection is already underway.</exception>
            <returns>The result of the connection attempt.</returns>
        </member>
        <member name="M:ff14bot.ServiceClient.RbService.DisconnectAsync">
            <summary>Disconnects from the service.</summary>
            <exception cref="T:System.ObjectDisposedException">This instance has been disposed. See <see cref="P:Buddy.Service.Client.BuddyService.IsDisposed" />.</exception>
        </member>
        <member name="M:ff14bot.ServiceClient.RbService.SendAndReceiveAsync``1(System.UInt16,System.Action{Buddy.Networking.Core.OutgoingMessage},System.Func{Buddy.Networking.Core.IncomingMessage,``0},System.Threading.CancellationToken)">
            <summary>Sends a message and receives a response.</summary>
            <typeparam name="T">The type.</typeparam>
            <param name="opcode">The product opcode.</param>
            <param name="writer">A writer to write the message to an <see cref="T:Buddy.Networking.Core.OutgoingMessage" /> instance.</param>
            <param name="reader">A reader to read a <typeparamref name="T" /> from the received message.</param>
            <param name="ct">The cancellation token.</param>
            <exception cref="T:Buddy.Networking.ServiceClient.ConnectionClosedException">The connection was closed.</exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="ct" /> was canceled.</exception>
            <returns>The result of <paramref name="reader" /> once the message is received. Cannot be <c>null</c>.</returns>
        </member>
        <member name="M:ff14bot.ServiceClient.RbService.SendAndReceiveAsync(System.UInt16,System.Action{Buddy.Networking.Core.OutgoingMessage},System.Threading.CancellationToken)">
            <summary>Sends a message and waits until it has been handled.</summary>
            <param name="opcode">The product opcode.</param>
            <param name="writer">A writer to write the message to an <see cref="T:Buddy.Networking.Core.OutgoingMessage" /> instance.</param>
            <param name="ct">The cancellation token.</param>
            <exception cref="T:Buddy.Networking.ServiceClient.ConnectionClosedException">The connection was closed.</exception>
            <exception cref="T:System.OperationCanceledException"><paramref name="ct" /> was canceled.</exception>
        </member>
        <member name="M:ff14bot.ServiceClient.RbService.Send(System.UInt16,System.Action{Buddy.Networking.Core.OutgoingMessage})">
            <summary>Sends a message.</summary>
            <param name="opcode">The product opcode of the message.</param>
            <param name="writer">The writer for the message.</param>
            <returns><c>true</c> if the message was successfully queued;
            otherwise <c>false</c> if the connection is not open.</returns>
        </member>
        <member name="P:ff14bot.ServiceClient.RbService.IsDisposed">
            <summary>Gets a bool that indicates whether this instance has been disposed.</summary>
        </member>
        <member name="T:ff14bot.LoginWindow">
            <summary>
            Interaction logic for LoginWindow.xaml
            </summary>
            <summary>
            LoginWindow
            </summary>
        </member>
        <member name="M:ff14bot.LoginWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.ProcessSelectorWindow">
            <summary>
            Interaction logic for ProcessSelectorWindow.xaml
            </summary>
            <summary>
            ProcessSelectorWindow
            </summary>
        </member>
        <member name="M:ff14bot.ProcessSelectorWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:ff14bot.UpdateWindow">
            <summary>
            Interaction logic for UpdateWindow.xaml
            </summary>
            <summary>
            UpdateWindow
            </summary>
        </member>
        <member name="M:ff14bot.UpdateWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:TreeSharp.ActionRunCoroutine">
            <summary>
            Represents an action that runs a coroutine.
            </summary>
            <remarks>
            <para>The <see cref="T:TreeSharp.RunStatus"/> that this action returns depends on the <see cref="T:Buddy.Coroutines.Coroutine"/> being run.</para>
            <para>If the coroutine yields, the action returns <see cref="F:TreeSharp.RunStatus.Running"/> and does not resume until next tick.</para>
            <para>If the coroutine returns boolean <c>false</c>, the action returns <see cref="F:TreeSharp.RunStatus.Failure"/>.</para>
            <para>If the coroutine terminates with any other result than boolean <c>false</c>, the action returns <see cref="F:TreeSharp.RunStatus.Success"/>.</para>
            </remarks>
        </member>
        <member name="M:TreeSharp.ActionRunCoroutine.#ctor(System.Func{System.Object,Buddy.Coroutines.Coroutine})">
            <summary>
            Initializes a new instance with the specified coroutine producer.
            </summary>
            <param name="coroutineProducer">A function that produces a coroutine.</param>
        </member>
        <member name="M:TreeSharp.ActionRunCoroutine.#ctor(System.Func{System.Object,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Initializes a new instance with the specified task producer.
            </summary>
            <param name="taskProducer">A function that produces a task that is regarded as the root of a coroutine.</param>
        </member>
        <member name="M:TreeSharp.ActionRunCoroutine.#ctor(System.Func{System.Object,ff14bot.Behavior.CoroutineTask{System.Boolean}})">
            <summary>
            Initializes a new instance with the specified coroutine task producer.
            </summary>
            <param name="taskProducer">A function that produces a coroutine task that is regarded as the root of a coroutine.</param>
        </member>
        <member name="M:TreeSharp.ActionRunCoroutine.#ctor(System.Func{System.Object,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance with the specified task producer.
            </summary>
            <param name="taskProducer">A function that produces a task that is regarded as the root of a coroutine.</param>
        </member>
        <member name="M:TreeSharp.ActionRunCoroutine.#ctor(System.Func{System.Object,ff14bot.Behavior.CoroutineTask})">
            <summary>
            Initializes a new instance with the specified coroutine task producer.
            </summary>
            <param name="taskProducer">A function that produces a coroutine task that is regarded as the root of a coroutine.</param>
        </member>
        <member name="T:SQLite.SQLiteConnection">
            <summary>
            Represents an open connection to a SQLite database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="F:SQLite.SQLiteConnection._preserveDuringLinkMagic">
            <summary>
            Used to list some code that we want the MonoTouch linker
            to see, but that we never want to actually execute.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:SQLite.SQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping(System.Type,SQLite.CreateFlags)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>         
            <param name="createFlags">
            Optional flags allowing implicit PK and indexes based on naming conventions
            </param>     
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping``1">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable``1(SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable(System.Type,SQLite.CreateFlags)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <param name="createFlags">Optional flags allowing implicit PK and indexes based on naming conventions.</param>  
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="indexName">Name of the index to create</param>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Creates an index for the specified table and column.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnName">Name of the column to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateIndex(System.String,System.String[],System.Boolean)">
            <summary>
            Creates an index for the specified table and columns.
            </summary>
            <param name="tableName">Name of the database table</param>
            <param name="columnNames">An array of column names to index</param>
            <param name="unique">Whether the index should be unique</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SQLite.SQLiteConnection.CreateIndex``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Boolean)" -->
        <member name="M:SQLite.SQLiteConnection.NewCommand">
            <summary>
            Creates a new SQLiteCommand. Can be overridden to provide a sub-class.
            </summary>
            <seealso cref="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)"/>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the object type.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="P:SQLite.SQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:SQLite.SQLiteConnection.SaveTransactionPoint">
            <summary>
            Creates a savepoint in the database at the current point in the transaction timeline.
            Begins a new transaction if one is not in progress.
            
            Call <see cref="M:SQLite.SQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
            Call <see cref="M:SQLite.SQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
            Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction, committing all changes.
            </summary>
            <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String,System.Boolean)">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
            <param name="noThrow">true to avoid throwing exceptions, false otherwise</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Release(System.String)">
            <summary>
            Releases a savepoint returned from <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint 
               makes changes since that savepoint permanent if the savepoint began the transaction,
               or otherwise the changes are permanent pending a call to <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            
            The RELEASE command is like a COMMIT for a SAVEPOINT.
            </summary>
            <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:SQLite.SQLiteConnection.RunInTransaction(System.Action)" -->
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="T:SQLite.SQLiteConnectionString">
            <summary>
            Represents a parsed connection string.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)">
             <summary>
             Invoked every time an instance is loaded from the database.
             </summary>
             <param name='obj'>
             The newly created object.
             </param>
             <remarks>
             This can be overridden in combination with the <see cref="M:SQLite.SQLiteConnection.NewCommand"/>
             method to hook into the life-cycle of objects.
            
             Type safety is not possible because MonoTouch does not support virtual generic methods.
             </remarks>
        </member>
        <member name="T:SQLite.PreparedSqlLiteInsertCommand">
            <summary>
            Since the insert never changed, we only need to prepare once.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.CompileNullBinaryExpression(System.Linq.Expressions.BinaryExpression,SQLite.TableQuery{`0}.CompileResult)">
            <summary>
            Compiles a BinaryExpression where one of the parameters is null.
            </summary>
            <param name="parameter">The non-null parameter</param>
        </member>
        <member name="M:Giga.Common.NavMesh.RemoveConnection(System.Int32,System.Int32)">
            <summary>
            Removes the connection from <paramref name="node1"/> to <paramref name="node2"/>.
            </summary>
            <param name="node1"></param>
            <param name="node2"></param>
            <returns>A boolean indicating whether the connection was successfully removed.</returns>
        </member>
        <member name="M:Giga.Common.NavMeshBuilder.Clean">
            <summary>
            Removes all invalid (deleted) nodes and updates neighbor refs.
            </summary>
        </member>
        <member name="M:Giga.Common.NavMeshBuilder.FindClosest(Clio.Utilities.Vector3,System.Predicate{Giga.Common.NavMeshBuilderNode})">
            <summary>
            Finds the closest node to a location that matches a predicate.
            </summary>
            <param name="loc"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Giga.Common.NavMeshBuilder.AddConnection(Giga.Common.NavMeshBuilderNode,Giga.Common.NavMeshBuilderNode)">
            <summary>
            Adds a connection from the <paramref name="this"/>-node to the <paramref name="neighbor"/> node.
            </summary>
            <param name="this"></param>
            <param name="neighbor"></param>
        </member>
        <member name="T:NeoGaia.ConnectionHandler.Packet">
            <summary>
                A base packet class that handles serialization, and deserialization.
                All custom packets must inherit from this class, and be adorned with the <see cref="T:ProtoBuf.ProtoContractAttribute" />
                attribute.
            </summary>
            <remarks>https://code.google.com/p/protobuf-net/wiki/GettingStarted</remarks>
        </member>
        <member name="M:NeoGaia.ConnectionHandler.NavigationPath.op_Inequality(NeoGaia.ConnectionHandler.NavigationPath,NeoGaia.ConnectionHandler.NavigationPath)">
            <summary>
            Compares two NavigationPaths for inequality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="M:NeoGaia.ConnectionHandler.NavigationPath.op_Equality(NeoGaia.ConnectionHandler.NavigationPath,NeoGaia.ConnectionHandler.NavigationPath)">
            <summary>
            Compares two Navigation paths for equality.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:NeoGaia.ConnectionHandler.NavigationPath.PathLength">
            <summary> Gets the length of the path. </summary>
            <value> The length of the path. </value>
        </member>
        <member name="T:Pathfinding.Arc">
            <summary>
            An arc is defined with its two extremity nodes StartNode and EndNode therefore it is oriented.
            It is also characterized by a crossing factor named 'Weight'.
            This value represents the difficulty to reach the ending node from the starting one.
            </summary>
        </member>
        <member name="M:Pathfinding.Arc.#ctor(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Arc constructor.
            </summary>
            <exception cref="T:System.ArgumentNullException">Extremity nodes cannot be null.</exception>
            <exception cref="T:System.ArgumentException">StartNode and EndNode must be different.</exception>
            <param name="Start">The node from which the arc starts.</param>
            <param name="End">The node to which the arc ends.</param>
        </member>
        <member name="P:Pathfinding.Arc.StartNode">
            <summary>
            Gets/Sets the node from which the arc starts.
            </summary>
            <exception cref="T:System.ArgumentNullException">StartNode cannot be set to null.</exception>
            <exception cref="T:System.ArgumentException">StartNode cannot be set to EndNode.</exception>
        </member>
        <member name="P:Pathfinding.Arc.EndNode">
            <summary>
            Gets/Sets the node to which the arc ends.
            </summary>
            <exception cref="T:System.ArgumentNullException">EndNode cannot be set to null.</exception>
            <exception cref="T:System.ArgumentException">EndNode cannot be set to StartNode.</exception>
        </member>
        <member name="P:Pathfinding.Arc.Weight">
            <summary>
            Sets/Gets the weight of the arc.
            This value is used to determine the cost of moving through the arc.
            </summary>
        </member>
        <member name="P:Pathfinding.Arc.Passable">
            <summary>
            Gets/Sets the functional state of the arc.
            'true' means that the arc is in its normal state.
            'false' means that the arc will not be taken into account (as if it did not exist or if its cost were infinite).
            </summary>
        </member>
        <member name="P:Pathfinding.Arc.Length">
            <summary>
            Gets arc's length.
            </summary>
        </member>
        <member name="M:Pathfinding.Arc.CalculateLength">
            <summary>
            Performs the calculous that returns the arc's length
            Can be overriden for derived types of arcs that are not linear.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.Arc.Cost">
            <summary>
            Gets the cost of moving through the arc.
            Can be overriden when not simply equals to Weight*Length.
            </summary>
        </member>
        <member name="M:Pathfinding.Arc.ToString">
            <summary>
            Returns the textual description of the arc.
            object.ToString() override.
            </summary>
            <returns>String describing this arc.</returns>
        </member>
        <member name="M:Pathfinding.Arc.Equals(System.Object)">
            <summary>
            Object.Equals override.
            Tells if two arcs are equal by comparing StartNode and EndNode.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot compare an arc with another type.</exception>
            <param name="O">The arc to compare with.</param>
            <returns>'true' if both arcs are equal.</returns>
        </member>
        <member name="M:Pathfinding.Arc.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="T:Pathfinding.Heuristic">
            <summary>
            A heuristic is a function that associates a value with a node to gauge it considering the node to reach.
            </summary>
        </member>
        <member name="T:Pathfinding.AStarz">
            <summary>
            Class to search the best path between two nodes on a graph.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.EuclidianHeuristic">
            <summary>
            Heuristic based on the euclidian distance : Sqrt(Dx²+Dy²+Dz²)
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.MaxAlongAxisHeuristic">
            <summary>
            Heuristic based on the maximum distance : Max(|Dx|, |Dy|, |Dz|)
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.ManhattanHeuristic">
            <summary>
            Heuristic based on the manhattan distance : |Dx|+|Dy|+|Dz|
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.ChoosenHeuristic">
            <summary>
            Gets/Sets the heuristic that AStar will use.
            It must be homogeneous to arc's cost.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.DijkstraHeuristicBalance">
            <summary>
            This value must belong to [0; 1] and it determines the influence of the heuristic on the algorithm.
            If this influence value is set to 0, then the search will behave in accordance with the Dijkstra algorithm.
            If this value is set to 1, then the cost to come to the current node will not be used whereas only the heuristic will be taken into account.
            </summary>
            <exception cref="T:System.ArgumentException">Value must belong to [0;1].</exception>
        </member>
        <member name="M:Pathfinding.AStarz.#ctor(Pathfinding.Graph)">
            <summary>
            AStar Constructor.
            </summary>
            <param name="G">The graph on which AStar will perform the search.</param>
        </member>
        <member name="M:Pathfinding.AStarz.SearchPath(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Searches for the best path to reach the specified EndNode from the specified StartNode.
            </summary>
            <exception cref="T:System.ArgumentNullException">StartNode and EndNode cannot be null.</exception>
            <param name="StartNode">The node from which the path must start.</param>
            <param name="EndNode">The node to which the path must end.</param>
            <returns>'true' if succeeded / 'false' if failed.</returns>
        </member>
        <member name="P:Pathfinding.AStarz.Open">
            <summary>
            Use for debug in 'step by step' mode only.
            Returns all the tracks found in the 'Open' list of the algorithm at a given time.
            A track is a list of the nodes visited to come to the current node.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.Closed">
            <summary>
            Use for debug in a 'step by step' mode only.
            Returns all the tracks found in the 'Closed' list of the algorithm at a given time.
            A track is a list of the nodes visited to come to the current node.
            </summary>
        </member>
        <member name="M:Pathfinding.AStarz.Initialize(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Use for a 'step by step' search only. This method is alternate to SearchPath.
            Initializes AStar before performing search steps manually with NextStep.
            </summary>
            <exception cref="T:System.ArgumentNullException">StartNode and EndNode cannot be null.</exception>
            <param name="StartNode">The node from which the path must start.</param>
            <param name="EndNode">The node to which the path must end.</param>
        </member>
        <member name="M:Pathfinding.AStarz.NextStep">
            <summary>
            Use for a 'step by step' search only. This method is alternate to SearchPath.
            The algorithm must have been initialize before.
            </summary>
            <exception cref="T:System.InvalidOperationException">You must initialize AStar before using NextStep().</exception>
            <returns>'true' unless the search ended.</returns>
        </member>
        <member name="P:Pathfinding.AStarz.Initialized">
            <summary>
            To know if the search has been initialized.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.SearchStarted">
            <summary>
            To know if the search has been started.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.SearchEnded">
            <summary>
            To know if the search has ended.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.PathFound">
            <summary>
            To know if a path has been found.
            </summary>
        </member>
        <member name="P:Pathfinding.AStarz.StepCounter">
            <summary>
            Use for a 'step by step' search only.
            Gets the number of the current step.
            -1 if the search has not been initialized.
            0 if it has not been started.
            </summary>
        </member>
        <member name="M:Pathfinding.AStarz.ResultInformation(System.Int32@,System.Double@)">
            <summary>
            Returns information on the result.
            </summary>
            <param name="NbArcsOfPath">The number of arcs in the result path / -1 if no result.</param>
            <param name="CostOfPath">The cost of the result path / -1 if no result.</param>
            <returns>'true' if the search succeeded / 'false' if it failed.</returns>
        </member>
        <member name="P:Pathfinding.AStarz.PathByNodes">
            <summary>
            Gets the array of nodes representing the found path.
            </summary>
            <exception cref="T:System.InvalidOperationException">You cannot get a result unless the search has ended.</exception>
        </member>
        <member name="P:Pathfinding.AStarz.PathByCoordinates">
            <summary>
            Gets the array of points representing the found path.
            </summary>
            <exception cref="T:System.InvalidOperationException">You cannot get a result unless the search has ended.</exception>
        </member>
        <member name="T:Pathfinding.Graph">
            <summary>
            Graph structure. It is defined with :
            It is defined with both a list of nodes and a list of arcs.
            </summary>
        </member>
        <member name="M:Pathfinding.Graph.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Pathfinding.Graph.Nodes">
            <summary>
            Gets the List interface of the nodes in the graph.
            </summary>
        </member>
        <member name="P:Pathfinding.Graph.Arcs">
            <summary>
            Gets the List interface of the arcs in the graph.
            </summary>
        </member>
        <member name="M:Pathfinding.Graph.Clear">
            <summary>
            Empties the graph.
            </summary>
        </member>
        <member name="M:Pathfinding.Graph.AddNode(Pathfinding.Node)">
            <summary>
            Directly Adds a node to the graph.
            </summary>
            <param name="NewNode">The node to add.</param>
            <returns>'true' if it has actually been added / 'false' if the node is null or if it is already in the graph.</returns>
        </member>
        <member name="M:Pathfinding.Graph.AddNode(System.Single,System.Single,System.Single)">
            <summary>
            Creates a node, adds to the graph and returns its reference.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <returns>The reference of the new node / null if the node is already in the graph.</returns>
        </member>
        <member name="M:Pathfinding.Graph.AddNode(System.Single,System.Single,System.Single,System.Int32,System.Int32[])">
            <summary>
            Creates a node, adds to the graph and returns its reference.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="id">Id of the node</param>
            <returns>The reference of the new node / null if the node is already in the graph.</returns>
        </member>
        <member name="M:Pathfinding.Graph.AddNode(Clio.Utilities.Vector3,System.Int32,System.Int32[])">
            <summary>
            Creates a node, adds to the graph and returns its reference.
            </summary>
            <param name="x">X coordinate.</param>
            <param name="y">Y coordinate.</param>
            <param name="z">Z coordinate.</param>
            <param name="id">Id of the node</param>
            <returns>The reference of the new node / null if the node is already in the graph.</returns>
        </member>
        <member name="M:Pathfinding.Graph.AddArc(Pathfinding.Arc)">
            <summary>
            Directly Adds an arc to the graph.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot add an arc if one of its extremity nodes does not belong to the graph.</exception>
            <param name="NewArc">The arc to add.</param>
            <returns>'true' if it has actually been added / 'false' if the arc is null or if it is already in the graph.</returns>
        </member>
        <member name="M:Pathfinding.Graph.AddArc(Pathfinding.Node,Pathfinding.Node,System.Single)">
            <summary>
            Creates an arc between two nodes that are already registered in the graph, adds it to the graph and returns its reference.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot add an arc if one of its extremity nodes does not belong to the graph.</exception>
            <param name="StartNode">Start node for the arc.</param>
            <param name="EndNode">End node for the arc.</param>
            <param name="Weight">Weight for the arc.</param>
            <returns>The reference of the new arc / null if the arc is already in the graph.</returns>
        </member>
        <member name="M:Pathfinding.Graph.Add2Arcs(Pathfinding.Node,Pathfinding.Node,System.Single)">
            <summary>
            Adds the two opposite arcs between both specified nodes to the graph.
            </summary>
            <exception cref="T:System.ArgumentException">Cannot add an arc if one of its extremity nodes does not belong to the graph.</exception>
            <param name="Node1"></param>
            <param name="Node2"></param>
            <param name="Weight"></param>
        </member>
        <member name="M:Pathfinding.Graph.RemoveNode(Pathfinding.Node)">
            <summary>
            Removes a node from the graph as well as the linked arcs.
            </summary>
            <param name="NodeToRemove">The node to remove.</param>
            <returns>'true' if succeeded / 'false' otherwise.</returns>
        </member>
        <member name="M:Pathfinding.Graph.RemoveArc(Pathfinding.Arc)">
            <summary>
            Removes a node from the graph as well as the linked arcs.
            </summary>
            <param name="ArcToRemove">The arc to remove.</param>
            <returns>'true' if succeeded / 'false' otherwise.</returns>
        </member>
        <member name="M:Pathfinding.Graph.ClosestNode(System.Single,System.Single,System.Single,System.Single@,System.Boolean)">
            <summary>
            This function will find the closest node from a geographical position in space.
            </summary>
            <param name="PtX">X coordinate of the point from which you want the closest node.</param>
            <param name="PtY">Y coordinate of the point from which you want the closest node.</param>
            <param name="PtZ">Z coordinate of the point from which you want the closest node.</param>
            <param name="Distance">The distance to the closest node.</param>
            <param name="IgnorePassableProperty">if 'false', then nodes whose property Passable is set to false will not be taken into account.</param>
            <returns>The closest node that has been found.</returns>
        </member>
        <member name="M:Pathfinding.Graph.ClosestNodes(Clio.Utilities.Vector3,System.Int32,System.Boolean)">
            <summary>
            returns the three closest nodes to a point
            </summary>
            <param name="point"></param>
            <param name="IgnorePassableProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Graph.FarthestNodes(Clio.Utilities.Vector3,System.Int32,System.Boolean)">
            <summary>
            returns the three closest nodes to a point
            </summary>
            <param name="point"></param>
            <param name="IgnorePassableProperty"></param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.Graph.FarthestNode(System.Single,System.Single,System.Single,System.Single@,System.Boolean)">
            <summary>
            This function will find the farthest node from a geographical position in space.
            </summary>
            <param name="PtX">X coordinate of the point from which you want the closest node.</param>
            <param name="PtY">Y coordinate of the point from which you want the closest node.</param>
            <param name="PtZ">Z coordinate of the point from which you want the closest node.</param>
            <param name="Distance">The distance to the closest node.</param>
            <param name="IgnorePassableProperty">if 'false', then nodes whose property Passable is set to false will not be taken into account.</param>
            <returns>The closest node that has been found.</returns>
        </member>
        <member name="T:Pathfinding.Node">
            <summary>
            Basically a node is defined with a geographical position in space.
            It is also characterized with both collections of outgoing arcs and incoming arcs.
            </summary>
        </member>
        <member name="M:Pathfinding.Node.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructor.
            </summary>
            <param name="PositionX">X coordinate.</param>
            <param name="PositionY">Y coordinate.</param>
            <param name="PositionZ">Z coordinate.</param>
        </member>
        <member name="P:Pathfinding.Node.Passable">
            Gets/Sets the functional state of the node.
            'true' means that the node is in its normal state.
            'false' means that the node will not be taken into account (as if it did not exist).
        </member>
        <member name="P:Pathfinding.Node.X">
            <summary>
            Gets X coordinate.
            </summary>
        </member>
        <member name="P:Pathfinding.Node.Y">
            <summary>
            Gets Y coordinate.
            </summary>
        </member>
        <member name="P:Pathfinding.Node.Z">
            <summary>
            Gets Z coordinate.
            </summary>
        </member>
        <member name="M:Pathfinding.Node.ChangeXYZ(System.Single,System.Single,System.Single)">
            <summary>
            Modifies X, Y and Z coordinates
            </summary>
            <param name="PositionX">X coordinate.</param>
            <param name="PositionY">Y coordinate.</param>
            <param name="PositionZ">Z coordinate.</param>
        </member>
        <member name="P:Pathfinding.Node.Position">
            <summary>
            Gets/Sets the geographical position of the node.
            </summary>
            <exception cref="T:System.ArgumentNullException">Cannot set the Position to null.</exception>
        </member>
        <member name="M:Pathfinding.Node.ToString">
            <summary>
            object.ToString() override.
            Returns the textual description of the node.
            </summary>
            <returns>String describing this node.</returns>
        </member>
        <member name="M:Pathfinding.Node.Equals(System.Object)">
            <summary>
            Object.Equals override.
            Tells if two nodes are equal by comparing positions.
            </summary>
            <exception cref="T:System.ArgumentException">A Node cannot be compared with another type.</exception>
            <param name="O">The node to compare with.</param>
            <returns>'true' if both nodes are equal.</returns>
        </member>
        <member name="M:Pathfinding.Node.Clone">
            <summary>
            Returns a copy of this node.
            </summary>
            <returns>The reference of the new object.</returns>
        </member>
        <member name="M:Pathfinding.Node.GetHashCode">
            <summary>
            Object.GetHashCode override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="M:Pathfinding.Node.EuclidianDistance(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Returns the euclidian distance between two nodes : Sqrt(Dx²+Dy²+Dz²)
            </summary>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:Pathfinding.Node.SquareEuclidianDistance(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Returns the square euclidian distance between two nodes : Dx²+Dy²+Dz²
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument nodes must not be null.</exception>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:Pathfinding.Node.ManhattanDistance(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Returns the manhattan distance between two nodes : |Dx|+|Dy|+|Dz|
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument nodes must not be null.</exception>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="M:Pathfinding.Node.MaxDistanceAlongAxis(Pathfinding.Node,Pathfinding.Node)">
            <summary>
            Returns the maximum distance between two nodes : Max(|Dx|, |Dy|, |Dz|)
            </summary>
            <exception cref="T:System.ArgumentNullException">Argument nodes must not be null.</exception>
            <param name="N1">First node.</param>
            <param name="N2">Second node.</param>
            <returns>Distance value.</returns>
        </member>
        <member name="T:Pathfinding.SortableList">
            <summary>
            The SortableList allows to maintain a list sorted as long as needed.
            If no IComparer interface has been provided at construction, then the list expects the Objects to implement IComparer.
            If the list is not sorted it behaves like an ordinary list.
            When sorted, the list's "Add" method will put new objects at the right place.
            As well the "Contains" and "IndexOf" methods will perform a binary search.
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.#ctor">
            <summary>
            Default constructor.
            Since no IComparer is provided here, added objects must implement the IComparer interface.
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.#ctor(System.Int32)">
            <summary>
            Constructor.
            Since no IComparer is provided, added objects must implement the IComparer interface.
            </summary>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="M:Pathfinding.SortableList.#ctor(System.Collections.IComparer)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
        </member>
        <member name="M:Pathfinding.SortableList.#ctor(System.Collections.IComparer,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="Comparer">Will be used to compare added elements for sort and search operations.</param>
            <param name="Capacity">Capacity of the list (<see cref="P:System.Collections.ArrayList.Capacity">ArrayList.Capacity</see>)</param>
        </member>
        <member name="P:Pathfinding.SortableList.IsSorted">
            <summary>
            'Get only' property that indicates if the list is sorted.
            </summary>
        </member>
        <member name="P:Pathfinding.SortableList.KeepSorted">
            <summary>
            Get : Indicates if the list must be kept sorted from now on.
            Set : Tells the list if it must stay sorted or not. Impossible to set to true if the list is not sorted.
            <see cref="P:Pathfinding.SortableList.KeepSorted">KeepSorted</see>==true implies that <see cref="P:Pathfinding.SortableList.IsSorted">IsSorted</see>==true
            </summary>
            <exception cref="T:System.InvalidOperationException">Cannot be set to true if the list is not sorted yet.</exception>
        </member>
        <member name="P:Pathfinding.SortableList.AddDuplicates">
            <summary>
            If set to true, it will not be possible to add an object to the list if its value is already in the list.
            </summary>
        </member>
        <member name="P:Pathfinding.SortableList.Item(System.Int32)">
            <summary>
            IList implementation.
            Gets - or sets - object's value at a specified index.
            The set operation is impossible if the <see cref="P:Pathfinding.SortableList.KeepSorted">KeepSorted</see> property is set to true.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">[] operator cannot be used to set a value if KeepSorted property is set to true.</exception>
        </member>
        <member name="M:Pathfinding.SortableList.Add(System.Object)">
            <summary>
            IList implementation.
            If the <see cref="P:Pathfinding.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be added at the end of the list.
            </summary>
            <param name="O">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:Pathfinding.SortableList.Contains(System.Object)">
            <summary>
            IList implementation.
            Search for a specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:Pathfinding.SortableList.Equals(System.Object)">Object.Equals</see> implementation is used.
            </summary>
            <param name="O">The object to look for</param>
            <returns>true if the object is in the list, otherwise false.</returns>
        </member>
        <member name="M:Pathfinding.SortableList.IndexOf(System.Object)">
            <summary>
            IList implementation.
            Returns the index of the specified object in the list.
            If the list is sorted, a <see cref="M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)">BinarySearch</see> is performed using IComparer interface.
            Else the <see cref="M:Pathfinding.SortableList.Equals(System.Object)">Object.Equals</see> implementation of objects is used.
            </summary>
            <param name="O">The object to locate.</param>
            <returns>
            If the object has been found, a positive integer corresponding to its position.
            If the objects has not been found, a negative integer which is the bitwise complement of the index of the next element.
            </returns>
        </member>
        <member name="P:Pathfinding.SortableList.IsFixedSize">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Pathfinding.SortableList.IsReadOnly">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.Clear">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.Insert(System.Int32,System.Object)">
            <summary>
            IList implementation.
            Inserts an objects at a specified index.
            Cannot be used if the list has its KeepSorted property set to true.
            </summary>
            <param name="Index">The index before which the object must be added.</param>
            <param name="O">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:Pathfinding.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:Pathfinding.SortableList.Remove(System.Object)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Value">The object whose value must be removed if found in the list.</param>
        </member>
        <member name="M:Pathfinding.SortableList.RemoveAt(System.Int32)">
            <summary>
            IList implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="Index">Index of object to remove.</param>
        </member>
        <member name="M:Pathfinding.SortableList.CopyTo(System.Array,System.Int32)">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="P:Pathfinding.SortableList.Count">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Pathfinding.SortableList.IsSynchronized">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="P:Pathfinding.SortableList.SyncRoot">
            <summary>
            IList.ICollection implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.GetEnumerator">
            <summary>
            IList.IEnumerable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Enumerator on the list.</returns>
        </member>
        <member name="M:Pathfinding.SortableList.Clone">
            <summary>
            ICloneable implementation.
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
            <returns>Cloned object.</returns>
        </member>
        <member name="M:Pathfinding.SortableList.IndexOf(System.Object,System.Int32)">
            <summary>
            Idem IndexOf(object), but starting at a specified position in the list
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <returns></returns>
        </member>
        <member name="T:Pathfinding.SortableList.Equality">
            <summary>
            Defines an equality for two objects
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.IndexOf(System.Object,Pathfinding.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="M:Pathfinding.SortableList.IndexOf(System.Object,System.Int32,Pathfinding.SortableList.Equality)">
            <summary>
            Idem IndexOf(object), but with a start index and a specified equality function
            </summary>
            <param name="O">The object to locate.</param>
            <param name="Start">The index for start position.</param>
            <param name="AreEqual">Equality function to use for the search.</param>
            <returns></returns>
        </member>
        <member name="P:Pathfinding.SortableList.Capacity">
            <summary>
            Idem <see cref="T:System.Collections.ArrayList">ArrayList</see>
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.ToString">
            <summary>
            Object.ToString() override.
            Build a string to represent the list.
            </summary>
            <returns>The string refecting the list.</returns>
        </member>
        <member name="M:Pathfinding.SortableList.Equals(System.Object)">
            <summary>
            Object.Equals() override.
            </summary>
            <returns>true if object is equal to this, otherwise false.</returns>
        </member>
        <member name="M:Pathfinding.SortableList.GetHashCode">
            <summary>
            Object.GetHashCode() override.
            </summary>
            <returns>HashCode value.</returns>
        </member>
        <member name="M:Pathfinding.SortableList.Sort">
            <summary>
            Sorts the elements in the list using <see cref="M:System.Collections.ArrayList.Sort">ArrayList.Sort</see>.
            Does nothing if the list is already sorted.
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.AddRange(System.Collections.ICollection)">
            <summary>
            If the <see cref="P:Pathfinding.SortableList.KeepSorted">KeepSorted</see> property is set to true, the object will be added at the right place.
            Else it will be appended to the list.
            </summary>
            <param name="C">The object to add.</param>
            <returns>The index where the object has been added.</returns>
            <exception cref="T:System.ArgumentException">The SortableList is set to use object's IComparable interface, and the specifed object does not implement this interface.</exception>
        </member>
        <member name="M:Pathfinding.SortableList.InsertRange(System.Int32,System.Collections.ICollection)">
            <summary>
            Inserts a collection of objects at a specified index.
            Should not be used if the list is the KeepSorted property is set to true.
            </summary>
            <param name="Index">The index before which the objects must be added.</param>
            <param name="C">The object to add.</param>
            <exception cref="T:System.ArgumentException">The SortableList is set to use objects's IComparable interface, and the specifed object does not implement this interface.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Index is less than zero or Index is greater than Count.</exception>
            <exception cref="T:System.InvalidOperationException">If the object is added at the specify index, the list will not be sorted any more and the <see cref="P:Pathfinding.SortableList.KeepSorted"/> property is set to true.</exception>
        </member>
        <member name="M:Pathfinding.SortableList.LimitNbOccurrences(System.Object,System.Int32)">
            <summary>
            Limits the number of occurrences of a specified value.
            Same values are equals according to the Equals() method of objects in the list.
            The first occurrences encountered are kept.
            </summary>
            <param name="Value">Value whose occurrences number must be limited.</param>
            <param name="NbValuesToKeep">Number of occurrences to keep</param>
        </member>
        <member name="M:Pathfinding.SortableList.RemoveDuplicates">
            <summary>
            Removes all duplicates in the list.
            Each value encountered will have only one representant.
            </summary>
        </member>
        <member name="M:Pathfinding.SortableList.IndexOfMin">
            <summary>
            Returns the object of the list whose value is minimum
            </summary>
            <returns>The minimum object in the list</returns>
        </member>
        <member name="M:Pathfinding.SortableList.IndexOfMax">
            <summary>
            Returns the object of the list whose value is maximum
            </summary>
            <returns>The maximum object in the list</returns>
        </member>
        <member name="T:Pathfinding.Track">
            <summary>
            A track is a succession of nodes which have been visited.
            Thus when it leads to the target node, it is easy to return the result path.
            These objects are contained in Open and Closed lists.
            </summary>
        </member>
    </members>
</doc>
